{
  "address": "0x848047d48616Aced5Ae1b008f771AcC3539a7DB2",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_AlToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_Token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_governance",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "governance",
          "type": "address"
        }
      ],
      "name": "GovernanceUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "pendingGovernance",
          "type": "address"
        }
      ],
      "name": "PendingGovernanceUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newTransmutationPeriod",
          "type": "uint256"
        }
      ],
      "name": "TransmuterPeriodUpdated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "AlToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "POINT_MULTIPLIER",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "Token",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ZERO_ADDRESS",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "acceptGovernance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "buffer",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bufferInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_toDistribute",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_deltaBlocks",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_buffer",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "depositedAlTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "origin",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "distribute",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "dividendsOwing",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "exit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "toTransmute",
          "type": "address"
        }
      ],
      "name": "forceTransmute",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "from",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "to",
          "type": "uint256"
        }
      ],
      "name": "getMultipleUserInfo",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "theUserList",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "theUserData",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governance",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastDepositBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "lastDividendPoints",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextUser",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingGovernance",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "realisedTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pendingGovernance",
          "type": "address"
        }
      ],
      "name": "setPendingGovernance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newTransmutationPeriod",
          "type": "uint256"
        }
      ],
      "name": "setTransmutationPeriod",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_toWhitelist",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_state",
          "type": "bool"
        }
      ],
      "name": "setWhitelist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tokensInBucket",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalDividendPoints",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupplyAltokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "transmutationPeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "transmute",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "transmuteAndClaim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "transmuteClaimAndWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unclaimedDividends",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "unstake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "userInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "depositedAl",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "pendingdivs",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "inbucket",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "realised",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userIsKnown",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "userList",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "whiteList",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xa0a05124fbaf4c22f7a9f37a89a59fdfd7f7ed5a1bfdd852defe420ccc9a2e78",
  "receipt": {
    "to": null,
    "from": "0x69Dc1267198e2D21B56Ef0f1C6BcC57d96A7ED4B",
    "contractAddress": "0x848047d48616Aced5Ae1b008f771AcC3539a7DB2",
    "transactionIndex": 3,
    "gasUsed": "2228717",
    "logsBloom": "0x
    "blockHash": "0x4c7ecf420b9da99b681e605ade8be27833820fdbc7dc11447854bcae760a0f5f",
    "transactionHash": "0xa0a05124fbaf4c22f7a9f37a89a59fdfd7f7ed5a1bfdd852defe420ccc9a2e78",
    "logs": [],
    "blockNumber": 29564940,
    "cumulativeGasUsed": "2434580",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x62a3909D5a2d4A50e2225177FAF147e2D9d4B96f",
    "0x25E853D3C1e46233766ea77c437c8127D55FcF13",
    "0x69Dc1267198e2D21B56Ef0f1C6BcC57d96A7ED4B"
  ],
  "solcInputHash": "38e5df16817a53515de6fb4ad4dcf0e1",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_AlToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_Token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"governance\",\"type\":\"address\"}],\"name\":\"GovernanceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pendingGovernance\",\"type\":\"address\"}],\"name\":\"PendingGovernanceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTransmutationPeriod\",\"type\":\"uint256\"}],\"name\":\"TransmuterPeriodUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"AlToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POINT_MULTIPLIER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ZERO_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buffer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bufferInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_toDistribute\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_deltaBlocks\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_buffer\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"depositedAlTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"origin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"distribute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"dividendsOwing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toTransmute\",\"type\":\"address\"}],\"name\":\"forceTransmute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"to\",\"type\":\"uint256\"}],\"name\":\"getMultipleUserInfo\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"theUserList\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"theUserData\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastDepositBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastDividendPoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingGovernance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"realisedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pendingGovernance\",\"type\":\"address\"}],\"name\":\"setPendingGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newTransmutationPeriod\",\"type\":\"uint256\"}],\"name\":\"setTransmutationPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_toWhitelist\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_state\",\"type\":\"bool\"}],\"name\":\"setWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokensInBucket\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDividendPoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupplyAltokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transmutationPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transmute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transmuteAndClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transmuteClaimAndWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unclaimedDividends\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"depositedAl\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pendingdivs\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"inbucket\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"realised\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userIsKnown\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whiteList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the {IERC20Burnable} interface. This implementation is agnostic to the way tokens are created. This means that a supply mechanism has to be added in a derived contract using {_mint}. For a generic mechanism see {ERC20PresetMinterPauser}. TIP: For a detailed writeup see our guide https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How to implement supply mechanisms]. We have followed general OpenZeppelin guidelines: functions revert instead of returning `false` on failure. This behavior is nonetheless conventional and does not conflict with the expectations of ERC20 applications. Additionally, an {Approval} event is emitted on calls to {transferFrom}. This allows applications to reconstruct the allowance for all accounts just by listening to said events. Other implementations of the EIP may not emit these events, as it isn't required by the specification. Finally, the non-standard {decreaseAllowance} and {increaseAllowance} functions have been added to mitigate the well-known issues around setting allowances. See {IERC20Burnable-approve}.\",\"kind\":\"dev\",\"methods\":{\"acceptGovernance()\":{\"details\":\"Accepts the role as governance. This function reverts if the caller is not the new pending governance.\"},\"bufferInfo()\":{\"details\":\"Gets info on the buffer This function is used to query the contract to get the latest state of the buffer\",\"returns\":{\"_buffer\":\"the amount in the buffer\",\"_deltaBlocks\":\"the amount of time since the last phased distribution\",\"_toDistribute\":\"the amount ready to be distributed\"}},\"claim()\":{\"details\":\"claims the base token after it has been transmuted This function reverts if there is no realisedToken balance\"},\"distribute(address,uint256)\":{\"details\":\"Distributes the base token proportionally to all alToken stakers. This function is meant to be called by the Alchemist contract for when it is sending yield to the transmuter. Anyone can call this and add funds, idk why they would do that though...\",\"params\":{\"amount\":\"the amount of base tokens to be distributed to the transmuter.\",\"origin\":\"the account that is sending the tokens to be distributed.\"}},\"dividendsOwing(address)\":{\"returns\":{\"_0\":\"displays the user's share of the pooled alTokens.\"}},\"exit()\":{\"details\":\"Transmutes and unstakes all alTokens This function combines the transmute and unstake functions for ease of use\"},\"forceTransmute(address)\":{\"details\":\"Executes transmute() on another account that has had more base tokens allocated to it than alTokens staked. The caller of this function will have the surlus base tokens credited to their tokensInBucket balance, rewarding them for performing this action This function reverts if the address to transmute is not over-filled.\",\"params\":{\"toTransmute\":\"address of the account you will force transmute.\"}},\"getMultipleUserInfo(uint256,uint256)\":{\"details\":\"Gets the status of multiple users in one call This function is used to query the contract to check for accounts that have overfilled positions in order to check who can be force transmuted.\",\"params\":{\"from\":\"the first index of the userList\",\"to\":\"the last index of the userList returns the userList with their staking status in paginated form.\"}},\"setPendingGovernance(address)\":{\"details\":\"Sets the pending governance. This function reverts if the new pending governance is the zero address or the caller is not the current governance. This is to prevent the contract governance being set to the zero address which would deadlock privileged contract functionality.\",\"params\":{\"_pendingGovernance\":\"the new pending governance.\"}},\"setTransmutationPeriod(uint256)\":{\"details\":\"set the transmutationPeriod variable sets the length (in blocks) of one full distribution phase\"},\"setWhitelist(address,bool)\":{\"params\":{\"_state\":\"the whitelist state.\",\"_toWhitelist\":\"the account to mint tokens to.\"}},\"stake(uint256)\":{\"details\":\"Deposits alTokens into the transmuter\",\"params\":{\"amount\":\"the amount of alTokens to stake\"}},\"transmute()\":{\"details\":\"Converts the staked alTokens to the base tokens in amount of the sum of pendingdivs and tokensInBucket once the alToken has been converted, it is burned, and the base token becomes realisedTokens which can be recieved using claim() reverts if there are no pendingdivs or tokensInBucket\"},\"transmuteAndClaim()\":{\"details\":\"Transmutes and claims all converted base tokens. This function combines the transmute and claim functions while leaving your remaining alTokens staked.\"},\"transmuteClaimAndWithdraw()\":{\"details\":\"Transmutes, claims base tokens, and withdraws alTokens. This function helps users to exit the transmuter contract completely after converting their alTokens to the base pair.\"},\"unstake(uint256)\":{\"details\":\"Withdraws staked alTokens from the transmuter This function reverts if you try to draw more tokens than you deposited\",\"params\":{\"amount\":\"the amount of alTokens to unstake\"}},\"userInfo(address)\":{\"details\":\"Gets the status of a user's staking position. The total amount allocated to a user is the sum of pendingdivs and inbucket.\",\"params\":{\"user\":\"the address of the user you wish to query. returns user status\"}}},\"stateVariables\":{\"POINT_MULTIPLIER\":{\"details\":\"values needed to calculate the distribution of base asset in proportion for alTokens staked\"},\"governance\":{\"details\":\"The address of the account which currently has administrative capabilities over this contract.\"},\"pendingGovernance\":{\"details\":\"The address of the pending governance.\"},\"whiteList\":{\"details\":\"alchemist addresses whitelisted\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"setWhitelist(address,bool)\":{\"notice\":\"This function reverts if the caller is not governance\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Transmuter.sol\":\"Transmuter\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"contracts/Transmuter.sol\":{\"content\":\"pragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"./interfaces/IERC20Burnable.sol\\\";\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\n//    ___    __        __                _               ___                              __         _\\n//   / _ |  / / ____  / /  ___   __ _   (_) __ __       / _ \\\\  ____ ___   ___ ___   ___  / /_  ___  (_)\\n//  / __ | / / / __/ / _ \\\\/ -_) /  ' \\\\ / /  \\\\ \\\\ /      / ___/ / __// -_) (_-</ -_) / _ \\\\/ __/ (_-< _\\n// /_/ |_|/_/  \\\\__/ /_//_/\\\\__/ /_/_/_//_/  /_\\\\_\\\\      /_/    /_/   \\\\__/ /___/\\\\__/ /_//_/\\\\__/ /___/(_)\\n//\\n// .___________..______           ___      .__   __.      _______..___  ___.  __    __  .___________. _______ .______\\n// |           ||   _  \\\\         /   \\\\     |  \\\\ |  |     /       ||   \\\\/   | |  |  |  | |           ||   ____||   _  \\\\\\n// `---|  |----`|  |_)  |       /  ^  \\\\    |   \\\\|  |    |   (----`|  \\\\  /  | |  |  |  | `---|  |----`|  |__   |  |_)  |\\n//     |  |     |      /       /  /_\\\\  \\\\   |  . `  |     \\\\   \\\\    |  |\\\\/|  | |  |  |  |     |  |     |   __|  |      /\\n//     |  |     |  |\\\\  \\\\----. /  _____  \\\\  |  |\\\\   | .----)   |   |  |  |  | |  `--'  |     |  |     |  |____ |  |\\\\  \\\\----.\\n//     |__|     | _| `._____|/__/     \\\\__\\\\ |__| \\\\__| |_______/    |__|  |__|  \\\\______/      |__|     |_______|| _| `._____|\\n/**\\n * @dev Implementation of the {IERC20Burnable} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20Burnable-approve}.\\n */\\ncontract Transmuter {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20Burnable;\\n    using Address for address;\\n\\n    address public constant ZERO_ADDRESS = address(0);\\n\\n    ///@dev values needed to calculate the distribution of base asset in proportion for alTokens staked\\n    uint256 public constant POINT_MULTIPLIER = 10e18;\\n\\n    uint256 public transmutationPeriod;\\n\\n    address public immutable AlToken;\\n    address public immutable Token;\\n\\n    mapping(address => uint256) public depositedAlTokens;\\n    mapping(address => uint256) public tokensInBucket;\\n    mapping(address => uint256) public realisedTokens;\\n    mapping(address => uint256) public lastDividendPoints;\\n\\n    mapping(address => bool) public userIsKnown;\\n    mapping(uint256 => address) public userList;\\n    uint256 public nextUser;\\n\\n    uint256 public totalSupplyAltokens;\\n    uint256 public buffer;\\n    uint256 public lastDepositBlock;\\n\\n    uint256 public totalDividendPoints;\\n    uint256 public unclaimedDividends;\\n\\n    /// @dev alchemist addresses whitelisted\\n    mapping(address => bool) public whiteList;\\n\\n    /// @dev The address of the account which currently has administrative capabilities over this contract.\\n    address public governance;\\n\\n    /// @dev The address of the pending governance.\\n    address public pendingGovernance;\\n\\n    event GovernanceUpdated(address governance);\\n\\n    event PendingGovernanceUpdated(address pendingGovernance);\\n\\n    event TransmuterPeriodUpdated(uint256 newTransmutationPeriod);\\n\\n    constructor(\\n        address _AlToken,\\n        address _Token,\\n        address _governance\\n    ) public {\\n        require(_governance != ZERO_ADDRESS, \\\"Transmuter: 0 gov\\\");\\n        governance = _governance;\\n        AlToken = _AlToken;\\n        Token = _Token;\\n        transmutationPeriod = 50;\\n    }\\n\\n    ///@return displays the user's share of the pooled alTokens.\\n    function dividendsOwing(address account) public view returns (uint256) {\\n        uint256 newDividendPoints = totalDividendPoints.sub(\\n            lastDividendPoints[account]\\n        );\\n        return\\n            depositedAlTokens[account].mul(newDividendPoints).div(\\n                POINT_MULTIPLIER\\n            );\\n    }\\n\\n    ///@dev modifier to fill the bucket and keep bookkeeping correct incase of increase/decrease in shares\\n    modifier updateAccount(address account) {\\n        uint256 owing = dividendsOwing(account);\\n        if (owing > 0) {\\n            unclaimedDividends = unclaimedDividends.sub(owing);\\n            tokensInBucket[account] = tokensInBucket[account].add(owing);\\n        }\\n        lastDividendPoints[account] = totalDividendPoints;\\n        _;\\n    }\\n    ///@dev modifier add users to userlist. Users are indexed in order to keep track of when a bond has been filled\\n    modifier checkIfNewUser() {\\n        if (!userIsKnown[msg.sender]) {\\n            userList[nextUser] = msg.sender;\\n            userIsKnown[msg.sender] = true;\\n            nextUser++;\\n        }\\n        _;\\n    }\\n\\n    ///@dev run the phased distribution of the buffered funds\\n    modifier runPhasedDistribution() {\\n        uint256 _lastDepositBlock = lastDepositBlock;\\n        uint256 _currentBlock = block.number;\\n        uint256 _toDistribute = 0;\\n        uint256 _buffer = buffer;\\n\\n        // check if there is something in bufffer\\n        if (_buffer > 0) {\\n            // NOTE: if last deposit was updated in the same block as the current call\\n            // then the below logic gates will fail\\n\\n            //calculate diffrence in time\\n            uint256 deltaTime = _currentBlock.sub(_lastDepositBlock);\\n\\n            // distribute all if bigger than timeframe\\n            if (deltaTime >= transmutationPeriod) {\\n                _toDistribute = _buffer;\\n            } else {\\n                //needs to be bigger than 0 cuzz solidity no decimals\\n                if (_buffer.mul(deltaTime) > transmutationPeriod) {\\n                    _toDistribute = _buffer.mul(deltaTime).div(\\n                        transmutationPeriod\\n                    );\\n                }\\n            }\\n\\n            // factually allocate if any needs distribution\\n            if (_toDistribute > 0) {\\n                // remove from buffer\\n                buffer = _buffer.sub(_toDistribute);\\n\\n                // increase the allocation\\n                increaseAllocations(_toDistribute);\\n            }\\n        }\\n\\n        // current timeframe is now the last\\n        lastDepositBlock = _currentBlock;\\n        _;\\n    }\\n\\n    /// @dev A modifier which checks if whitelisted for minting.\\n    modifier onlyWhitelisted() {\\n        require(whiteList[msg.sender], \\\"Transmuter: !whitelisted\\\");\\n        _;\\n    }\\n\\n    /// @dev Checks that the current message sender or caller is the governance address.\\n    ///\\n    ///\\n    modifier onlyGov() {\\n        require(msg.sender == governance, \\\"Transmuter: !governance\\\");\\n        _;\\n    }\\n\\n    ///@dev set the transmutationPeriod variable\\n    ///\\n    /// sets the length (in blocks) of one full distribution phase\\n    function setTransmutationPeriod(uint256 newTransmutationPeriod)\\n        public\\n        onlyGov\\n    {\\n        transmutationPeriod = newTransmutationPeriod;\\n        emit TransmuterPeriodUpdated(transmutationPeriod);\\n    }\\n\\n    ///@dev claims the base token after it has been transmuted\\n    ///\\n    ///This function reverts if there is no realisedToken balance\\n    function claim() public {\\n        address sender = msg.sender;\\n        require(realisedTokens[sender] > 0);\\n        uint256 value = realisedTokens[sender];\\n        realisedTokens[sender] = 0;\\n        IERC20Burnable(Token).safeTransfer(sender, value);\\n    }\\n\\n    ///@dev Withdraws staked alTokens from the transmuter\\n    ///\\n    /// This function reverts if you try to draw more tokens than you deposited\\n    ///\\n    ///@param amount the amount of alTokens to unstake\\n    function unstake(uint256 amount)\\n        public\\n        runPhasedDistribution\\n        updateAccount(msg.sender)\\n    {\\n        // by calling this function before transmuting you forfeit your gained allocation\\n        address sender = msg.sender;\\n        require(\\n            depositedAlTokens[sender] >= amount,\\n            \\\"Transmuter: unstake amount exceeds deposited amount\\\"\\n        );\\n        depositedAlTokens[sender] = depositedAlTokens[sender].sub(amount);\\n        totalSupplyAltokens = totalSupplyAltokens.sub(amount);\\n        IERC20Burnable(AlToken).safeTransfer(sender, amount);\\n    }\\n\\n    ///@dev Deposits alTokens into the transmuter\\n    ///\\n    ///@param amount the amount of alTokens to stake\\n    function stake(uint256 amount)\\n        public\\n        runPhasedDistribution\\n        updateAccount(msg.sender)\\n        checkIfNewUser\\n    {\\n        // requires approval of AlToken first\\n        address sender = msg.sender;\\n        //require tokens transferred in;\\n        IERC20Burnable(AlToken).safeTransferFrom(sender, address(this), amount);\\n        totalSupplyAltokens = totalSupplyAltokens.add(amount);\\n        depositedAlTokens[sender] = depositedAlTokens[sender].add(amount);\\n    }\\n\\n    /// @dev Converts the staked alTokens to the base tokens in amount of the sum of pendingdivs and tokensInBucket\\n    ///\\n    /// once the alToken has been converted, it is burned, and the base token becomes realisedTokens which can be recieved using claim()\\n    ///\\n    /// reverts if there are no pendingdivs or tokensInBucket\\n    function transmute()\\n        public\\n        runPhasedDistribution\\n        updateAccount(msg.sender)\\n    {\\n        address sender = msg.sender;\\n        uint256 pendingz = tokensInBucket[sender];\\n        uint256 diff;\\n\\n        require(pendingz > 0, \\\"need to have pending in bucket\\\");\\n\\n        tokensInBucket[sender] = 0;\\n\\n        // check bucket overflow\\n        if (pendingz > depositedAlTokens[sender]) {\\n            diff = pendingz.sub(depositedAlTokens[sender]);\\n\\n            // remove overflow\\n            pendingz = depositedAlTokens[sender];\\n        }\\n\\n        // decrease altokens\\n        depositedAlTokens[sender] = depositedAlTokens[sender].sub(pendingz);\\n\\n        // BURN ALTOKENS\\n        IERC20Burnable(AlToken).burn(pendingz);\\n\\n        // adjust total\\n        totalSupplyAltokens = totalSupplyAltokens.sub(pendingz);\\n\\n        // reallocate overflow\\n        increaseAllocations(diff);\\n\\n        // add payout\\n        realisedTokens[sender] = realisedTokens[sender].add(pendingz);\\n    }\\n\\n    /// @dev Executes transmute() on another account that has had more base tokens allocated to it than alTokens staked.\\n    ///\\n    /// The caller of this function will have the surlus base tokens credited to their tokensInBucket balance, rewarding them for performing this action\\n    ///\\n    /// This function reverts if the address to transmute is not over-filled.\\n    ///\\n    /// @param toTransmute address of the account you will force transmute.\\n    function forceTransmute(address toTransmute)\\n        public\\n        runPhasedDistribution\\n        updateAccount(msg.sender)\\n        updateAccount(toTransmute)\\n    {\\n        //load into memory\\n        address sender = msg.sender;\\n        uint256 pendingz = tokensInBucket[toTransmute];\\n        // check restrictions\\n        require(\\n            pendingz > depositedAlTokens[toTransmute],\\n            \\\"Transmuter: !overflow\\\"\\n        );\\n\\n        // empty bucket\\n        tokensInBucket[toTransmute] = 0;\\n\\n        // calculaate diffrence\\n        uint256 diff = pendingz.sub(depositedAlTokens[toTransmute]);\\n\\n        // remove overflow\\n        pendingz = depositedAlTokens[toTransmute];\\n\\n        // decrease altokens\\n        depositedAlTokens[toTransmute] = 0;\\n\\n        // BURN ALTOKENS\\n        IERC20Burnable(AlToken).burn(pendingz);\\n\\n        // adjust total\\n        totalSupplyAltokens = totalSupplyAltokens.sub(pendingz);\\n\\n        // reallocate overflow\\n        tokensInBucket[sender] = tokensInBucket[sender].add(diff);\\n\\n        // add payout\\n        realisedTokens[toTransmute] = realisedTokens[toTransmute].add(pendingz);\\n\\n        // force payout of realised tokens of the toTransmute address\\n        if (realisedTokens[toTransmute] > 0) {\\n            uint256 value = realisedTokens[toTransmute];\\n            realisedTokens[toTransmute] = 0;\\n            IERC20Burnable(Token).safeTransfer(toTransmute, value);\\n        }\\n    }\\n\\n    /// @dev Transmutes and unstakes all alTokens\\n    ///\\n    /// This function combines the transmute and unstake functions for ease of use\\n    function exit() external {\\n        transmute();\\n        uint256 toWithdraw = depositedAlTokens[msg.sender];\\n        unstake(toWithdraw);\\n    }\\n\\n    /// @dev Transmutes and claims all converted base tokens.\\n    ///\\n    /// This function combines the transmute and claim functions while leaving your remaining alTokens staked.\\n    function transmuteAndClaim() external {\\n        transmute();\\n        claim();\\n    }\\n\\n    /// @dev Transmutes, claims base tokens, and withdraws alTokens.\\n    ///\\n    /// This function helps users to exit the transmuter contract completely after converting their alTokens to the base pair.\\n    function transmuteClaimAndWithdraw() external {\\n        transmute();\\n        claim();\\n        uint256 toWithdraw = depositedAlTokens[msg.sender];\\n        unstake(toWithdraw);\\n    }\\n\\n    /// @dev Distributes the base token proportionally to all alToken stakers.\\n    ///\\n    /// This function is meant to be called by the Alchemist contract for when it is sending yield to the transmuter.\\n    /// Anyone can call this and add funds, idk why they would do that though...\\n    ///\\n    /// @param origin the account that is sending the tokens to be distributed.\\n    /// @param amount the amount of base tokens to be distributed to the transmuter.\\n    function distribute(address origin, uint256 amount)\\n        public\\n        onlyWhitelisted\\n        runPhasedDistribution\\n    {\\n        IERC20Burnable(Token).safeTransferFrom(origin, address(this), amount);\\n        buffer = buffer.add(amount);\\n    }\\n\\n    /// @dev Allocates the incoming yield proportionally to all alToken stakers.\\n    ///\\n    /// @param amount the amount of base tokens to be distributed in the transmuter.\\n    function increaseAllocations(uint256 amount) internal {\\n        if (totalSupplyAltokens > 0 && amount > 0) {\\n            totalDividendPoints = totalDividendPoints.add(\\n                amount.mul(POINT_MULTIPLIER).div(totalSupplyAltokens)\\n            );\\n            unclaimedDividends = unclaimedDividends.add(amount);\\n        } else {\\n            buffer = buffer.add(amount);\\n        }\\n    }\\n\\n    /// @dev Gets the status of a user's staking position.\\n    ///\\n    /// The total amount allocated to a user is the sum of pendingdivs and inbucket.\\n    ///\\n    /// @param user the address of the user you wish to query.\\n    ///\\n    /// returns user status\\n\\n    function userInfo(address user)\\n        public\\n        view\\n        returns (\\n            uint256 depositedAl,\\n            uint256 pendingdivs,\\n            uint256 inbucket,\\n            uint256 realised\\n        )\\n    {\\n        uint256 _depositedAl = depositedAlTokens[user];\\n        uint256 _toDistribute = buffer\\n            .mul(block.number.sub(lastDepositBlock))\\n            .div(transmutationPeriod);\\n        if (block.number.sub(lastDepositBlock) > transmutationPeriod) {\\n            _toDistribute = buffer;\\n        }\\n        uint256 _pendingdivs = _toDistribute.mul(depositedAlTokens[user]).div(\\n            totalSupplyAltokens\\n        );\\n        uint256 _inbucket = tokensInBucket[user].add(dividendsOwing(user));\\n        uint256 _realised = realisedTokens[user];\\n        return (_depositedAl, _pendingdivs, _inbucket, _realised);\\n    }\\n\\n    /// @dev Gets the status of multiple users in one call\\n    ///\\n    /// This function is used to query the contract to check for\\n    /// accounts that have overfilled positions in order to check\\n    /// who can be force transmuted.\\n    ///\\n    /// @param from the first index of the userList\\n    /// @param to the last index of the userList\\n    ///\\n    /// returns the userList with their staking status in paginated form.\\n    function getMultipleUserInfo(uint256 from, uint256 to)\\n        public\\n        view\\n        returns (address[] memory theUserList, uint256[] memory theUserData)\\n    {\\n        uint256 i = from;\\n        uint256 delta = to - from;\\n        address[] memory _theUserList = new address[](delta); //user\\n        uint256[] memory _theUserData = new uint256[](delta * 2); //deposited-bucket\\n        uint256 y = 0;\\n        uint256 _toDistribute = buffer\\n            .mul(block.number.sub(lastDepositBlock))\\n            .div(transmutationPeriod);\\n        if (block.number.sub(lastDepositBlock) > transmutationPeriod) {\\n            _toDistribute = buffer;\\n        }\\n        for (uint256 x = 0; x < delta; x += 1) {\\n            _theUserList[x] = userList[i];\\n            _theUserData[y] = depositedAlTokens[userList[i]];\\n            _theUserData[y + 1] = dividendsOwing(userList[i])\\n                .add(tokensInBucket[userList[i]])\\n                .add(\\n                    _toDistribute.mul(depositedAlTokens[userList[i]]).div(\\n                        totalSupplyAltokens\\n                    )\\n                );\\n            y += 2;\\n            i += 1;\\n        }\\n        return (_theUserList, _theUserData);\\n    }\\n\\n    /// @dev Gets info on the buffer\\n    ///\\n    /// This function is used to query the contract to get the\\n    /// latest state of the buffer\\n    ///\\n    /// @return _toDistribute the amount ready to be distributed\\n    /// @return _deltaBlocks the amount of time since the last phased distribution\\n    /// @return _buffer the amount in the buffer\\n    function bufferInfo()\\n        public\\n        view\\n        returns (\\n            uint256 _toDistribute,\\n            uint256 _deltaBlocks,\\n            uint256 _buffer\\n        )\\n    {\\n        _deltaBlocks = block.number.sub(lastDepositBlock);\\n        _buffer = buffer;\\n        _toDistribute = _buffer.mul(_deltaBlocks).div(transmutationPeriod);\\n    }\\n\\n    /// @dev Sets the pending governance.\\n    ///\\n    /// This function reverts if the new pending governance is the zero address or the caller is not the current\\n    /// governance. This is to prevent the contract governance being set to the zero address which would deadlock\\n    /// privileged contract functionality.\\n    ///\\n    /// @param _pendingGovernance the new pending governance.\\n    function setPendingGovernance(address _pendingGovernance) external onlyGov {\\n        require(_pendingGovernance != ZERO_ADDRESS, \\\"Transmuter: 0 gov\\\");\\n\\n        pendingGovernance = _pendingGovernance;\\n\\n        emit PendingGovernanceUpdated(_pendingGovernance);\\n    }\\n\\n    /// @dev Accepts the role as governance.\\n    ///\\n    /// This function reverts if the caller is not the new pending governance.\\n    function acceptGovernance() external {\\n        require(msg.sender == pendingGovernance, \\\"!pendingGovernance\\\");\\n        address _pendingGovernance = pendingGovernance;\\n        governance = _pendingGovernance;\\n\\n        emit GovernanceUpdated(_pendingGovernance);\\n    }\\n\\n    /// This function reverts if the caller is not governance\\n    ///\\n    /// @param _toWhitelist the account to mint tokens to.\\n    /// @param _state the whitelist state.\\n\\n    function setWhitelist(address _toWhitelist, bool _state) external onlyGov {\\n        whiteList[_toWhitelist] = _state;\\n    }\\n}\\n\",\"keccak256\":\"0xf8134f530e6dc8ba26542cb30a8ce9681f6ccbf80302658934b5fc358332ff20\"},\"contracts/interfaces/IERC20Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.6.8;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IERC20Burnable is IERC20 {\\n  function burn(uint256 amount) external;\\n  function burnFrom(address account, uint256 amount) external;\\n}\",\"keccak256\":\"0x879d12e62b7ebb79025eb7e9b0297320b8f40d610a450974d3b2b723ff9f4974\",\"license\":\"GPL-3.0\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c06040523480156200001157600080fd5b5060405162002832380380620028328339810160408190526200003491620000ab565b6001600160a01b038116620000665760405162461bcd60e51b81526004016200005d90620000fe565b60405180910390fd5b600e80546001600160a01b039092166001600160a01b03199092169190911790556001600160601b0319606092831b8116608052911b1660a052603260005562000142565b600080600060608486031215620000c0578283fd5b8351620000cd8162000129565b6020850151909350620000e08162000129565b6040850151909250620000f38162000129565b809150509250925092565b6020808252601190820152702a3930b739b6baba32b91d10181033b7bb60791b604082015260600190565b6001600160a01b03811681146200013f57600080fd5b50565b60805160601c60a05160601c6126a36200018f60003980610cfa52806115fe52806116375280611b07525080610c5d528061113352806111df52806114b4528061191552506126a36000f3fe608060405234801561001057600080fd5b50600436106102775760003560e01c8063806985f711610160578063bc0bc215116100d8578063edaafe201161008c578063f39c38a011610071578063f39c38a014610490578063f93f394c14610498578063fb932108146104ab57610277565b8063edaafe2014610480578063f1f792001461048857610277565b8063c2412676116100bd578063c241267614610468578063e044205e14610470578063e9fad8ee1461047857610277565b8063bc0bc2151461044d578063bff170b91461045557610277565b80639f4216e81161012f578063a196cf2e11610114578063a196cf2e1461041f578063a694fc3a14610427578063b870d5981461043a57610277565b80639f4216e8146103f9578063a02fbe2d1461040c57610277565b8063806985f7146103c357806381ac45fb146103d65780638391e45c146103de5780639cc848d8146103f157610277565b8063372c12b1116101f357806352710007116101c257806353d6fd59116101a757806353d6fd59146103955780635aa6e675146103a857806379070a12146103b057610277565b8063527100071461036d578063538ba4f91461038057610277565b8063372c12b1146103355780633cb802b9146103555780634bf04bd11461035d5780634e71d92d1461036557610277565b80632113342d1161024a5780632a03cf681161022f5780632a03cf68146103125780632a3d7c811461031a5780632e17de781461032257610277565b80632113342d146102f5578063238efcbc1461030a57610277565b8063030362901461027c57806305d2301d146102a65780630abb6035146102bd5780631959a002146102d2575b600080fd5b61028f61028a36600461209e565b6104be565b60405161029d929190612175565b60405180910390f35b6102ae610719565b60405161029d93929190612602565b6102d06102cb366004611fee565b610753565b005b6102e56102e0366004611fee565b610875565b60405161029d9493929190612618565b6102fd61098e565b60405161029d91906125f9565b6102d0610994565b6102d0610a5b565b6102fd610a6d565b6102d0610330366004612086565b610a73565b610348610343366004611fee565b610c8e565b60405161029d9190612203565b6102fd610ca3565b6102fd610ca9565b6102d0610caf565b6102fd61037b366004611fee565b610d25565b610388610d37565b60405161029d91906120fd565b6102d06103a3366004612009565b610d3c565b610388610de3565b6103486103be366004611fee565b610dff565b6102fd6103d1366004611fee565b610e14565b6102fd610e26565b6102fd6103ec366004611fee565b610e2c565b6102fd610ea9565b610388610407366004612086565b610eb5565b6102d061041a366004612086565b610edd565b6102fd610f63565b6102d0610435366004612086565b610f69565b6102fd610448366004611fee565b6111cb565b6103886111dd565b6102d0610463366004611fee565b611201565b610388611635565b6102d0611659565b6102d0611685565b6102fd61168d565b6102d0611693565b6103886119fc565b6102fd6104a6366004611fee565b611a18565b6102d06104b9366004612040565b611a2a565b60608083808403828167ffffffffffffffff811180156104dd57600080fd5b50604051908082528060200260200182016040528015610507578160200160208202803683370190505b50905060608260020267ffffffffffffffff8111801561052657600080fd5b50604051908082528060200260200182016040528015610550578160200160208202803683370190505b50905060008061058360005461057d610574600a5443611b4790919063ffffffff16565b60095490611b8e565b90611be2565b905060005461059d600a5443611b4790919063ffffffff16565b11156105a857506009545b60005b8581101561070857600087815260066020526040902054855173ffffffffffffffffffffffffffffffffffffffff909116908690839081106105e957fe5b73ffffffffffffffffffffffffffffffffffffffff928316602091820292909201810191909152600089815260068252604080822054909316815260019091522054845185908590811061063957fe5b60209081029190910181019190915260085460008981526006835260408082205473ffffffffffffffffffffffffffffffffffffffff168252600190935291909120546106db9161068f9161057d908690611b8e565b60008981526006602081815260408084205473ffffffffffffffffffffffffffffffffffffffff168085526002835290842054938d90529190526106d591908290610e2c565b90611c2e565b8484600101815181106106ea57fe5b602090810291909101015260019687019660029390930192016105ab565b509299919850909650505050505050565b6000806000610733600a5443611b4790919063ffffffff16565b600954600054919350915061074c9061057d8385611b8e565b9250909192565b600e5473ffffffffffffffffffffffffffffffffffffffff1633146107ad576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107a49061225f565b60405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff81166107fa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107a49061243d565b600f80547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83161790556040517fc9e2377236eab4280090ce8f2317332649736d92f00dcf20a8dd6684ec5e78399061086a9083906120fd565b60405180910390a150565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600160205260408120548154600a5483928392839283916108bb9161057d90610574904390611b47565b90506000546108d5600a5443611b4790919063ffffffff16565b11156108e057506009545b60085473ffffffffffffffffffffffffffffffffffffffff8816600090815260016020526040812054909161091a9161057d908590611b8e565b9050600061095661092a8a610e2c565b73ffffffffffffffffffffffffffffffffffffffff8b1660009081526002602052604090205490611c2e565b73ffffffffffffffffffffffffffffffffffffffff999099166000908152600360205260409020549399919897509295509350505050565b600b5481565b600f5473ffffffffffffffffffffffffffffffffffffffff1633146109e5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107a490612406565b600f54600e80547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff90921691821790556040517f9d3e522e1e47a2f6009739342b9cc7b252a1888154e843ab55ee1c81745795ab9061086a9083906120fd565b610a63611693565b610a6b610caf565b565b600a5481565b600a5460095443906000908015610ae8576000610a908486611b47565b90506000548110610aa357819250610aca565b600054610ab08383611b8e565b1115610aca57600054610ac79061057d8484611b8e565b92505b8215610ae657610ada8284611b47565b600955610ae683611c6d565b505b600a839055336000610af982610e2c565b90508015610b6857600c54610b0e9082611b47565b600c5573ffffffffffffffffffffffffffffffffffffffff8216600090815260026020526040902054610b419082611c2e565b73ffffffffffffffffffffffffffffffffffffffff83166000908152600260205260409020555b600b5473ffffffffffffffffffffffffffffffffffffffff831660009081526004602090815260408083209390935533808352600190915291902054881115610bdd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107a4906124d1565b73ffffffffffffffffffffffffffffffffffffffff8116600090815260016020526040902054610c0d9089611b47565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260016020526040902055600854610c409089611b47565b600855610c8473ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016828a611cd5565b5050505050505050565b600d6020526000908152604090205460ff1681565b600c5481565b60085481565b33600081815260036020526040902054610cc857600080fd5b73ffffffffffffffffffffffffffffffffffffffff8082166000908152600360205260408120805491905590610d21907f0000000000000000000000000000000000000000000000000000000000000000168383611cd5565b5050565b60036020526000908152604090205481565b600081565b600e5473ffffffffffffffffffffffffffffffffffffffff163314610d8d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107a49061225f565b73ffffffffffffffffffffffffffffffffffffffff919091166000908152600d6020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016911515919091179055565b600e5473ffffffffffffffffffffffffffffffffffffffff1681565b60056020526000908152604090205460ff1681565b60046020526000908152604090205481565b60005481565b73ffffffffffffffffffffffffffffffffffffffff8116600090815260046020526040812054600b548291610e619190611b47565b73ffffffffffffffffffffffffffffffffffffffff8416600090815260016020526040902054909150610ea290678ac7230489e800009061057d9084611b8e565b9392505050565b678ac7230489e8000081565b60066020526000908152604090205473ffffffffffffffffffffffffffffffffffffffff1681565b600e5473ffffffffffffffffffffffffffffffffffffffff163314610f2e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107a49061225f565b60008190556040517fc2965d898897107f6f1d0e43c043ca07b7a51d487acfac1decec2ec8405364409061086a9083906125f9565b60075481565b600a5460095443906000908015610fde576000610f868486611b47565b90506000548110610f9957819250610fc0565b600054610fa68383611b8e565b1115610fc057600054610fbd9061057d8484611b8e565b92505b8215610fdc57610fd08284611b47565b600955610fdc83611c6d565b505b600a839055336000610fef82610e2c565b9050801561105e57600c546110049082611b47565b600c5573ffffffffffffffffffffffffffffffffffffffff82166000908152600260205260409020546110379082611c2e565b73ffffffffffffffffffffffffffffffffffffffff83166000908152600260205260409020555b600b5473ffffffffffffffffffffffffffffffffffffffff831660009081526004602090815260408083209390935533825260059052205460ff166111185760078054600090815260066020908152604080832080547fffffffffffffffffffffffff0000000000000000000000000000000000000000163390811790915583526005909152902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600190811790915581540190555b3361115b73ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001682308b611d7b565b6008546111689089611c2e565b60085573ffffffffffffffffffffffffffffffffffffffff811660009081526001602052604090205461119b9089611c2e565b73ffffffffffffffffffffffffffffffffffffffff90911660009081526001602052604090205550505050505050565b60026020526000908152604090205481565b7f000000000000000000000000000000000000000000000000000000000000000081565b600a546009544390600090801561127657600061121e8486611b47565b9050600054811061123157819250611258565b60005461123e8383611b8e565b1115611258576000546112559061057d8484611b8e565b92505b8215611274576112688284611b47565b60095561127483611c6d565b505b600a83905533600061128782610e2c565b905080156112f657600c5461129c9082611b47565b600c5573ffffffffffffffffffffffffffffffffffffffff82166000908152600260205260409020546112cf9082611c2e565b73ffffffffffffffffffffffffffffffffffffffff83166000908152600260205260409020555b600b5473ffffffffffffffffffffffffffffffffffffffff8316600090815260046020526040812091909155879061132d82610e2c565b9050801561139c57600c546113429082611b47565b600c5573ffffffffffffffffffffffffffffffffffffffff82166000908152600260205260409020546113759082611c2e565b73ffffffffffffffffffffffffffffffffffffffff83166000908152600260205260409020555b600b5473ffffffffffffffffffffffffffffffffffffffff808416600090815260046020908152604080832094909455918c168152600282528281205460019092529190912054339190811161141e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107a4906123cf565b73ffffffffffffffffffffffffffffffffffffffff8b166000908152600260209081526040808320839055600190915281205461145c908390611b47565b73ffffffffffffffffffffffffffffffffffffffff808e166000908152600160205260408082208054929055517f42966c680000000000000000000000000000000000000000000000000000000081529094509192507f000000000000000000000000000000000000000000000000000000000000000016906342966c68906114e99085906004016125f9565b600060405180830381600087803b15801561150357600080fd5b505af1158015611517573d6000803e3d6000fd5b50506008546115299250905083611b47565b60085573ffffffffffffffffffffffffffffffffffffffff831660009081526002602052604090205461155c9082611c2e565b73ffffffffffffffffffffffffffffffffffffffff808516600090815260026020908152604080832094909455918f1681526003909152205461159f9083611c2e565b73ffffffffffffffffffffffffffffffffffffffff8d166000908152600360205260409020819055156116275773ffffffffffffffffffffffffffffffffffffffff808d166000908152600360205260408120805491905590611625907f0000000000000000000000000000000000000000000000000000000000000000168e83611cd5565b505b505050505050505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b611661611693565b611669610caf565b3360009081526001602052604090205461168281610a73565b50565b611669611693565b60095481565b600a54600954439060009080156117085760006116b08486611b47565b905060005481106116c3578192506116ea565b6000546116d08383611b8e565b11156116ea576000546116e79061057d8484611b8e565b92505b8215611706576116fa8284611b47565b60095561170683611c6d565b505b600a83905533600061171982610e2c565b9050801561178857600c5461172e9082611b47565b600c5573ffffffffffffffffffffffffffffffffffffffff82166000908152600260205260409020546117619082611c2e565b73ffffffffffffffffffffffffffffffffffffffff83166000908152600260205260409020555b600b5473ffffffffffffffffffffffffffffffffffffffff83166000908152600460209081526040808320939093553380835260029091529181205490816117fc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107a490612304565b73ffffffffffffffffffffffffffffffffffffffff8316600090815260026020908152604080832083905560019091529020548211156118925773ffffffffffffffffffffffffffffffffffffffff8316600090815260016020526040902054611867908390611b47565b73ffffffffffffffffffffffffffffffffffffffff8416600090815260016020526040902054925090505b73ffffffffffffffffffffffffffffffffffffffff83166000908152600160205260409020546118c29083611b47565b73ffffffffffffffffffffffffffffffffffffffff808516600090815260016020526040908190209290925590517f42966c680000000000000000000000000000000000000000000000000000000081527f0000000000000000000000000000000000000000000000000000000000000000909116906342966c689061194c9085906004016125f9565b600060405180830381600087803b15801561196657600080fd5b505af115801561197a573d6000803e3d6000fd5b505060085461198c9250905083611b47565b60085561199881611c6d565b73ffffffffffffffffffffffffffffffffffffffff83166000908152600360205260409020546119c89083611c2e565b73ffffffffffffffffffffffffffffffffffffffff9093166000908152600360205260409020929092555050505050505050565b600f5473ffffffffffffffffffffffffffffffffffffffff1681565b60016020526000908152604090205481565b336000908152600d602052604090205460ff16611a73576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107a49061252e565b600a5460095443906000908015611ae8576000611a908486611b47565b90506000548110611aa357819250611aca565b600054611ab08383611b8e565b1115611aca57600054611ac79061057d8484611b8e565b92505b8215611ae657611ada8284611b47565b600955611ae683611c6d565b505b600a839055611b2f73ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016873088611d7b565b600954611b3c9086611c2e565b600955505050505050565b600082821115611b83576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107a4906122cd565b508082035b92915050565b600082611b9d57506000611b88565b82820282848281611baa57fe5b0414610ea2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107a490612474565b6000808211611c1d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107a490612398565b818381611c2657fe5b049392505050565b600082820183811015610ea2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107a490612296565b6000600854118015611c7f5750600081115b15611cc257600854611caa90611ca19061057d84678ac7230489e80000611b8e565b600b5490611c2e565b600b55600c54611cba9082611c2e565b600c55611682565b600954611ccf9082611c2e565b60095550565b611d768363a9059cbb60e01b8484604051602401611cf492919061214f565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152611da2565b505050565b611d9c846323b872dd60e01b858585604051602401611cf49392919061211e565b50505050565b6060611e04826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16611e589092919063ffffffff16565b805190915015611d765780806020019051810190611e22919061206a565b611d76576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107a49061259c565b6060611e678484600085611e6f565b949350505050565b606082471015611eab576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107a49061233b565b611eb485611f71565b611eea576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107a490612565565b600060608673ffffffffffffffffffffffffffffffffffffffff168587604051611f1491906120e1565b60006040518083038185875af1925050503d8060008114611f51576040519150601f19603f3d011682016040523d82523d6000602084013e611f56565b606091505b5091509150611f66828286611f77565b979650505050505050565b3b151590565b60608315611f86575081610ea2565b825115611f965782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107a4919061220e565b803573ffffffffffffffffffffffffffffffffffffffff81168114611b8857600080fd5b600060208284031215611fff578081fd5b610ea28383611fca565b6000806040838503121561201b578081fd5b6120258484611fca565b915060208301356120358161265f565b809150509250929050565b60008060408385031215612052578182fd5b61205c8484611fca565b946020939093013593505050565b60006020828403121561207b578081fd5b8151610ea28161265f565b600060208284031215612097578081fd5b5035919050565b600080604083850312156120b0578182fd5b50508035926020909101359150565b815260200190565b73ffffffffffffffffffffffffffffffffffffffff169052565b600082516120f3818460208701612633565b9190910192915050565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b73ffffffffffffffffffffffffffffffffffffffff9384168152919092166020820152604081019190915260600190565b73ffffffffffffffffffffffffffffffffffffffff929092168252602082015260400190565b604080825283519082018190526000906020906060840190828701845b828110156121b5576121a58483516120c7565b9284019290840190600101612192565b505050838103828501528085516121cc81846125f9565b91508387019250845b818110156121f6576121e88385516120bf565b9385019392506001016121d5565b5090979650505050505050565b901515815260200190565b600060208252825180602084015261222d816040850160208701612633565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b60208082526017908201527f5472616e736d757465723a2021676f7665726e616e6365000000000000000000604082015260600190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b6020808252601e908201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604082015260600190565b6020808252601e908201527f6e65656420746f20686176652070656e64696e6720696e206275636b65740000604082015260600190565b60208082526026908201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60408201527f722063616c6c0000000000000000000000000000000000000000000000000000606082015260800190565b6020808252601a908201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604082015260600190565b60208082526015908201527f5472616e736d757465723a20216f766572666c6f770000000000000000000000604082015260600190565b60208082526012908201527f2170656e64696e67476f7665726e616e63650000000000000000000000000000604082015260600190565b60208082526011908201527f5472616e736d757465723a203020676f76000000000000000000000000000000604082015260600190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f60408201527f7700000000000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526033908201527f5472616e736d757465723a20756e7374616b6520616d6f756e7420657863656560408201527f6473206465706f736974656420616d6f756e7400000000000000000000000000606082015260800190565b60208082526018908201527f5472616e736d757465723a202177686974656c69737465640000000000000000604082015260600190565b6020808252601d908201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604082015260600190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60408201527f6f74207375636365656400000000000000000000000000000000000000000000606082015260800190565b90815260200190565b9283526020830191909152604082015260600190565b93845260208401929092526040830152606082015260800190565b60005b8381101561264e578181015183820152602001612636565b83811115611d9c5750506000910152565b801515811461168257600080fdfea2646970667358221220b6526950185203cb9f4d9480f89fb575edde33028543211bc26065fb38ddc24d64736f6c634300060c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102775760003560e01c8063806985f711610160578063bc0bc215116100d8578063edaafe201161008c578063f39c38a011610071578063f39c38a014610490578063f93f394c14610498578063fb932108146104ab57610277565b8063edaafe2014610480578063f1f792001461048857610277565b8063c2412676116100bd578063c241267614610468578063e044205e14610470578063e9fad8ee1461047857610277565b8063bc0bc2151461044d578063bff170b91461045557610277565b80639f4216e81161012f578063a196cf2e11610114578063a196cf2e1461041f578063a694fc3a14610427578063b870d5981461043a57610277565b80639f4216e8146103f9578063a02fbe2d1461040c57610277565b8063806985f7146103c357806381ac45fb146103d65780638391e45c146103de5780639cc848d8146103f157610277565b8063372c12b1116101f357806352710007116101c257806353d6fd59116101a757806353d6fd59146103955780635aa6e675146103a857806379070a12146103b057610277565b8063527100071461036d578063538ba4f91461038057610277565b8063372c12b1146103355780633cb802b9146103555780634bf04bd11461035d5780634e71d92d1461036557610277565b80632113342d1161024a5780632a03cf681161022f5780632a03cf68146103125780632a3d7c811461031a5780632e17de781461032257610277565b80632113342d146102f5578063238efcbc1461030a57610277565b8063030362901461027c57806305d2301d146102a65780630abb6035146102bd5780631959a002146102d2575b600080fd5b61028f61028a36600461209e565b6104be565b60405161029d929190612175565b60405180910390f35b6102ae610719565b60405161029d93929190612602565b6102d06102cb366004611fee565b610753565b005b6102e56102e0366004611fee565b610875565b60405161029d9493929190612618565b6102fd61098e565b60405161029d91906125f9565b6102d0610994565b6102d0610a5b565b6102fd610a6d565b6102d0610330366004612086565b610a73565b610348610343366004611fee565b610c8e565b60405161029d9190612203565b6102fd610ca3565b6102fd610ca9565b6102d0610caf565b6102fd61037b366004611fee565b610d25565b610388610d37565b60405161029d91906120fd565b6102d06103a3366004612009565b610d3c565b610388610de3565b6103486103be366004611fee565b610dff565b6102fd6103d1366004611fee565b610e14565b6102fd610e26565b6102fd6103ec366004611fee565b610e2c565b6102fd610ea9565b610388610407366004612086565b610eb5565b6102d061041a366004612086565b610edd565b6102fd610f63565b6102d0610435366004612086565b610f69565b6102fd610448366004611fee565b6111cb565b6103886111dd565b6102d0610463366004611fee565b611201565b610388611635565b6102d0611659565b6102d0611685565b6102fd61168d565b6102d0611693565b6103886119fc565b6102fd6104a6366004611fee565b611a18565b6102d06104b9366004612040565b611a2a565b60608083808403828167ffffffffffffffff811180156104dd57600080fd5b50604051908082528060200260200182016040528015610507578160200160208202803683370190505b50905060608260020267ffffffffffffffff8111801561052657600080fd5b50604051908082528060200260200182016040528015610550578160200160208202803683370190505b50905060008061058360005461057d610574600a5443611b4790919063ffffffff16565b60095490611b8e565b90611be2565b905060005461059d600a5443611b4790919063ffffffff16565b11156105a857506009545b60005b8581101561070857600087815260066020526040902054855173ffffffffffffffffffffffffffffffffffffffff909116908690839081106105e957fe5b73ffffffffffffffffffffffffffffffffffffffff928316602091820292909201810191909152600089815260068252604080822054909316815260019091522054845185908590811061063957fe5b60209081029190910181019190915260085460008981526006835260408082205473ffffffffffffffffffffffffffffffffffffffff168252600190935291909120546106db9161068f9161057d908690611b8e565b60008981526006602081815260408084205473ffffffffffffffffffffffffffffffffffffffff168085526002835290842054938d90529190526106d591908290610e2c565b90611c2e565b8484600101815181106106ea57fe5b602090810291909101015260019687019660029390930192016105ab565b509299919850909650505050505050565b6000806000610733600a5443611b4790919063ffffffff16565b600954600054919350915061074c9061057d8385611b8e565b9250909192565b600e5473ffffffffffffffffffffffffffffffffffffffff1633146107ad576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107a49061225f565b60405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff81166107fa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107a49061243d565b600f80547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83161790556040517fc9e2377236eab4280090ce8f2317332649736d92f00dcf20a8dd6684ec5e78399061086a9083906120fd565b60405180910390a150565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600160205260408120548154600a5483928392839283916108bb9161057d90610574904390611b47565b90506000546108d5600a5443611b4790919063ffffffff16565b11156108e057506009545b60085473ffffffffffffffffffffffffffffffffffffffff8816600090815260016020526040812054909161091a9161057d908590611b8e565b9050600061095661092a8a610e2c565b73ffffffffffffffffffffffffffffffffffffffff8b1660009081526002602052604090205490611c2e565b73ffffffffffffffffffffffffffffffffffffffff999099166000908152600360205260409020549399919897509295509350505050565b600b5481565b600f5473ffffffffffffffffffffffffffffffffffffffff1633146109e5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107a490612406565b600f54600e80547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff90921691821790556040517f9d3e522e1e47a2f6009739342b9cc7b252a1888154e843ab55ee1c81745795ab9061086a9083906120fd565b610a63611693565b610a6b610caf565b565b600a5481565b600a5460095443906000908015610ae8576000610a908486611b47565b90506000548110610aa357819250610aca565b600054610ab08383611b8e565b1115610aca57600054610ac79061057d8484611b8e565b92505b8215610ae657610ada8284611b47565b600955610ae683611c6d565b505b600a839055336000610af982610e2c565b90508015610b6857600c54610b0e9082611b47565b600c5573ffffffffffffffffffffffffffffffffffffffff8216600090815260026020526040902054610b419082611c2e565b73ffffffffffffffffffffffffffffffffffffffff83166000908152600260205260409020555b600b5473ffffffffffffffffffffffffffffffffffffffff831660009081526004602090815260408083209390935533808352600190915291902054881115610bdd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107a4906124d1565b73ffffffffffffffffffffffffffffffffffffffff8116600090815260016020526040902054610c0d9089611b47565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260016020526040902055600854610c409089611b47565b600855610c8473ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016828a611cd5565b5050505050505050565b600d6020526000908152604090205460ff1681565b600c5481565b60085481565b33600081815260036020526040902054610cc857600080fd5b73ffffffffffffffffffffffffffffffffffffffff8082166000908152600360205260408120805491905590610d21907f0000000000000000000000000000000000000000000000000000000000000000168383611cd5565b5050565b60036020526000908152604090205481565b600081565b600e5473ffffffffffffffffffffffffffffffffffffffff163314610d8d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107a49061225f565b73ffffffffffffffffffffffffffffffffffffffff919091166000908152600d6020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016911515919091179055565b600e5473ffffffffffffffffffffffffffffffffffffffff1681565b60056020526000908152604090205460ff1681565b60046020526000908152604090205481565b60005481565b73ffffffffffffffffffffffffffffffffffffffff8116600090815260046020526040812054600b548291610e619190611b47565b73ffffffffffffffffffffffffffffffffffffffff8416600090815260016020526040902054909150610ea290678ac7230489e800009061057d9084611b8e565b9392505050565b678ac7230489e8000081565b60066020526000908152604090205473ffffffffffffffffffffffffffffffffffffffff1681565b600e5473ffffffffffffffffffffffffffffffffffffffff163314610f2e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107a49061225f565b60008190556040517fc2965d898897107f6f1d0e43c043ca07b7a51d487acfac1decec2ec8405364409061086a9083906125f9565b60075481565b600a5460095443906000908015610fde576000610f868486611b47565b90506000548110610f9957819250610fc0565b600054610fa68383611b8e565b1115610fc057600054610fbd9061057d8484611b8e565b92505b8215610fdc57610fd08284611b47565b600955610fdc83611c6d565b505b600a839055336000610fef82610e2c565b9050801561105e57600c546110049082611b47565b600c5573ffffffffffffffffffffffffffffffffffffffff82166000908152600260205260409020546110379082611c2e565b73ffffffffffffffffffffffffffffffffffffffff83166000908152600260205260409020555b600b5473ffffffffffffffffffffffffffffffffffffffff831660009081526004602090815260408083209390935533825260059052205460ff166111185760078054600090815260066020908152604080832080547fffffffffffffffffffffffff0000000000000000000000000000000000000000163390811790915583526005909152902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600190811790915581540190555b3361115b73ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001682308b611d7b565b6008546111689089611c2e565b60085573ffffffffffffffffffffffffffffffffffffffff811660009081526001602052604090205461119b9089611c2e565b73ffffffffffffffffffffffffffffffffffffffff90911660009081526001602052604090205550505050505050565b60026020526000908152604090205481565b7f000000000000000000000000000000000000000000000000000000000000000081565b600a546009544390600090801561127657600061121e8486611b47565b9050600054811061123157819250611258565b60005461123e8383611b8e565b1115611258576000546112559061057d8484611b8e565b92505b8215611274576112688284611b47565b60095561127483611c6d565b505b600a83905533600061128782610e2c565b905080156112f657600c5461129c9082611b47565b600c5573ffffffffffffffffffffffffffffffffffffffff82166000908152600260205260409020546112cf9082611c2e565b73ffffffffffffffffffffffffffffffffffffffff83166000908152600260205260409020555b600b5473ffffffffffffffffffffffffffffffffffffffff8316600090815260046020526040812091909155879061132d82610e2c565b9050801561139c57600c546113429082611b47565b600c5573ffffffffffffffffffffffffffffffffffffffff82166000908152600260205260409020546113759082611c2e565b73ffffffffffffffffffffffffffffffffffffffff83166000908152600260205260409020555b600b5473ffffffffffffffffffffffffffffffffffffffff808416600090815260046020908152604080832094909455918c168152600282528281205460019092529190912054339190811161141e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107a4906123cf565b73ffffffffffffffffffffffffffffffffffffffff8b166000908152600260209081526040808320839055600190915281205461145c908390611b47565b73ffffffffffffffffffffffffffffffffffffffff808e166000908152600160205260408082208054929055517f42966c680000000000000000000000000000000000000000000000000000000081529094509192507f000000000000000000000000000000000000000000000000000000000000000016906342966c68906114e99085906004016125f9565b600060405180830381600087803b15801561150357600080fd5b505af1158015611517573d6000803e3d6000fd5b50506008546115299250905083611b47565b60085573ffffffffffffffffffffffffffffffffffffffff831660009081526002602052604090205461155c9082611c2e565b73ffffffffffffffffffffffffffffffffffffffff808516600090815260026020908152604080832094909455918f1681526003909152205461159f9083611c2e565b73ffffffffffffffffffffffffffffffffffffffff8d166000908152600360205260409020819055156116275773ffffffffffffffffffffffffffffffffffffffff808d166000908152600360205260408120805491905590611625907f0000000000000000000000000000000000000000000000000000000000000000168e83611cd5565b505b505050505050505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b611661611693565b611669610caf565b3360009081526001602052604090205461168281610a73565b50565b611669611693565b60095481565b600a54600954439060009080156117085760006116b08486611b47565b905060005481106116c3578192506116ea565b6000546116d08383611b8e565b11156116ea576000546116e79061057d8484611b8e565b92505b8215611706576116fa8284611b47565b60095561170683611c6d565b505b600a83905533600061171982610e2c565b9050801561178857600c5461172e9082611b47565b600c5573ffffffffffffffffffffffffffffffffffffffff82166000908152600260205260409020546117619082611c2e565b73ffffffffffffffffffffffffffffffffffffffff83166000908152600260205260409020555b600b5473ffffffffffffffffffffffffffffffffffffffff83166000908152600460209081526040808320939093553380835260029091529181205490816117fc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107a490612304565b73ffffffffffffffffffffffffffffffffffffffff8316600090815260026020908152604080832083905560019091529020548211156118925773ffffffffffffffffffffffffffffffffffffffff8316600090815260016020526040902054611867908390611b47565b73ffffffffffffffffffffffffffffffffffffffff8416600090815260016020526040902054925090505b73ffffffffffffffffffffffffffffffffffffffff83166000908152600160205260409020546118c29083611b47565b73ffffffffffffffffffffffffffffffffffffffff808516600090815260016020526040908190209290925590517f42966c680000000000000000000000000000000000000000000000000000000081527f0000000000000000000000000000000000000000000000000000000000000000909116906342966c689061194c9085906004016125f9565b600060405180830381600087803b15801561196657600080fd5b505af115801561197a573d6000803e3d6000fd5b505060085461198c9250905083611b47565b60085561199881611c6d565b73ffffffffffffffffffffffffffffffffffffffff83166000908152600360205260409020546119c89083611c2e565b73ffffffffffffffffffffffffffffffffffffffff9093166000908152600360205260409020929092555050505050505050565b600f5473ffffffffffffffffffffffffffffffffffffffff1681565b60016020526000908152604090205481565b336000908152600d602052604090205460ff16611a73576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107a49061252e565b600a5460095443906000908015611ae8576000611a908486611b47565b90506000548110611aa357819250611aca565b600054611ab08383611b8e565b1115611aca57600054611ac79061057d8484611b8e565b92505b8215611ae657611ada8284611b47565b600955611ae683611c6d565b505b600a839055611b2f73ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016873088611d7b565b600954611b3c9086611c2e565b600955505050505050565b600082821115611b83576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107a4906122cd565b508082035b92915050565b600082611b9d57506000611b88565b82820282848281611baa57fe5b0414610ea2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107a490612474565b6000808211611c1d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107a490612398565b818381611c2657fe5b049392505050565b600082820183811015610ea2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107a490612296565b6000600854118015611c7f5750600081115b15611cc257600854611caa90611ca19061057d84678ac7230489e80000611b8e565b600b5490611c2e565b600b55600c54611cba9082611c2e565b600c55611682565b600954611ccf9082611c2e565b60095550565b611d768363a9059cbb60e01b8484604051602401611cf492919061214f565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152611da2565b505050565b611d9c846323b872dd60e01b858585604051602401611cf49392919061211e565b50505050565b6060611e04826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16611e589092919063ffffffff16565b805190915015611d765780806020019051810190611e22919061206a565b611d76576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107a49061259c565b6060611e678484600085611e6f565b949350505050565b606082471015611eab576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107a49061233b565b611eb485611f71565b611eea576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107a490612565565b600060608673ffffffffffffffffffffffffffffffffffffffff168587604051611f1491906120e1565b60006040518083038185875af1925050503d8060008114611f51576040519150601f19603f3d011682016040523d82523d6000602084013e611f56565b606091505b5091509150611f66828286611f77565b979650505050505050565b3b151590565b60608315611f86575081610ea2565b825115611f965782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107a4919061220e565b803573ffffffffffffffffffffffffffffffffffffffff81168114611b8857600080fd5b600060208284031215611fff578081fd5b610ea28383611fca565b6000806040838503121561201b578081fd5b6120258484611fca565b915060208301356120358161265f565b809150509250929050565b60008060408385031215612052578182fd5b61205c8484611fca565b946020939093013593505050565b60006020828403121561207b578081fd5b8151610ea28161265f565b600060208284031215612097578081fd5b5035919050565b600080604083850312156120b0578182fd5b50508035926020909101359150565b815260200190565b73ffffffffffffffffffffffffffffffffffffffff169052565b600082516120f3818460208701612633565b9190910192915050565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b73ffffffffffffffffffffffffffffffffffffffff9384168152919092166020820152604081019190915260600190565b73ffffffffffffffffffffffffffffffffffffffff929092168252602082015260400190565b604080825283519082018190526000906020906060840190828701845b828110156121b5576121a58483516120c7565b9284019290840190600101612192565b505050838103828501528085516121cc81846125f9565b91508387019250845b818110156121f6576121e88385516120bf565b9385019392506001016121d5565b5090979650505050505050565b901515815260200190565b600060208252825180602084015261222d816040850160208701612633565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b60208082526017908201527f5472616e736d757465723a2021676f7665726e616e6365000000000000000000604082015260600190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b6020808252601e908201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604082015260600190565b6020808252601e908201527f6e65656420746f20686176652070656e64696e6720696e206275636b65740000604082015260600190565b60208082526026908201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60408201527f722063616c6c0000000000000000000000000000000000000000000000000000606082015260800190565b6020808252601a908201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604082015260600190565b60208082526015908201527f5472616e736d757465723a20216f766572666c6f770000000000000000000000604082015260600190565b60208082526012908201527f2170656e64696e67476f7665726e616e63650000000000000000000000000000604082015260600190565b60208082526011908201527f5472616e736d757465723a203020676f76000000000000000000000000000000604082015260600190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f60408201527f7700000000000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526033908201527f5472616e736d757465723a20756e7374616b6520616d6f756e7420657863656560408201527f6473206465706f736974656420616d6f756e7400000000000000000000000000606082015260800190565b60208082526018908201527f5472616e736d757465723a202177686974656c69737465640000000000000000604082015260600190565b6020808252601d908201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604082015260600190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60408201527f6f74207375636365656400000000000000000000000000000000000000000000606082015260800190565b90815260200190565b9283526020830191909152604082015260600190565b93845260208401929092526040830152606082015260800190565b60005b8381101561264e578181015183820152602001612636565b83811115611d9c5750506000910152565b801515811461168257600080fdfea2646970667358221220b6526950185203cb9f4d9480f89fb575edde33028543211bc26065fb38ddc24d64736f6c634300060c0033",
  "devdoc": {
    "details": "Implementation of the {IERC20Burnable} interface. This implementation is agnostic to the way tokens are created. This means that a supply mechanism has to be added in a derived contract using {_mint}. For a generic mechanism see {ERC20PresetMinterPauser}. TIP: For a detailed writeup see our guide https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How to implement supply mechanisms]. We have followed general OpenZeppelin guidelines: functions revert instead of returning `false` on failure. This behavior is nonetheless conventional and does not conflict with the expectations of ERC20 applications. Additionally, an {Approval} event is emitted on calls to {transferFrom}. This allows applications to reconstruct the allowance for all accounts just by listening to said events. Other implementations of the EIP may not emit these events, as it isn't required by the specification. Finally, the non-standard {decreaseAllowance} and {increaseAllowance} functions have been added to mitigate the well-known issues around setting allowances. See {IERC20Burnable-approve}.",
    "kind": "dev",
    "methods": {
      "acceptGovernance()": {
        "details": "Accepts the role as governance. This function reverts if the caller is not the new pending governance."
      },
      "bufferInfo()": {
        "details": "Gets info on the buffer This function is used to query the contract to get the latest state of the buffer",
        "returns": {
          "_buffer": "the amount in the buffer",
          "_deltaBlocks": "the amount of time since the last phased distribution",
          "_toDistribute": "the amount ready to be distributed"
        }
      },
      "claim()": {
        "details": "claims the base token after it has been transmuted This function reverts if there is no realisedToken balance"
      },
      "distribute(address,uint256)": {
        "details": "Distributes the base token proportionally to all alToken stakers. This function is meant to be called by the Alchemist contract for when it is sending yield to the transmuter. Anyone can call this and add funds, idk why they would do that though...",
        "params": {
          "amount": "the amount of base tokens to be distributed to the transmuter.",
          "origin": "the account that is sending the tokens to be distributed."
        }
      },
      "dividendsOwing(address)": {
        "returns": {
          "_0": "displays the user's share of the pooled alTokens."
        }
      },
      "exit()": {
        "details": "Transmutes and unstakes all alTokens This function combines the transmute and unstake functions for ease of use"
      },
      "forceTransmute(address)": {
        "details": "Executes transmute() on another account that has had more base tokens allocated to it than alTokens staked. The caller of this function will have the surlus base tokens credited to their tokensInBucket balance, rewarding them for performing this action This function reverts if the address to transmute is not over-filled.",
        "params": {
          "toTransmute": "address of the account you will force transmute."
        }
      },
      "getMultipleUserInfo(uint256,uint256)": {
        "details": "Gets the status of multiple users in one call This function is used to query the contract to check for accounts that have overfilled positions in order to check who can be force transmuted.",
        "params": {
          "from": "the first index of the userList",
          "to": "the last index of the userList returns the userList with their staking status in paginated form."
        }
      },
      "setPendingGovernance(address)": {
        "details": "Sets the pending governance. This function reverts if the new pending governance is the zero address or the caller is not the current governance. This is to prevent the contract governance being set to the zero address which would deadlock privileged contract functionality.",
        "params": {
          "_pendingGovernance": "the new pending governance."
        }
      },
      "setTransmutationPeriod(uint256)": {
        "details": "set the transmutationPeriod variable sets the length (in blocks) of one full distribution phase"
      },
      "setWhitelist(address,bool)": {
        "params": {
          "_state": "the whitelist state.",
          "_toWhitelist": "the account to mint tokens to."
        }
      },
      "stake(uint256)": {
        "details": "Deposits alTokens into the transmuter",
        "params": {
          "amount": "the amount of alTokens to stake"
        }
      },
      "transmute()": {
        "details": "Converts the staked alTokens to the base tokens in amount of the sum of pendingdivs and tokensInBucket once the alToken has been converted, it is burned, and the base token becomes realisedTokens which can be recieved using claim() reverts if there are no pendingdivs or tokensInBucket"
      },
      "transmuteAndClaim()": {
        "details": "Transmutes and claims all converted base tokens. This function combines the transmute and claim functions while leaving your remaining alTokens staked."
      },
      "transmuteClaimAndWithdraw()": {
        "details": "Transmutes, claims base tokens, and withdraws alTokens. This function helps users to exit the transmuter contract completely after converting their alTokens to the base pair."
      },
      "unstake(uint256)": {
        "details": "Withdraws staked alTokens from the transmuter This function reverts if you try to draw more tokens than you deposited",
        "params": {
          "amount": "the amount of alTokens to unstake"
        }
      },
      "userInfo(address)": {
        "details": "Gets the status of a user's staking position. The total amount allocated to a user is the sum of pendingdivs and inbucket.",
        "params": {
          "user": "the address of the user you wish to query. returns user status"
        }
      }
    },
    "stateVariables": {
      "POINT_MULTIPLIER": {
        "details": "values needed to calculate the distribution of base asset in proportion for alTokens staked"
      },
      "governance": {
        "details": "The address of the account which currently has administrative capabilities over this contract."
      },
      "pendingGovernance": {
        "details": "The address of the pending governance."
      },
      "whiteList": {
        "details": "alchemist addresses whitelisted"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "setWhitelist(address,bool)": {
        "notice": "This function reverts if the caller is not governance"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4483,
        "contract": "contracts/Transmuter.sol:Transmuter",
        "label": "transmutationPeriod",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 4491,
        "contract": "contracts/Transmuter.sol:Transmuter",
        "label": "depositedAlTokens",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 4495,
        "contract": "contracts/Transmuter.sol:Transmuter",
        "label": "tokensInBucket",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 4499,
        "contract": "contracts/Transmuter.sol:Transmuter",
        "label": "realisedTokens",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 4503,
        "contract": "contracts/Transmuter.sol:Transmuter",
        "label": "lastDividendPoints",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 4507,
        "contract": "contracts/Transmuter.sol:Transmuter",
        "label": "userIsKnown",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 4511,
        "contract": "contracts/Transmuter.sol:Transmuter",
        "label": "userList",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 4513,
        "contract": "contracts/Transmuter.sol:Transmuter",
        "label": "nextUser",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 4515,
        "contract": "contracts/Transmuter.sol:Transmuter",
        "label": "totalSupplyAltokens",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 4517,
        "contract": "contracts/Transmuter.sol:Transmuter",
        "label": "buffer",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 4519,
        "contract": "contracts/Transmuter.sol:Transmuter",
        "label": "lastDepositBlock",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 4521,
        "contract": "contracts/Transmuter.sol:Transmuter",
        "label": "totalDividendPoints",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 4523,
        "contract": "contracts/Transmuter.sol:Transmuter",
        "label": "unclaimedDividends",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 4528,
        "contract": "contracts/Transmuter.sol:Transmuter",
        "label": "whiteList",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 4531,
        "contract": "contracts/Transmuter.sol:Transmuter",
        "label": "governance",
        "offset": 0,
        "slot": "14",
        "type": "t_address"
      },
      {
        "astId": 4534,
        "contract": "contracts/Transmuter.sol:Transmuter",
        "label": "pendingGovernance",
        "offset": 0,
        "slot": "15",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}