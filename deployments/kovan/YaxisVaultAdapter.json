{
  "address": "0xf183b1aD5E679440a3CF8239eADA2ab6c1516529",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IVault",
          "name": "_vault",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_rewards",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "admin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gauge",
      "outputs": [
        {
          "internalType": "contract IGauge",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lpToken",
      "outputs": [
        {
          "internalType": "contract IDetailedERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewards",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "contract IDetailedERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vault",
      "outputs": [
        {
          "internalType": "contract IVault",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x6e83032af9f02b8f8474101bfed0abc0bc998fadd0b0163b53cda03c3718177a",
  "receipt": {
    "to": null,
    "from": "0x69Dc1267198e2D21B56Ef0f1C6BcC57d96A7ED4B",
    "contractAddress": "0xf183b1aD5E679440a3CF8239eADA2ab6c1516529",
    "transactionIndex": 1,
    "gasUsed": "1330157",
    "logsBloom": "0x
    "blockHash": "0x7147dd097ff6c814bc13cd5ca186145e15d4e529e78031cb8f0800c5c5a250e3",
    "transactionHash": "0x6e83032af9f02b8f8474101bfed0abc0bc998fadd0b0163b53cda03c3718177a",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 33409131,
        "transactionHash": "0x6e83032af9f02b8f8474101bfed0abc0bc998fadd0b0163b53cda03c3718177a",
        "address": "0xA24A13f1DeD8e8DDd30472Fc8Ebb3b6Fee5987b9",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000f183b1ad5e679440a3cf8239eada2ab6c1516529",
          "0x000000000000000000000000b369d1e673c195c7d8a1c92597095bef6bf6982f"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 11,
        "blockHash": "0x7147dd097ff6c814bc13cd5ca186145e15d4e529e78031cb8f0800c5c5a250e3"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 33409131,
        "transactionHash": "0x6e83032af9f02b8f8474101bfed0abc0bc998fadd0b0163b53cda03c3718177a",
        "address": "0xb369D1E673C195C7D8A1C92597095BEF6bF6982f",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000f183b1ad5e679440a3cf8239eada2ab6c1516529",
          "0x000000000000000000000000c0ce2639d98b221b9516ef57337e78bf7e66135c"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 12,
        "blockHash": "0x7147dd097ff6c814bc13cd5ca186145e15d4e529e78031cb8f0800c5c5a250e3"
      }
    ],
    "blockNumber": 33409131,
    "cumulativeGasUsed": "1883367",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xb369D1E673C195C7D8A1C92597095BEF6bF6982f",
    "0x101Df32d4ec12069B7487940E1E1696d8918b8CE",
    "0xF50760423F04A49244Ba0D1974a0F139deC78E76"
  ],
  "solcInputHash": "ad5962d48d3484563b6cbe9716683aff",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IVault\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewards\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gauge\",\"outputs\":[{\"internalType\":\"contract IGauge\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpToken\",\"outputs\":[{\"internalType\":\"contract IDetailedERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IDetailedERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"contract IVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"A vault adapter implementation which wraps a yAxis vault.\",\"kind\":\"dev\",\"methods\":{\"claimReward()\":{\"details\":\"Claim gauge rewards.\"},\"deposit(uint256)\":{\"details\":\"Deposits tokens into the vault.\",\"params\":{\"_amount\":\"the amount of tokens to deposit into the vault.\"}},\"totalValue()\":{\"details\":\"Gets the total value of the assets that the adapter holds in the vault.\",\"returns\":{\"_0\":\"the total assets.\"}},\"withdraw(address,uint256)\":{\"details\":\"Withdraws tokens from the vault to the recipient. This function reverts if the caller is not the admin.\",\"params\":{\"_amount\":\"the amount of tokens to withdraw.\",\"_recipient\":\"the account to withdraw the tokes to.\"}}},\"stateVariables\":{\"admin\":{\"details\":\"The address which has admin control over this contract.\"},\"gauge\":{\"details\":\"The gauge of the vault that the adapter is wrapping.\"},\"lpToken\":{\"details\":\"The token that the vault issued\"},\"rewards\":{\"details\":\"The address which will receive rewards.\"},\"token\":{\"details\":\"The token that the vault accepts\"},\"vault\":{\"details\":\"The vault that the adapter is wrapping.\"}},\"title\":\"YaxisVaultAdapter\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/adapters/YaxisVaultAdapter.sol\":\"YaxisVaultAdapter\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"contracts/adapters/YaxisVaultAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport {SafeMath} from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\nimport {IDetailedERC20} from \\\"../interfaces/IDetailedERC20.sol\\\";\\nimport {IVaultAdapter} from \\\"../interfaces/IVaultAdapter.sol\\\";\\nimport {IVault} from \\\"../interfaces/IVault.sol\\\";\\nimport {IGauge} from \\\"../interfaces/IGauge.sol\\\";\\nimport {IRewards} from \\\"../interfaces/IRewards.sol\\\";\\n\\n/// @title YaxisVaultAdapter\\n///\\n/// @dev A vault adapter implementation which wraps a yAxis vault.\\ncontract YaxisVaultAdapter is IVaultAdapter {\\n    using SafeERC20 for IDetailedERC20;\\n    using SafeMath for uint256;\\n\\n    /// @dev The vault that the adapter is wrapping.\\n    IVault public immutable vault;\\n\\n    /// @dev The gauge of the vault that the adapter is wrapping.\\n    IGauge public immutable gauge;\\n\\n    /// @dev The address which has admin control over this contract.\\n    address public immutable admin;\\n\\n    /// @dev The address which will receive rewards.\\n    address public immutable rewards;\\n\\n    /// @dev The token that the vault accepts\\n    IDetailedERC20 public immutable override token;\\n\\n    /// @dev The token that the vault issued\\n    IDetailedERC20 public immutable lpToken;\\n\\n    constructor(\\n        IVault _vault,\\n        address _admin,\\n        address _rewards\\n    ) public {\\n        require(\\n            _admin != address(0),\\n            \\\"YaxisVaultAdapter: admin address cannot be 0x0.\\\"\\n        );\\n        require(\\n            _rewards != address(0),\\n            \\\"YaxisVaultAdapter: rewards address cannot be 0x0.\\\"\\n        );\\n\\n        vault = _vault;\\n        admin = _admin;\\n        rewards = _rewards;\\n\\n        address _gauge = _vault.gauge();\\n        IDetailedERC20 _token = IDetailedERC20(_vault.getToken());\\n        IDetailedERC20 _lpToken = IDetailedERC20(_vault.getLPToken());\\n        gauge = IGauge(_gauge);\\n        token = _token;\\n        lpToken = _lpToken;\\n\\n        _token.safeApprove(address(_vault), uint256(-1));\\n        _lpToken.safeApprove(address(_gauge), uint256(-1));\\n    }\\n\\n    /// @dev Gets the total value of the assets that the adapter holds in the vault.\\n    ///\\n    /// @return the total assets.\\n    function totalValue() external view override returns (uint256) {\\n        return _sharesToTokens(gauge.balanceOf(address(this)));\\n    }\\n\\n    /// @dev Deposits tokens into the vault.\\n    ///\\n    /// @param _amount the amount of tokens to deposit into the vault.\\n    function deposit(uint256 _amount) external override {\\n        vault.deposit(_amount);\\n        gauge.deposit(lpToken.balanceOf(address(this)));\\n    }\\n\\n    /// @dev Withdraws tokens from the vault to the recipient.\\n    ///\\n    /// This function reverts if the caller is not the admin.\\n    ///\\n    /// @param _recipient the account to withdraw the tokes to.\\n    /// @param _amount    the amount of tokens to withdraw.\\n    function withdraw(address _recipient, uint256 _amount) external override {\\n        require(admin == msg.sender, \\\"YaxisVaultAdapter: only admin\\\");\\n\\n        IDetailedERC20 _token = token;\\n        uint256 beforeBalance = _token.balanceOf(address(this));\\n        uint256 share = _tokensToShares(_amount);\\n\\n        gauge.withdraw(share);\\n        vault.withdraw(share);\\n\\n        _token.safeTransfer(\\n            _recipient,\\n            _token.balanceOf(address(this)) - beforeBalance\\n        );\\n    }\\n\\n    /// @dev Claim gauge rewards.\\n    ///\\n    function claimReward() external {\\n        gauge.claim_rewards();\\n        IDetailedERC20 rewardToken = IDetailedERC20(gauge.reward_tokens(0));\\n        uint256 rewardBalance = rewardToken.balanceOf(address(this));\\n        if (rewardBalance > 0) {\\n            rewardToken.transfer(rewards, rewardBalance);\\n            IRewards(rewards).notifyRewardAmount(rewardBalance);\\n        }\\n    }\\n\\n    /// @dev Computes the number of tokens an amount of shares is worth.\\n    ///\\n    /// @param _sharesAmount the amount of shares.\\n    ///\\n    /// @return the number of tokens the shares are worth.\\n\\n    function _sharesToTokens(uint256 _sharesAmount)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return _sharesAmount.mul(vault.getPricePerFullShare()).div(1e18);\\n    }\\n\\n    /// @dev Computes the number of shares an amount of tokens is worth.\\n    ///\\n    /// @param _tokensAmount the amount of shares.\\n    ///\\n    /// @return the number of shares the tokens are worth.\\n    function _tokensToShares(uint256 _tokensAmount)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return _tokensAmount.mul(1e18).div(vault.getPricePerFullShare());\\n    }\\n}\\n\",\"keccak256\":\"0xe0bedcf8c53b67f88f23fa54e3f6d6ccad30d86a9f644414a80787b5a9d7a680\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IDetailedERC20.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IDetailedERC20 is IERC20 {\\n  function name() external returns (string memory);\\n  function symbol() external returns (string memory);\\n  function decimals() external returns (uint8);\\n}\",\"keccak256\":\"0xd7da49ed3fd58d47d3d9d4c37d96841d117916cb3975648ec82d09a30dc5e63d\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IGauge.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IGauge {\\n    function deposit(uint256) external;\\n\\n    function balanceOf(address) external view returns (uint256);\\n\\n    function withdraw(uint256) external;\\n\\n    function claim_rewards() external;\\n\\n    function reward_tokens(uint256) external view returns (address);\\n}\\n\",\"keccak256\":\"0x3b6415800530c2f5f85deed22eeff8b01f08d72da32bdb3863c0d7f65e9a65c7\",\"license\":\"MIT\"},\"contracts/interfaces/IRewards.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IRewards {\\n    function notifyRewardAmount(uint256 reward) external;\\n}\\n\",\"keccak256\":\"0xb5617725336c38ba73c2c22c5dc7abf1a45bd575c29d4d87b008ff3bc2e401bd\",\"license\":\"MIT\"},\"contracts/interfaces/IVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IVault {\\n    function available() external view returns (uint256);\\n\\n    function balance() external view returns (uint256);\\n\\n    function deposit(uint256 _amount) external returns (uint256);\\n\\n    function earn(address _strategy) external;\\n\\n    function gauge() external returns (address);\\n\\n    function getLPToken() external view returns (address);\\n\\n    function getPricePerFullShare() external view returns (uint256);\\n\\n    function getToken() external view returns (address);\\n\\n    function withdraw(uint256 _amount) external;\\n\\n    function withdrawAll() external;\\n\\n    function withdrawFee(uint256 _amount) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x154cbaae0c3b85a86f2e246a21f07ab6e76b079366e6ab38ab717f38748caa6a\",\"license\":\"MIT\"},\"contracts/interfaces/IVaultAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"./IDetailedERC20.sol\\\";\\n\\n/// Interface for all Vault Adapter implementations.\\ninterface IVaultAdapter {\\n\\n  /// @dev Gets the token that the adapter accepts.\\n  function token() external view returns (IDetailedERC20);\\n\\n  /// @dev The total value of the assets deposited into the vault.\\n  function totalValue() external view returns (uint256);\\n\\n  /// @dev Deposits funds into the vault.\\n  ///\\n  /// @param _amount  the amount of funds to deposit.\\n  function deposit(uint256 _amount) external;\\n\\n  /// @dev Attempts to withdraw funds from the wrapped vault.\\n  ///\\n  /// The amount withdrawn to the recipient may be less than the amount requested.\\n  ///\\n  /// @param _recipient the recipient of the funds.\\n  /// @param _amount    the amount of funds to withdraw.\\n  function withdraw(address _recipient, uint256 _amount) external;\\n}\",\"keccak256\":\"0x2068367acc37e93a71f8c91343abdf2714895df202fff414d11c3f258af55f52\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x6101406040523480156200001257600080fd5b5060405162001ed338038062001ed38339810160408190526200003591620005be565b6001600160a01b038216620000675760405162461bcd60e51b81526004016200005e9062000747565b60405180910390fd5b6001600160a01b038116620000905760405162461bcd60e51b81526004016200005e90620006b0565b6001600160601b0319606084811b821660805283811b821660c05282901b1660e052604080516329bc672160e21b815290516000916001600160a01b0386169163a6f19c849160048082019260209290919082900301818787803b158015620000f857600080fd5b505af11580156200010d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200013391906200057d565b90506000846001600160a01b03166321df0da76040518163ffffffff1660e01b815260040160206040518083038186803b1580156200017157600080fd5b505afa15801562000186573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001ac91906200057d565b90506000856001600160a01b0316633c1aa9256040518163ffffffff1660e01b815260040160206040518083038186803b158015620001ea57600080fd5b505afa158015620001ff573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200022591906200057d565b606084811b6001600160601b031990811660a05284821b8116610100529082901b16610120529050620002716001600160a01b03831687600019620002a4602090811b62000b6817901c565b6200029883600019836001600160a01b0316620002a460201b62000b68179092919060201c565b505050505050620008c0565b801580620003335750604051636eb1769f60e11b81526001600160a01b0384169063dd62ed3e90620002dd903090869060040162000648565b60206040518083038186803b158015620002f657600080fd5b505afa1580156200030b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000331919062000611565b155b620003525760405162461bcd60e51b81526004016200005e9062000817565b620003ad8363095ea7b360e01b84846040516024016200037492919062000662565b60408051808303601f190181529190526020810180516001600160e01b0319939093166001600160e01b0393841617905290620003b216565b505050565b60606200040e826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166200044e60201b62000cf2179092919060201c565b805190915015620003ad57808060200190518101906200042f91906200059c565b620003ad5760405162461bcd60e51b81526004016200005e90620007cd565b60606200045f848460008562000469565b90505b9392505050565b6060824710156200048e5760405162461bcd60e51b81526004016200005e9062000701565b620004998562000539565b620004b85760405162461bcd60e51b81526004016200005e9062000796565b60006060866001600160a01b03168587604051620004d791906200062a565b60006040518083038185875af1925050503d806000811462000516576040519150601f19603f3d011682016040523d82523d6000602084013e6200051b565b606091505b5090925090506200052e8282866200053f565b979650505050505050565b3b151590565b606083156200055057508162000462565b825115620005615782518084602001fd5b8160405162461bcd60e51b81526004016200005e91906200067b565b6000602082840312156200058f578081fd5b81516200046281620008a7565b600060208284031215620005ae578081fd5b8151801515811462000462578182fd5b600080600060608486031215620005d3578182fd5b8351620005e081620008a7565b6020850151909350620005f381620008a7565b60408501519092506200060681620008a7565b809150509250925092565b60006020828403121562000623578081fd5b5051919050565b600082516200063e81846020870162000874565b9190910192915050565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b03929092168252602082015260400190565b60006020825282518060208401526200069c81604085016020870162000874565b601f01601f19169190910160400192915050565b60208082526031908201527f59617869735661756c74416461707465723a207265776172647320616464726560408201527039b99031b0b73737ba10313290183c181760791b606082015260800190565b60208082526026908201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6040820152651c8818d85b1b60d21b606082015260800190565b6020808252602f908201527f59617869735661756c74416461707465723a2061646d696e206164647265737360408201526e1031b0b73737ba10313290183c181760891b606082015260800190565b6020808252601d908201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604082015260600190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6040820152691bdd081cdd58d8d9595960b21b606082015260800190565b60208082526036908201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60408201527f20746f206e6f6e2d7a65726f20616c6c6f77616e636500000000000000000000606082015260800190565b60005b838110156200089157818101518382015260200162000877565b83811115620008a1576000848401525b50505050565b6001600160a01b0381168114620008bd57600080fd5b50565b60805160601c60a05160601c60c05160601c60e05160601c6101005160601c6101205160601c611571620009626000398061015052806102bd5250806108575280610b4652508061017452806105d952806106935250806107b95280610afe525080610198528061028152806103b75280610474528061070652806109435250806101f752806109e55280610b225280610d1e5280610dd452506115716000f3fe608060405234801561001057600080fd5b50600436106100be5760003560e01c8063d4c3eea011610076578063f851a4401161005b578063f851a44014610136578063fbfa77cf1461013e578063fc0c546a14610146576100be565b8063d4c3eea01461010e578063f3fef3a314610123576100be565b8063a6f19c84116100a7578063a6f19c84146100e9578063b6b55f25146100f1578063b88a802f14610106576100be565b80635fcbd285146100c35780639ec5a894146100e1575b600080fd5b6100cb61014e565b6040516100d89190611205565b60405180910390f35b6100cb610172565b6100cb610196565b6101046100ff3660046111b9565b6101ba565b005b6101046103b5565b6101166106ff565b6040516100d89190611273565b61010461013136600461116e565b6107b7565b6100cb610afc565b6100cb610b20565b6100cb610b44565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b6040517fb6b55f2500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169063b6b55f259061022c908490600401611273565b602060405180830381600087803b15801561024657600080fd5b505af115801561025a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061027e91906111d1565b507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663b6b55f257f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016103149190611205565b60206040518083038186803b15801561032c57600080fd5b505afa158015610340573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061036491906111d1565b6040518263ffffffff1660e01b81526004016103809190611273565b600060405180830381600087803b15801561039a57600080fd5b505af11580156103ae573d6000803e3d6000fd5b5050505050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663e6f1daf26040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561041d57600080fd5b505af1158015610431573d6000803e3d6000fd5b50506040517f54c49fe90000000000000000000000000000000000000000000000000000000081526000925073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001691506354c49fe9906104aa908490600401611273565b60206040518083038186803b1580156104c257600080fd5b505afa1580156104d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104fa9190611152565b905060008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016105379190611205565b60206040518083038186803b15801561054f57600080fd5b505afa158015610563573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061058791906111d1565b905080156106fb576040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff83169063a9059cbb90610603907f000000000000000000000000000000000000000000000000000000000000000090859060040161124d565b602060405180830381600087803b15801561061d57600080fd5b505af1158015610631573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106559190611199565b506040517f3c6b16ab00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690633c6b16ab906106c8908490600401611273565b600060405180830381600087803b1580156106e257600080fd5b505af11580156106f6573d6000803e3d6000fd5b505050505b5050565b60006107b27f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161075d9190611205565b60206040518083038186803b15801561077557600080fd5b505afa158015610789573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107ad91906111d1565b610d0b565b905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16331461082f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610826906112cd565b60405180910390fd5b6040517f70a082310000000000000000000000000000000000000000000000000000000081527f00000000000000000000000000000000000000000000000000000000000000009060009073ffffffffffffffffffffffffffffffffffffffff8316906370a08231906108a6903090600401611205565b60206040518083038186803b1580156108be57600080fd5b505afa1580156108d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108f691906111d1565b9050600061090384610dcd565b6040517f2e1a7d4d00000000000000000000000000000000000000000000000000000000815290915073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690632e1a7d4d90610978908490600401611273565b600060405180830381600087803b15801561099257600080fd5b505af11580156109a6573d6000803e3d6000fd5b50506040517f2e1a7d4d00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169250632e1a7d4d9150610a1c908490600401611273565b600060405180830381600087803b158015610a3657600080fd5b505af1158015610a4a573d6000803e3d6000fd5b505050506103ae85838573ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610a8c9190611205565b60206040518083038186803b158015610aa457600080fd5b505afa158015610ab8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610adc91906111d1565b73ffffffffffffffffffffffffffffffffffffffff871692919003610e82565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b801580610c1657506040517fdd62ed3e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84169063dd62ed3e90610bc49030908690600401611226565b60206040518083038186803b158015610bdc57600080fd5b505afa158015610bf0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c1491906111d1565b155b610c4c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161082690611489565b610ced8363095ea7b360e01b8484604051602401610c6b92919061124d565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152610ea1565b505050565b6060610d018484600085610f57565b90505b9392505050565b6000610dc7670de0b6b3a7640000610dc17f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166377c7b8fc6040518163ffffffff1660e01b815260040160206040518083038186803b158015610d8257600080fd5b505afa158015610d96573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dba91906111d1565b8590611059565b906110ad565b92915050565b6000610dc77f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166377c7b8fc6040518163ffffffff1660e01b815260040160206040518083038186803b158015610e3857600080fd5b505afa158015610e4c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e7091906111d1565b610dc184670de0b6b3a7640000611059565b610ced8363a9059cbb60e01b8484604051602401610c6b92919061124d565b6060610f03826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16610cf29092919063ffffffff16565b805190915015610ced5780806020019051810190610f219190611199565b610ced576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108269061142c565b606082471015610f93576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161082690611304565b610f9c856110f9565b610fd2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610826906113f5565b600060608673ffffffffffffffffffffffffffffffffffffffff168587604051610ffc91906111e9565b60006040518083038185875af1925050503d8060008114611039576040519150601f19603f3d011682016040523d82523d6000602084013e61103e565b606091505b509150915061104e8282866110ff565b979650505050505050565b60008261106857506000610dc7565b8282028284828161107557fe5b0414610d04576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161082690611398565b60008082116110e8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161082690611361565b8183816110f157fe5b049392505050565b3b151590565b6060831561110e575081610d04565b82511561111e5782518084602001fd5b816040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610826919061127c565b600060208284031215611163578081fd5b8151610d0481611516565b60008060408385031215611180578081fd5b823561118b81611516565b946020939093013593505050565b6000602082840312156111aa578081fd5b81518015158114610d04578182fd5b6000602082840312156111ca578081fd5b5035919050565b6000602082840312156111e2578081fd5b5051919050565b600082516111fb8184602087016114e6565b9190910192915050565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b73ffffffffffffffffffffffffffffffffffffffff92831681529116602082015260400190565b73ffffffffffffffffffffffffffffffffffffffff929092168252602082015260400190565b90815260200190565b600060208252825180602084015261129b8160408501602087016114e6565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b6020808252601d908201527f59617869735661756c74416461707465723a206f6e6c792061646d696e000000604082015260600190565b60208082526026908201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60408201527f722063616c6c0000000000000000000000000000000000000000000000000000606082015260800190565b6020808252601a908201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604082015260600190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f60408201527f7700000000000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252601d908201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604082015260600190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60408201527f6f74207375636365656400000000000000000000000000000000000000000000606082015260800190565b60208082526036908201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60408201527f20746f206e6f6e2d7a65726f20616c6c6f77616e636500000000000000000000606082015260800190565b60005b838110156115015781810151838201526020016114e9565b83811115611510576000848401525b50505050565b73ffffffffffffffffffffffffffffffffffffffff8116811461153857600080fd5b5056fea2646970667358221220bb4a213cc28347b93a71441be497eaf8d6d1b8dffffdad1c691e5bb3b09f209d64736f6c634300060c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100be5760003560e01c8063d4c3eea011610076578063f851a4401161005b578063f851a44014610136578063fbfa77cf1461013e578063fc0c546a14610146576100be565b8063d4c3eea01461010e578063f3fef3a314610123576100be565b8063a6f19c84116100a7578063a6f19c84146100e9578063b6b55f25146100f1578063b88a802f14610106576100be565b80635fcbd285146100c35780639ec5a894146100e1575b600080fd5b6100cb61014e565b6040516100d89190611205565b60405180910390f35b6100cb610172565b6100cb610196565b6101046100ff3660046111b9565b6101ba565b005b6101046103b5565b6101166106ff565b6040516100d89190611273565b61010461013136600461116e565b6107b7565b6100cb610afc565b6100cb610b20565b6100cb610b44565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b6040517fb6b55f2500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169063b6b55f259061022c908490600401611273565b602060405180830381600087803b15801561024657600080fd5b505af115801561025a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061027e91906111d1565b507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663b6b55f257f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016103149190611205565b60206040518083038186803b15801561032c57600080fd5b505afa158015610340573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061036491906111d1565b6040518263ffffffff1660e01b81526004016103809190611273565b600060405180830381600087803b15801561039a57600080fd5b505af11580156103ae573d6000803e3d6000fd5b5050505050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663e6f1daf26040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561041d57600080fd5b505af1158015610431573d6000803e3d6000fd5b50506040517f54c49fe90000000000000000000000000000000000000000000000000000000081526000925073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001691506354c49fe9906104aa908490600401611273565b60206040518083038186803b1580156104c257600080fd5b505afa1580156104d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104fa9190611152565b905060008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016105379190611205565b60206040518083038186803b15801561054f57600080fd5b505afa158015610563573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061058791906111d1565b905080156106fb576040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff83169063a9059cbb90610603907f000000000000000000000000000000000000000000000000000000000000000090859060040161124d565b602060405180830381600087803b15801561061d57600080fd5b505af1158015610631573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106559190611199565b506040517f3c6b16ab00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690633c6b16ab906106c8908490600401611273565b600060405180830381600087803b1580156106e257600080fd5b505af11580156106f6573d6000803e3d6000fd5b505050505b5050565b60006107b27f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161075d9190611205565b60206040518083038186803b15801561077557600080fd5b505afa158015610789573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107ad91906111d1565b610d0b565b905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16331461082f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610826906112cd565b60405180910390fd5b6040517f70a082310000000000000000000000000000000000000000000000000000000081527f00000000000000000000000000000000000000000000000000000000000000009060009073ffffffffffffffffffffffffffffffffffffffff8316906370a08231906108a6903090600401611205565b60206040518083038186803b1580156108be57600080fd5b505afa1580156108d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108f691906111d1565b9050600061090384610dcd565b6040517f2e1a7d4d00000000000000000000000000000000000000000000000000000000815290915073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690632e1a7d4d90610978908490600401611273565b600060405180830381600087803b15801561099257600080fd5b505af11580156109a6573d6000803e3d6000fd5b50506040517f2e1a7d4d00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169250632e1a7d4d9150610a1c908490600401611273565b600060405180830381600087803b158015610a3657600080fd5b505af1158015610a4a573d6000803e3d6000fd5b505050506103ae85838573ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610a8c9190611205565b60206040518083038186803b158015610aa457600080fd5b505afa158015610ab8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610adc91906111d1565b73ffffffffffffffffffffffffffffffffffffffff871692919003610e82565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b801580610c1657506040517fdd62ed3e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84169063dd62ed3e90610bc49030908690600401611226565b60206040518083038186803b158015610bdc57600080fd5b505afa158015610bf0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c1491906111d1565b155b610c4c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161082690611489565b610ced8363095ea7b360e01b8484604051602401610c6b92919061124d565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152610ea1565b505050565b6060610d018484600085610f57565b90505b9392505050565b6000610dc7670de0b6b3a7640000610dc17f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166377c7b8fc6040518163ffffffff1660e01b815260040160206040518083038186803b158015610d8257600080fd5b505afa158015610d96573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dba91906111d1565b8590611059565b906110ad565b92915050565b6000610dc77f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166377c7b8fc6040518163ffffffff1660e01b815260040160206040518083038186803b158015610e3857600080fd5b505afa158015610e4c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e7091906111d1565b610dc184670de0b6b3a7640000611059565b610ced8363a9059cbb60e01b8484604051602401610c6b92919061124d565b6060610f03826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16610cf29092919063ffffffff16565b805190915015610ced5780806020019051810190610f219190611199565b610ced576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108269061142c565b606082471015610f93576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161082690611304565b610f9c856110f9565b610fd2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610826906113f5565b600060608673ffffffffffffffffffffffffffffffffffffffff168587604051610ffc91906111e9565b60006040518083038185875af1925050503d8060008114611039576040519150601f19603f3d011682016040523d82523d6000602084013e61103e565b606091505b509150915061104e8282866110ff565b979650505050505050565b60008261106857506000610dc7565b8282028284828161107557fe5b0414610d04576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161082690611398565b60008082116110e8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161082690611361565b8183816110f157fe5b049392505050565b3b151590565b6060831561110e575081610d04565b82511561111e5782518084602001fd5b816040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610826919061127c565b600060208284031215611163578081fd5b8151610d0481611516565b60008060408385031215611180578081fd5b823561118b81611516565b946020939093013593505050565b6000602082840312156111aa578081fd5b81518015158114610d04578182fd5b6000602082840312156111ca578081fd5b5035919050565b6000602082840312156111e2578081fd5b5051919050565b600082516111fb8184602087016114e6565b9190910192915050565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b73ffffffffffffffffffffffffffffffffffffffff92831681529116602082015260400190565b73ffffffffffffffffffffffffffffffffffffffff929092168252602082015260400190565b90815260200190565b600060208252825180602084015261129b8160408501602087016114e6565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b6020808252601d908201527f59617869735661756c74416461707465723a206f6e6c792061646d696e000000604082015260600190565b60208082526026908201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60408201527f722063616c6c0000000000000000000000000000000000000000000000000000606082015260800190565b6020808252601a908201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604082015260600190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f60408201527f7700000000000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252601d908201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604082015260600190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60408201527f6f74207375636365656400000000000000000000000000000000000000000000606082015260800190565b60208082526036908201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60408201527f20746f206e6f6e2d7a65726f20616c6c6f77616e636500000000000000000000606082015260800190565b60005b838110156115015781810151838201526020016114e9565b83811115611510576000848401525b50505050565b73ffffffffffffffffffffffffffffffffffffffff8116811461153857600080fd5b5056fea2646970667358221220bb4a213cc28347b93a71441be497eaf8d6d1b8dffffdad1c691e5bb3b09f209d64736f6c634300060c0033",
  "devdoc": {
    "details": "A vault adapter implementation which wraps a yAxis vault.",
    "kind": "dev",
    "methods": {
      "claimReward()": {
        "details": "Claim gauge rewards."
      },
      "deposit(uint256)": {
        "details": "Deposits tokens into the vault.",
        "params": {
          "_amount": "the amount of tokens to deposit into the vault."
        }
      },
      "totalValue()": {
        "details": "Gets the total value of the assets that the adapter holds in the vault.",
        "returns": {
          "_0": "the total assets."
        }
      },
      "withdraw(address,uint256)": {
        "details": "Withdraws tokens from the vault to the recipient. This function reverts if the caller is not the admin.",
        "params": {
          "_amount": "the amount of tokens to withdraw.",
          "_recipient": "the account to withdraw the tokes to."
        }
      }
    },
    "stateVariables": {
      "admin": {
        "details": "The address which has admin control over this contract."
      },
      "gauge": {
        "details": "The gauge of the vault that the adapter is wrapping."
      },
      "lpToken": {
        "details": "The token that the vault issued"
      },
      "rewards": {
        "details": "The address which will receive rewards."
      },
      "token": {
        "details": "The token that the vault accepts"
      },
      "vault": {
        "details": "The vault that the adapter is wrapping."
      }
    },
    "title": "YaxisVaultAdapter",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}