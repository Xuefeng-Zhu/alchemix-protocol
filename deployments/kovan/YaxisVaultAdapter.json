{
  "address": "0x7C56d22Ba92a07aD3e12BeaA61d7dD7371C8Cad3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IVault",
          "name": "_vault",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "admin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "contract IDetailedERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vault",
      "outputs": [
        {
          "internalType": "contract IVault",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x5d07ff9e36bfbd7f5079c5b5042a056880379cd83077dd03208ec484b4e3b079",
  "receipt": {
    "to": null,
    "from": "0x69Dc1267198e2D21B56Ef0f1C6BcC57d96A7ED4B",
    "contractAddress": "0x7C56d22Ba92a07aD3e12BeaA61d7dD7371C8Cad3",
    "transactionIndex": 1,
    "gasUsed": "982668",
    "logsBloom": "0x
    "blockHash": "0xb648b115f22d7bb59da4fed36a334318d6cb973e945d7c2627706b50cb86e6a2",
    "transactionHash": "0x5d07ff9e36bfbd7f5079c5b5042a056880379cd83077dd03208ec484b4e3b079",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 29826074,
        "transactionHash": "0x5d07ff9e36bfbd7f5079c5b5042a056880379cd83077dd03208ec484b4e3b079",
        "address": "0x7D91365bC65CF9caDC6aE1d86d35f5add750Fe37",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x0000000000000000000000007c56d22ba92a07ad3e12beaa61d7dd7371c8cad3",
          "0x000000000000000000000000631eb675f927ba765b6c6c02df0651144b9858e5"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 0,
        "blockHash": "0xb648b115f22d7bb59da4fed36a334318d6cb973e945d7c2627706b50cb86e6a2"
      }
    ],
    "blockNumber": 29826074,
    "cumulativeGasUsed": "1003668",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x631EB675F927ba765b6C6c02df0651144B9858e5",
    "0x69Dc1267198e2D21B56Ef0f1C6BcC57d96A7ED4B"
  ],
  "solcInputHash": "e28779e1c6fa97393b5bc15b8c643560",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IVault\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IDetailedERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"contract IVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"A vault adapter implementation which wraps a yAxis vault.\",\"kind\":\"dev\",\"methods\":{\"deposit(uint256)\":{\"details\":\"Deposits tokens into the vault.\",\"params\":{\"_amount\":\"the amount of tokens to deposit into the vault.\"}},\"totalValue()\":{\"details\":\"Gets the total value of the assets that the adapter holds in the vault.\",\"returns\":{\"_0\":\"the total assets.\"}},\"withdraw(address,uint256)\":{\"details\":\"Withdraws tokens from the vault to the recipient. This function reverts if the caller is not the admin.\",\"params\":{\"_amount\":\"the amount of tokens to withdraw.\",\"_recipient\":\"the account to withdraw the tokes to.\"}}},\"stateVariables\":{\"admin\":{\"details\":\"The address which has admin control over this contract.\"},\"token\":{\"details\":\"The token that the vault accepts\"},\"vault\":{\"details\":\"The vault that the adapter is wrapping.\"}},\"title\":\"YaxisVaultAdapter\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/adapters/YaxisVaultAdapter.sol\":\"YaxisVaultAdapter\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"contracts/adapters/YaxisVaultAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport {SafeMath} from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\nimport {IDetailedERC20} from \\\"../interfaces/IDetailedERC20.sol\\\";\\nimport {IVaultAdapter} from \\\"../interfaces/IVaultAdapter.sol\\\";\\nimport {IVault} from \\\"../interfaces/IVault.sol\\\";\\n\\n/// @title YaxisVaultAdapter\\n///\\n/// @dev A vault adapter implementation which wraps a yAxis vault.\\ncontract YaxisVaultAdapter is IVaultAdapter {\\n    using SafeERC20 for IDetailedERC20;\\n    using SafeMath for uint256;\\n\\n    /// @dev The vault that the adapter is wrapping.\\n    IVault public immutable vault;\\n\\n    /// @dev The address which has admin control over this contract.\\n    address public immutable admin;\\n\\n    /// @dev The token that the vault accepts\\n    IDetailedERC20 public immutable override token;\\n\\n    constructor(IVault _vault, address _admin) public {\\n        require(\\n            _admin != address(0),\\n            \\\"YaxisVaultAdapter: admin address cannot be 0x0.\\\"\\n        );\\n\\n        vault = _vault;\\n        admin = _admin;\\n        IDetailedERC20 _token = IDetailedERC20(_vault.getToken());\\n        token = _token;\\n        _token.safeApprove(address(_vault), uint256(-1));\\n    }\\n\\n    /// @dev Gets the total value of the assets that the adapter holds in the vault.\\n    ///\\n    /// @return the total assets.\\n    function totalValue() external view override returns (uint256) {\\n        return\\n            _sharesToTokens(\\n                IDetailedERC20(vault.getLPToken()).balanceOf(address(this))\\n            );\\n    }\\n\\n    /// @dev Deposits tokens into the vault.\\n    ///\\n    /// @param _amount the amount of tokens to deposit into the vault.\\n    function deposit(uint256 _amount) external override {\\n        vault.deposit(_amount);\\n    }\\n\\n    /// @dev Withdraws tokens from the vault to the recipient.\\n    ///\\n    /// This function reverts if the caller is not the admin.\\n    ///\\n    /// @param _recipient the account to withdraw the tokes to.\\n    /// @param _amount    the amount of tokens to withdraw.\\n    function withdraw(address _recipient, uint256 _amount) external override {\\n        require(admin == msg.sender, \\\"YaxisVaultAdapter: only admin\\\");\\n\\n        IDetailedERC20 _token = token;\\n        uint256 beforeBalance = _token.balanceOf(address(this));\\n\\n        vault.withdraw(_tokensToShares(_amount));\\n\\n        _token.safeTransfer(\\n            _recipient,\\n            _token.balanceOf(address(this)) - beforeBalance\\n        );\\n    }\\n\\n    /// @dev Computes the number of tokens an amount of shares is worth.\\n    ///\\n    /// @param _sharesAmount the amount of shares.\\n    ///\\n    /// @return the number of tokens the shares are worth.\\n\\n    function _sharesToTokens(uint256 _sharesAmount)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return _sharesAmount.mul(vault.getPricePerFullShare()).div(1e18);\\n    }\\n\\n    /// @dev Computes the number of shares an amount of tokens is worth.\\n    ///\\n    /// @param _tokensAmount the amount of shares.\\n    ///\\n    /// @return the number of shares the tokens are worth.\\n    function _tokensToShares(uint256 _tokensAmount)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return _tokensAmount.mul(1e18).div(vault.getPricePerFullShare());\\n    }\\n}\\n\",\"keccak256\":\"0x363e43e32e04c78d55c6661a93743df736850668781b23c7d2905e18eb9fad10\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IDetailedERC20.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IDetailedERC20 is IERC20 {\\n  function name() external returns (string memory);\\n  function symbol() external returns (string memory);\\n  function decimals() external returns (uint8);\\n}\",\"keccak256\":\"0xd7da49ed3fd58d47d3d9d4c37d96841d117916cb3975648ec82d09a30dc5e63d\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IVault {\\n    function available() external view returns (uint256);\\n\\n    function balance() external view returns (uint256);\\n\\n    function deposit(uint256 _amount) external returns (uint256);\\n\\n    function earn(address _strategy) external;\\n\\n    function gauge() external returns (address);\\n\\n    function getLPToken() external view returns (address);\\n\\n    function getPricePerFullShare() external view returns (uint256);\\n\\n    function getToken() external view returns (address);\\n\\n    function withdraw(uint256 _amount) external;\\n\\n    function withdrawAll() external;\\n\\n    function withdrawFee(uint256 _amount) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x154cbaae0c3b85a86f2e246a21f07ab6e76b079366e6ab38ab717f38748caa6a\",\"license\":\"MIT\"},\"contracts/interfaces/IVaultAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"./IDetailedERC20.sol\\\";\\n\\n/// Interface for all Vault Adapter implementations.\\ninterface IVaultAdapter {\\n\\n  /// @dev Gets the token that the adapter accepts.\\n  function token() external view returns (IDetailedERC20);\\n\\n  /// @dev The total value of the assets deposited into the vault.\\n  function totalValue() external view returns (uint256);\\n\\n  /// @dev Deposits funds into the vault.\\n  ///\\n  /// @param _amount  the amount of funds to deposit.\\n  function deposit(uint256 _amount) external;\\n\\n  /// @dev Attempts to withdraw funds from the wrapped vault.\\n  ///\\n  /// The amount withdrawn to the recipient may be less than the amount requested.\\n  ///\\n  /// @param _recipient the recipient of the funds.\\n  /// @param _amount    the amount of funds to withdraw.\\n  function withdraw(address _recipient, uint256 _amount) external;\\n}\",\"keccak256\":\"0x2068367acc37e93a71f8c91343abdf2714895df202fff414d11c3f258af55f52\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60e06040523480156200001157600080fd5b50604051620017283803806200172883398101604081905262000034916200045b565b6001600160a01b038116620000665760405162461bcd60e51b81526004016200005d906200057e565b60405180910390fd5b6001600160601b0319606083811b821660805282901b1660a052604080516321df0da760e01b815290516000916001600160a01b038516916321df0da791600480820192602092909190829003018186803b158015620000c557600080fd5b505afa158015620000da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200010091906200041a565b606081901b6001600160601b03191660c0529050620001386001600160a01b0382168460001962000141602090811b620005d317901c565b505050620006f7565b801580620001d05750604051636eb1769f60e11b81526001600160a01b0384169063dd62ed3e906200017a9030908690600401620004d0565b60206040518083038186803b1580156200019357600080fd5b505afa158015620001a8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001ce919062000499565b155b620001ef5760405162461bcd60e51b81526004016200005d906200064e565b6200024a8363095ea7b360e01b848460405160240162000211929190620004ea565b60408051808303601f190181529190526020810180516001600160e01b0319939093166001600160e01b03938416179052906200024f16565b505050565b6060620002ab826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316620002eb60201b6200075d179092919060201c565b8051909150156200024a5780806020019051810190620002cc919062000439565b6200024a5760405162461bcd60e51b81526004016200005d9062000604565b6060620002fc848460008562000306565b90505b9392505050565b6060824710156200032b5760405162461bcd60e51b81526004016200005d9062000538565b6200033685620003d6565b620003555760405162461bcd60e51b81526004016200005d90620005cd565b60006060866001600160a01b03168587604051620003749190620004b2565b60006040518083038185875af1925050503d8060008114620003b3576040519150601f19603f3d011682016040523d82523d6000602084013e620003b8565b606091505b509092509050620003cb828286620003dc565b979650505050505050565b3b151590565b60608315620003ed575081620002ff565b825115620003fe5782518084602001fd5b8160405162461bcd60e51b81526004016200005d919062000503565b6000602082840312156200042c578081fd5b8151620002ff81620006de565b6000602082840312156200044b578081fd5b81518015158114620002ff578182fd5b600080604083850312156200046e578081fd5b82516200047b81620006de565b60208401519092506200048e81620006de565b809150509250929050565b600060208284031215620004ab578081fd5b5051919050565b60008251620004c6818460208701620006ab565b9190910192915050565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b03929092168252602082015260400190565b600060208252825180602084015262000524816040850160208701620006ab565b601f01601f19169190910160400192915050565b60208082526026908201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6040820152651c8818d85b1b60d21b606082015260800190565b6020808252602f908201527f59617869735661756c74416461707465723a2061646d696e206164647265737360408201526e1031b0b73737ba10313290183c181760891b606082015260800190565b6020808252601d908201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604082015260600190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6040820152691bdd081cdd58d8d9595960b21b606082015260800190565b60208082526036908201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60408201527f20746f206e6f6e2d7a65726f20616c6c6f77616e636500000000000000000000606082015260800190565b60005b83811015620006c8578181015183820152602001620006ae565b83811115620006d8576000848401525b50505050565b6001600160a01b0381168114620006f457600080fd5b50565b60805160601c60a05160601c60c05160601c610fd8620007506000398061037f52806105b15250806102e1528061056952508061011f52806101b15280610422528061058d5280610789528061083f5250610fd86000f3fe608060405234801561001057600080fd5b50600436106100725760003560e01c8063f851a44011610050578063f851a440146100bd578063fbfa77cf146100d2578063fc0c546a146100da57610072565b8063b6b55f2514610077578063d4c3eea01461008c578063f3fef3a3146100aa575b600080fd5b61008a610085366004610c24565b6100e2565b005b6100946101aa565b6040516100a19190610f48565b60405180910390f35b61008a6100b8366004610bd9565b6102df565b6100c5610567565b6040516100a19190610c70565b6100c561058b565b6100c56105af565b6040517fb6b55f2500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169063b6b55f2590610154908490600401610f48565b602060405180830381600087803b15801561016e57600080fd5b505af1158015610182573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101a69190610c3c565b5050565b60006102da7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16633c1aa9256040518163ffffffff1660e01b815260040160206040518083038186803b15801561021557600080fd5b505afa158015610229573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061024d9190610bbd565b73ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016102859190610c70565b60206040518083038186803b15801561029d57600080fd5b505afa1580156102b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102d59190610c3c565b610776565b905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163314610357576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161034e90610d2f565b60405180910390fd5b6040517f70a082310000000000000000000000000000000000000000000000000000000081527f00000000000000000000000000000000000000000000000000000000000000009060009073ffffffffffffffffffffffffffffffffffffffff8316906370a08231906103ce903090600401610c70565b60206040518083038186803b1580156103e657600080fd5b505afa1580156103fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061041e9190610c3c565b90507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16632e1a7d4d61046585610838565b6040518263ffffffff1660e01b81526004016104819190610f48565b600060405180830381600087803b15801561049b57600080fd5b505af11580156104af573d6000803e3d6000fd5b5050505061056184828473ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016104f19190610c70565b60206040518083038186803b15801561050957600080fd5b505afa15801561051d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105419190610c3c565b73ffffffffffffffffffffffffffffffffffffffff8616929190036108ed565b50505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b80158061068157506040517fdd62ed3e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84169063dd62ed3e9061062f9030908690600401610c91565b60206040518083038186803b15801561064757600080fd5b505afa15801561065b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061067f9190610c3c565b155b6106b7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161034e90610eeb565b6107588363095ea7b360e01b84846040516024016106d6929190610cb8565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009093169290921790915261090c565b505050565b606061076c84846000856109c2565b90505b9392505050565b6000610832670de0b6b3a764000061082c7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166377c7b8fc6040518163ffffffff1660e01b815260040160206040518083038186803b1580156107ed57600080fd5b505afa158015610801573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108259190610c3c565b8590610ac4565b90610b18565b92915050565b60006108327f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166377c7b8fc6040518163ffffffff1660e01b815260040160206040518083038186803b1580156108a357600080fd5b505afa1580156108b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108db9190610c3c565b61082c84670de0b6b3a7640000610ac4565b6107588363a9059cbb60e01b84846040516024016106d6929190610cb8565b606061096e826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff1661075d9092919063ffffffff16565b805190915015610758578080602001905181019061098c9190610c04565b610758576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161034e90610e8e565b6060824710156109fe576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161034e90610d66565b610a0785610b64565b610a3d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161034e90610e57565b600060608673ffffffffffffffffffffffffffffffffffffffff168587604051610a679190610c54565b60006040518083038185875af1925050503d8060008114610aa4576040519150601f19603f3d011682016040523d82523d6000602084013e610aa9565b606091505b5091509150610ab9828286610b6a565b979650505050505050565b600082610ad357506000610832565b82820282848281610ae057fe5b041461076f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161034e90610dfa565b6000808211610b53576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161034e90610dc3565b818381610b5c57fe5b049392505050565b3b151590565b60608315610b7957508161076f565b825115610b895782518084602001fd5b816040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161034e9190610cde565b600060208284031215610bce578081fd5b815161076f81610f7d565b60008060408385031215610beb578081fd5b8235610bf681610f7d565b946020939093013593505050565b600060208284031215610c15578081fd5b8151801515811461076f578182fd5b600060208284031215610c35578081fd5b5035919050565b600060208284031215610c4d578081fd5b5051919050565b60008251610c66818460208701610f51565b9190910192915050565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b73ffffffffffffffffffffffffffffffffffffffff92831681529116602082015260400190565b73ffffffffffffffffffffffffffffffffffffffff929092168252602082015260400190565b6000602082528251806020840152610cfd816040850160208701610f51565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b6020808252601d908201527f59617869735661756c74416461707465723a206f6e6c792061646d696e000000604082015260600190565b60208082526026908201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60408201527f722063616c6c0000000000000000000000000000000000000000000000000000606082015260800190565b6020808252601a908201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604082015260600190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f60408201527f7700000000000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252601d908201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604082015260600190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60408201527f6f74207375636365656400000000000000000000000000000000000000000000606082015260800190565b60208082526036908201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60408201527f20746f206e6f6e2d7a65726f20616c6c6f77616e636500000000000000000000606082015260800190565b90815260200190565b60005b83811015610f6c578181015183820152602001610f54565b838111156105615750506000910152565b73ffffffffffffffffffffffffffffffffffffffff81168114610f9f57600080fd5b5056fea26469706673582212202c1c73ee6ac4d2609db4a8264a0d1e5a74179aab1225c99f8783f80c30ad813e64736f6c634300060c0033",
  "deployedBytecode": "",
  "devdoc": {
    "details": "A vault adapter implementation which wraps a yAxis vault.",
    "kind": "dev",
    "methods": {
      "deposit(uint256)": {
        "details": "Deposits tokens into the vault.",
        "params": {
          "_amount": "the amount of tokens to deposit into the vault."
        }
      },
      "totalValue()": {
        "details": "Gets the total value of the assets that the adapter holds in the vault.",
        "returns": {
          "_0": "the total assets."
        }
      },
      "withdraw(address,uint256)": {
        "details": "Withdraws tokens from the vault to the recipient. This function reverts if the caller is not the admin.",
        "params": {
          "_amount": "the amount of tokens to withdraw.",
          "_recipient": "the account to withdraw the tokes to."
        }
      }
    },
    "stateVariables": {
      "admin": {
        "details": "The address which has admin control over this contract."
      },
      "token": {
        "details": "The token that the vault accepts"
      },
      "vault": {
        "details": "The vault that the adapter is wrapping."
      }
    },
    "title": "YaxisVaultAdapter",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}