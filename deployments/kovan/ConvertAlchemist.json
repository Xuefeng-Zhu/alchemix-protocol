{
  "address": "0x101Df32d4ec12069B7487940E1E1696d8918b8CE",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IMintableERC20",
          "name": "_sourceToken",
          "type": "address"
        },
        {
          "internalType": "int128",
          "name": "_sourceIndex",
          "type": "int128"
        },
        {
          "internalType": "contract IMintableERC20",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "contract IMintableERC20",
          "name": "_xtoken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_governance",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_sentinel",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IVaultAdapter",
          "name": "adapter",
          "type": "address"
        }
      ],
      "name": "ActiveVaultUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "BorrowFeeUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "limit",
          "type": "uint256"
        }
      ],
      "name": "CollateralizationLimitUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "name": "EmergencyExitUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "FundsFlushed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "withdrawnAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "decreasedValue",
          "type": "uint256"
        }
      ],
      "name": "FundsHarvested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "vaultId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "withdrawnAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "decreasedValue",
          "type": "uint256"
        }
      ],
      "name": "FundsRecalled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "governance",
          "type": "address"
        }
      ],
      "name": "GovernanceUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "HarvestFeeUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "pegMinimum",
          "type": "uint256"
        }
      ],
      "name": "PegMinimumUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "pendingGovernance",
          "type": "address"
        }
      ],
      "name": "PendingGovernanceUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "treasury",
          "type": "address"
        }
      ],
      "name": "RewardsUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "sentinel",
          "type": "address"
        }
      ],
      "name": "SentinelUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "TokensDeposited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "requestedAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "withdrawnAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "decreasedValue",
          "type": "uint256"
        }
      ],
      "name": "TokensLiquidated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "parentAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "childAmount",
          "type": "uint256"
        }
      ],
      "name": "TokensRepaid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "requestedAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "withdrawnAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "decreasedValue",
          "type": "uint256"
        }
      ],
      "name": "TokensWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "transmuter",
          "type": "address"
        }
      ],
      "name": "TransmuterUpdated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MAXIMUM_COLLATERALIZATION_LIMIT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINIMUM_COLLATERALIZATION_LIMIT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PERCENT_RESOLUTION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ZERO_ADDRESS",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "acceptGovernance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "borrowFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collateralizationLimit",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "x",
              "type": "uint256"
            }
          ],
          "internalType": "struct FixedPointMath.FixedDecimal",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emergencyExit",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "flush",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "flushActivator",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "getCdpLastDeposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "getCdpTotalCredit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "getCdpTotalDebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "getCdpTotalDeposited",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_vaultId",
          "type": "uint256"
        }
      ],
      "name": "getVaultAdapter",
      "outputs": [
        {
          "internalType": "contract IVaultAdapter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_vaultId",
          "type": "uint256"
        }
      ],
      "name": "getVaultTotalDeposited",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governance",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_vaultId",
          "type": "uint256"
        }
      ],
      "name": "harvest",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "harvestFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IVaultAdapter",
          "name": "_adapter",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "liquidate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IVaultAdapter",
          "name": "_adapter",
          "type": "address"
        }
      ],
      "name": "migrate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pegMinimum",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingGovernance",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_vaultId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "recall",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_vaultId",
          "type": "uint256"
        }
      ],
      "name": "recallAll",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_parentAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_childAmount",
          "type": "uint256"
        }
      ],
      "name": "repay",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewards",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sentinel",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_borrowFee",
          "type": "uint256"
        }
      ],
      "name": "setBorrowFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_limit",
          "type": "uint256"
        }
      ],
      "name": "setCollateralizationLimit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_emergencyExit",
          "type": "bool"
        }
      ],
      "name": "setEmergencyExit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_flushActivator",
          "type": "uint256"
        }
      ],
      "name": "setFlushActivator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_harvestFee",
          "type": "uint256"
        }
      ],
      "name": "setHarvestFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "peg",
          "type": "uint256"
        }
      ],
      "name": "setPegMinimum",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pendingGovernance",
          "type": "address"
        }
      ],
      "name": "setPendingGovernance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_rewards",
          "type": "address"
        }
      ],
      "name": "setRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_sentinel",
          "type": "address"
        }
      ],
      "name": "setSentinel",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_transmuter",
          "type": "address"
        }
      ],
      "name": "setTransmuter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sourceIndex",
      "outputs": [
        {
          "internalType": "int128",
          "name": "",
          "type": "int128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sourceToken",
      "outputs": [
        {
          "internalType": "contract IMintableERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "contract IMintableERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalDeposited",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "transmuter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vaultCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "xtoken",
      "outputs": [
        {
          "internalType": "contract IMintableERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x3199c78ee30e0a8ad4c472d4cd68c5994a6c1eb4ab931cc997a0d2495257000e",
  "receipt": {
    "to": null,
    "from": "0x69Dc1267198e2D21B56Ef0f1C6BcC57d96A7ED4B",
    "contractAddress": "0x101Df32d4ec12069B7487940E1E1696d8918b8CE",
    "transactionIndex": 1,
    "gasUsed": "4223743",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x48e424e8877d9e8b4696be48f3c084a3c25fde748507bf826b4ad3f695eaa86e",
    "transactionHash": "0x3199c78ee30e0a8ad4c472d4cd68c5994a6c1eb4ab931cc997a0d2495257000e",
    "logs": [],
    "blockNumber": 33408872,
    "cumulativeGasUsed": "4244743",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xa770697cecA9Af6584aA59DD9F226eaF6Cd0c2dc",
    0,
    "0xA24A13f1DeD8e8DDd30472Fc8Ebb3b6Fee5987b9",
    "0x684307A89d59C55e873642038Ac4467Ac969FaC1",
    "0x69Dc1267198e2D21B56Ef0f1C6BcC57d96A7ED4B",
    "0x69Dc1267198e2D21B56Ef0f1C6BcC57d96A7ED4B"
  ],
  "solcInputHash": "ad5962d48d3484563b6cbe9716683aff",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IMintableERC20\",\"name\":\"_sourceToken\",\"type\":\"address\"},{\"internalType\":\"int128\",\"name\":\"_sourceIndex\",\"type\":\"int128\"},{\"internalType\":\"contract IMintableERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"contract IMintableERC20\",\"name\":\"_xtoken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sentinel\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IVaultAdapter\",\"name\":\"adapter\",\"type\":\"address\"}],\"name\":\"ActiveVaultUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"BorrowFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"CollateralizationLimitUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"EmergencyExitUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FundsFlushed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawnAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"decreasedValue\",\"type\":\"uint256\"}],\"name\":\"FundsHarvested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawnAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"decreasedValue\",\"type\":\"uint256\"}],\"name\":\"FundsRecalled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"governance\",\"type\":\"address\"}],\"name\":\"GovernanceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"HarvestFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pegMinimum\",\"type\":\"uint256\"}],\"name\":\"PegMinimumUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pendingGovernance\",\"type\":\"address\"}],\"name\":\"PendingGovernanceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"treasury\",\"type\":\"address\"}],\"name\":\"RewardsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sentinel\",\"type\":\"address\"}],\"name\":\"SentinelUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawnAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"decreasedValue\",\"type\":\"uint256\"}],\"name\":\"TokensLiquidated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"parentAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"childAmount\",\"type\":\"uint256\"}],\"name\":\"TokensRepaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawnAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"decreasedValue\",\"type\":\"uint256\"}],\"name\":\"TokensWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"transmuter\",\"type\":\"address\"}],\"name\":\"TransmuterUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAXIMUM_COLLATERALIZATION_LIMIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINIMUM_COLLATERALIZATION_LIMIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERCENT_RESOLUTION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ZERO_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"borrowFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralizationLimit\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"}],\"internalType\":\"struct FixedPointMath.FixedDecimal\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyExit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flush\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flushActivator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getCdpLastDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getCdpTotalCredit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getCdpTotalDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getCdpTotalDeposited\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vaultId\",\"type\":\"uint256\"}],\"name\":\"getVaultAdapter\",\"outputs\":[{\"internalType\":\"contract IVaultAdapter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vaultId\",\"type\":\"uint256\"}],\"name\":\"getVaultTotalDeposited\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vaultId\",\"type\":\"uint256\"}],\"name\":\"harvest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvestFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IVaultAdapter\",\"name\":\"_adapter\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"liquidate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IVaultAdapter\",\"name\":\"_adapter\",\"type\":\"address\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pegMinimum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingGovernance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vaultId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"recall\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vaultId\",\"type\":\"uint256\"}],\"name\":\"recallAll\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_parentAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_childAmount\",\"type\":\"uint256\"}],\"name\":\"repay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sentinel\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_borrowFee\",\"type\":\"uint256\"}],\"name\":\"setBorrowFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_limit\",\"type\":\"uint256\"}],\"name\":\"setCollateralizationLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_emergencyExit\",\"type\":\"bool\"}],\"name\":\"setEmergencyExit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_flushActivator\",\"type\":\"uint256\"}],\"name\":\"setFlushActivator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_harvestFee\",\"type\":\"uint256\"}],\"name\":\"setHarvestFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"peg\",\"type\":\"uint256\"}],\"name\":\"setPegMinimum\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pendingGovernance\",\"type\":\"address\"}],\"name\":\"setPendingGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewards\",\"type\":\"address\"}],\"name\":\"setRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sentinel\",\"type\":\"address\"}],\"name\":\"setSentinel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_transmuter\",\"type\":\"address\"}],\"name\":\"setTransmuter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sourceIndex\",\"outputs\":[{\"internalType\":\"int128\",\"name\":\"\",\"type\":\"int128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sourceToken\",\"outputs\":[{\"internalType\":\"contract IMintableERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IMintableERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDeposited\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transmuter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"xtoken\",\"outputs\":[{\"internalType\":\"contract IMintableERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"acceptGovernance()\":{\"details\":\"Accepts the role as governance. This function reverts if the caller is not the new pending governance.\"},\"collateralizationLimit()\":{\"details\":\"Gets the collateralization limit. The collateralization limit is the minimum ratio of collateral to debt that is allowed by the system.\",\"returns\":{\"_0\":\"the collateralization limit.\"}},\"deposit(uint256)\":{\"details\":\"Deposits collateral into a CDP. This function reverts if an emergency exit is active. This is in place to prevent the potential loss of additional funds.\",\"params\":{\"_amount\":\"the amount of collateral to deposit.\"}},\"flush()\":{\"details\":\"Flushes buffered tokens to the active vault. This function reverts if an emergency exit is active. This is in place to prevent the potential loss of additional funds.\",\"returns\":{\"_0\":\"the amount of tokens flushed to the active vault.\"}},\"getCdpLastDeposit(address)\":{\"details\":\"Gets the last recorded block of when a user made a deposit into their CDP.\",\"params\":{\"_account\":\"the user account of the CDP to query.\"},\"returns\":{\"_0\":\"the block number of the last deposit.\"}},\"getCdpTotalCredit(address)\":{\"details\":\"Get the total amount of credit that a CDP has.\",\"params\":{\"_account\":\"the user account of the CDP to query.\"},\"returns\":{\"_0\":\"the amount of credit.\"}},\"getCdpTotalDebt(address)\":{\"details\":\"Get the total amount of alchemic tokens borrowed from a CDP.\",\"params\":{\"_account\":\"the user account of the CDP to query.\"},\"returns\":{\"_0\":\"the borrowed amount of tokens.\"}},\"getCdpTotalDeposited(address)\":{\"details\":\"Get the total amount of collateral deposited into a CDP.\",\"params\":{\"_account\":\"the user account of the CDP to query.\"},\"returns\":{\"_0\":\"the deposited amount of tokens.\"}},\"getVaultAdapter(uint256)\":{\"details\":\"Get the adapter of a vault.\",\"params\":{\"_vaultId\":\"the identifier of the vault.\"},\"returns\":{\"_0\":\"the vault adapter.\"}},\"getVaultTotalDeposited(uint256)\":{\"details\":\"Get the total amount of the parent asset that has been deposited into a vault.\",\"params\":{\"_vaultId\":\"the identifier of the vault.\"},\"returns\":{\"_0\":\"the total amount of deposited tokens.\"}},\"harvest(uint256)\":{\"details\":\"Harvests yield from a vault.\",\"params\":{\"_vaultId\":\"the identifier of the vault to harvest from.\"},\"returns\":{\"_0\":\"the amount of funds that were harvested from the vault.\"}},\"initialize(address)\":{\"details\":\"Initializes the contract. This function checks that the transmuter and rewards have been set and sets up the active vault.\",\"params\":{\"_adapter\":\"the vault adapter of the active vault.\"}},\"liquidate(uint256)\":{\"details\":\"Attempts to liquidate part of a CDP's collateral to pay back its debt.\",\"params\":{\"_amount\":\"the amount of collateral to attempt to liquidate.\"}},\"migrate(address)\":{\"details\":\"Migrates the system to a new vault. This function reverts if the vault adapter is the zero address, if the token that the vault adapter accepts is not the token that this contract defines as the parent asset, or if the contract has not yet been initialized.\",\"params\":{\"_adapter\":\"the adapter for the vault the system will migrate to.\"}},\"mint(uint256)\":{\"details\":\"Mints synthetic tokens by either claiming credit or increasing the debt. Claiming credit will take priority over increasing the debt. This function reverts if the debt is increased and the CDP health check fails.\",\"params\":{\"_amount\":\"the amount of alchemic tokens to borrow.\"}},\"recall(uint256,uint256)\":{\"details\":\"Recalls an amount of deposited funds from a vault to this contract.\",\"params\":{\"_vaultId\":\"the identifier of the recall funds from.\"},\"returns\":{\"_0\":\"the amount of funds that were recalled from the vault to this contract and the decreased vault value.\"}},\"recallAll(uint256)\":{\"details\":\"Recalls all the deposited funds from a vault to this contract.\",\"params\":{\"_vaultId\":\"the identifier of the recall funds from.\"},\"returns\":{\"_0\":\"the amount of funds that were recalled from the vault to this contract and the decreased vault value.\"}},\"repay(uint256,uint256)\":{\"details\":\"Repays debt with the native and or synthetic token. An approval is required to transfer native tokens to the transmuter.\"},\"setBorrowFee(uint256)\":{\"details\":\"Sets the borrow fee. This function reverts if the caller is not the current governance.\",\"params\":{\"_borrowFee\":\"the new borrow fee.\"}},\"setCollateralizationLimit(uint256)\":{\"details\":\"Sets the collateralization limit. This function reverts if the caller is not the current governance or if the collateralization limit is outside of the accepted bounds.\",\"params\":{\"_limit\":\"the new collateralization limit.\"}},\"setEmergencyExit(bool)\":{\"details\":\"Sets if the contract should enter emergency exit mode.\",\"params\":{\"_emergencyExit\":\"if the contract should enter emergency exit mode.\"}},\"setFlushActivator(uint256)\":{\"details\":\"Sets the flushActivator.\",\"params\":{\"_flushActivator\":\"the new flushActivator.\"}},\"setHarvestFee(uint256)\":{\"details\":\"Sets the harvest fee. This function reverts if the caller is not the current governance.\",\"params\":{\"_harvestFee\":\"the new harvest fee.\"}},\"setPegMinimum(uint256)\":{\"details\":\"Set pegMinimum.\"},\"setPendingGovernance(address)\":{\"details\":\"Sets the pending governance. This function reverts if the new pending governance is the zero address or the caller is not the current governance. This is to prevent the contract governance being set to the zero address which would deadlock privileged contract functionality.\",\"params\":{\"_pendingGovernance\":\"the new pending governance.\"}},\"setRewards(address)\":{\"details\":\"Sets the rewards contract. This function reverts if the new rewards contract is the zero address or the caller is not the current governance.\",\"params\":{\"_rewards\":\"the new rewards contract.\"}},\"setTransmuter(address)\":{\"details\":\"Sets the transmuter. This function reverts if the new transmuter is the zero address or the caller is not the current governance.\",\"params\":{\"_transmuter\":\"the new transmuter.\"}},\"vaultCount()\":{\"details\":\"Gets the number of vaults in the vault list.\",\"returns\":{\"_0\":\"the vault count.\"}},\"withdraw(uint256)\":{\"details\":\"Attempts to withdraw part of a CDP's collateral. This function reverts if a deposit into the CDP was made in the same block. This is to prevent flash loan attacks on other internal or external systems.\",\"params\":{\"_amount\":\"the amount of collateral to withdraw.\"}}},\"stateVariables\":{\"MAXIMUM_COLLATERALIZATION_LIMIT\":{\"details\":\"The maximum value that the collateralization limit can be set to by the governance. This is a safety rail to prevent the collateralization from being set to a value which breaks the system. This value is equal to 400%. IMPORTANT: This constant is a raw FixedPointMath.FixedDecimal value and assumes a resolution of 64 bits. If the            resolution for the FixedPointMath library changes this constant must change as well.\"},\"MINIMUM_COLLATERALIZATION_LIMIT\":{\"details\":\"The minimum value that the collateralization limit can be set to by the governance. This is a safety rail to prevent the collateralization from being set to a value which breaks the system. This value is equal to 100%. IMPORTANT: This constant is a raw FixedPointMath.FixedDecimal value and assumes a resolution of 64 bits. If the            resolution for the FixedPointMath library changes this constant must change as well.\"},\"PERCENT_RESOLUTION\":{\"details\":\"Resolution for all fixed point numeric parameters which represent percents. The resolution allows for a granularity of 0.01% increments.\"},\"_cdps\":{\"details\":\"A mapping of all of the user CDPs. If a user wishes to have multiple CDPs they will have to either create a new address.\"},\"_ctx\":{\"details\":\"The context shared between the CDPs.\"},\"_vaults\":{\"details\":\"A list of all of the vaults. The last element of the list is the vault that is currently being used for deposits and withdraws. Vaults before the last element are considered inactive and are expected to be cleared.\"},\"borrowFee\":{\"details\":\"The percent of minted debt that will go to the rewards contract.\"},\"emergencyExit\":{\"details\":\"A flag indicating if deposits and flushes should be halted and if all parties should be able to recall from the active vault.\"},\"flushActivator\":{\"details\":\"when movemetns are bigger than this number flush is activated.\"},\"governance\":{\"details\":\"The address of the account which currently has administrative capabilities over this contract.\"},\"harvestFee\":{\"details\":\"The percent of each profitable harvest that will go to the rewards contract.\"},\"initialized\":{\"details\":\"A flag indicating if the contract has been initialized yet.\"},\"pegMinimum\":{\"details\":\"The minimum returned amount needed to be on peg according to the oracle.\"},\"pendingGovernance\":{\"details\":\"The address of the pending governance.\"},\"rewards\":{\"details\":\"The address of the contract which will receive fees.\"},\"sentinel\":{\"details\":\"The address of the account which can initiate an emergency withdraw of funds in a vault.\"},\"sourceToken\":{\"details\":\"The token that this contract is using as the source of parent asset.\"},\"token\":{\"details\":\"The token that this contract is using as the parent asset.\"},\"totalDeposited\":{\"details\":\"The total amount the native token deposited into the system that is owned by external users.\"},\"transmuter\":{\"details\":\"The address of the contract which will transmute synthetic tokens back into native tokens.\"},\"xtoken\":{\"details\":\"The token that this contract is using as the child asset.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ConvertAlchemist.sol\":\"ConvertAlchemist\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\",\"keccak256\":\"0x363bd3b45201f07c9b71c2edc96533468cf14a3d029fabd82fddceb1eb3ebd9c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x8bbbc2f5c10065ee272592ae0a7a6ceb23de2fbd81564ee0bb015ecf404d5f61\",\"license\":\"MIT\"},\"contracts/ConvertAlchemist.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.6.12;\\npragma experimental ABIEncoderV2;\\n\\n//import {ERC20} from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport {Math} from \\\"@openzeppelin/contracts/math/Math.sol\\\";\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport {SafeMath} from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\nimport {CDP} from \\\"./libraries/alchemist/CDP.sol\\\";\\nimport {FixedPointMath} from \\\"./libraries/FixedPointMath.sol\\\";\\nimport {AlchemistVault} from \\\"./libraries/alchemist/AlchemistVault.sol\\\";\\nimport {ITransmuter} from \\\"./interfaces/ITransmuter.sol\\\";\\nimport {IMintableERC20} from \\\"./interfaces/IMintableERC20.sol\\\";\\nimport {ICurveToken} from \\\"./interfaces/ICurveToken.sol\\\";\\nimport {IVaultAdapter} from \\\"./interfaces/IVaultAdapter.sol\\\";\\n\\n// ERC20,removing ERC20 from the alchemist\\n//    ___    __        __                _               ___                              __         _\\n//   / _ |  / / ____  / /  ___   __ _   (_) __ __       / _ \\\\  ____ ___   ___ ___   ___  / /_  ___  (_)\\n//  / __ | / / / __/ / _ \\\\/ -_) /  ' \\\\ / /  \\\\ \\\\ /      / ___/ / __// -_) (_-</ -_) / _ \\\\/ __/ (_-< _\\n// /_/ |_|/_/  \\\\__/ /_//_/\\\\__/ /_/_/_//_/  /_\\\\_\\\\      /_/    /_/   \\\\__/ /___/\\\\__/ /_//_/\\\\__/ /___/(_)\\n//\\n//      ___       __        ______  __    __   _______ .___  ___.  __       _______..___________.\\n//     /   \\\\     |  |      /      ||  |  |  | |   ____||   \\\\/   | |  |     /       ||           |\\n//    /  ^  \\\\    |  |     |  ,----'|  |__|  | |  |__   |  \\\\  /  | |  |    |   (----``---|  |----`\\n//   /  /_\\\\  \\\\   |  |     |  |     |   __   | |   __|  |  |\\\\/|  | |  |     \\\\   \\\\        |  |\\n//  /  _____  \\\\  |  `----.|  `----.|  |  |  | |  |____ |  |  |  | |  | .----)   |       |  |\\n// /__/     \\\\__\\\\ |_______| \\\\______||__|  |__| |_______||__|  |__| |__| |_______/        |__|\\n\\ncontract ConvertAlchemist is ReentrancyGuard {\\n    using CDP for CDP.Data;\\n    using FixedPointMath for FixedPointMath.FixedDecimal;\\n    using AlchemistVault for AlchemistVault.Data;\\n    using AlchemistVault for AlchemistVault.List;\\n    using SafeERC20 for IMintableERC20;\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    address public constant ZERO_ADDRESS = address(0);\\n\\n    /// @dev Resolution for all fixed point numeric parameters which represent percents. The resolution allows for a\\n    /// granularity of 0.01% increments.\\n    uint256 public constant PERCENT_RESOLUTION = 10000;\\n\\n    /// @dev The minimum value that the collateralization limit can be set to by the governance. This is a safety rail\\n    /// to prevent the collateralization from being set to a value which breaks the system.\\n    ///\\n    /// This value is equal to 100%.\\n    ///\\n    /// IMPORTANT: This constant is a raw FixedPointMath.FixedDecimal value and assumes a resolution of 64 bits. If the\\n    ///            resolution for the FixedPointMath library changes this constant must change as well.\\n    uint256 public constant MINIMUM_COLLATERALIZATION_LIMIT =\\n        1000000000000000000;\\n\\n    /// @dev The maximum value that the collateralization limit can be set to by the governance. This is a safety rail\\n    /// to prevent the collateralization from being set to a value which breaks the system.\\n    ///\\n    /// This value is equal to 400%.\\n    ///\\n    /// IMPORTANT: This constant is a raw FixedPointMath.FixedDecimal value and assumes a resolution of 64 bits. If the\\n    ///            resolution for the FixedPointMath library changes this constant must change as well.\\n    uint256 public constant MAXIMUM_COLLATERALIZATION_LIMIT =\\n        4000000000000000000;\\n\\n    event GovernanceUpdated(address governance);\\n\\n    event PendingGovernanceUpdated(address pendingGovernance);\\n\\n    event SentinelUpdated(address sentinel);\\n\\n    event TransmuterUpdated(address transmuter);\\n\\n    event RewardsUpdated(address treasury);\\n\\n    event HarvestFeeUpdated(uint256 fee);\\n\\n    event BorrowFeeUpdated(uint256 fee);\\n\\n    event CollateralizationLimitUpdated(uint256 limit);\\n\\n    event PegMinimumUpdated(uint256 pegMinimum);\\n\\n    event EmergencyExitUpdated(bool status);\\n\\n    event ActiveVaultUpdated(IVaultAdapter indexed adapter);\\n\\n    event FundsHarvested(uint256 withdrawnAmount, uint256 decreasedValue);\\n\\n    event FundsRecalled(\\n        uint256 indexed vaultId,\\n        uint256 withdrawnAmount,\\n        uint256 decreasedValue\\n    );\\n\\n    event FundsFlushed(uint256 amount);\\n\\n    event TokensDeposited(address indexed account, uint256 amount);\\n\\n    event TokensWithdrawn(\\n        address indexed account,\\n        uint256 requestedAmount,\\n        uint256 withdrawnAmount,\\n        uint256 decreasedValue\\n    );\\n\\n    event TokensRepaid(\\n        address indexed account,\\n        uint256 parentAmount,\\n        uint256 childAmount\\n    );\\n\\n    event TokensLiquidated(\\n        address indexed account,\\n        uint256 requestedAmount,\\n        uint256 withdrawnAmount,\\n        uint256 decreasedValue\\n    );\\n\\n    /// @dev The token that this contract is using as the source of parent asset.\\n    IMintableERC20 public sourceToken;\\n\\n    int128 public sourceIndex;\\n\\n    /// @dev The token that this contract is using as the parent asset.\\n    IMintableERC20 public token;\\n\\n    /// @dev The token that this contract is using as the child asset.\\n    IMintableERC20 public xtoken;\\n\\n    /// @dev The address of the account which currently has administrative capabilities over this contract.\\n    address public governance;\\n\\n    /// @dev The address of the pending governance.\\n    address public pendingGovernance;\\n\\n    /// @dev The address of the account which can initiate an emergency withdraw of funds in a vault.\\n    address public sentinel;\\n\\n    /// @dev The address of the contract which will transmute synthetic tokens back into native tokens.\\n    address public transmuter;\\n\\n    /// @dev The address of the contract which will receive fees.\\n    address public rewards;\\n\\n    /// @dev The percent of each profitable harvest that will go to the rewards contract.\\n    uint256 public harvestFee;\\n\\n    /// @dev The percent of minted debt that will go to the rewards contract.\\n    uint256 public borrowFee;\\n\\n    /// @dev The total amount the native token deposited into the system that is owned by external users.\\n    uint256 public totalDeposited;\\n\\n    /// @dev when movemetns are bigger than this number flush is activated.\\n    uint256 public flushActivator;\\n\\n    /// @dev A flag indicating if the contract has been initialized yet.\\n    bool public initialized;\\n\\n    /// @dev A flag indicating if deposits and flushes should be halted and if all parties should be able to recall\\n    /// from the active vault.\\n    bool public emergencyExit;\\n\\n    /// @dev The context shared between the CDPs.\\n    CDP.Context private _ctx;\\n\\n    /// @dev A mapping of all of the user CDPs. If a user wishes to have multiple CDPs they will have to either\\n    /// create a new address.\\n    mapping(address => CDP.Data) private _cdps;\\n\\n    /// @dev A list of all of the vaults. The last element of the list is the vault that is currently being used for\\n    /// deposits and withdraws. Vaults before the last element are considered inactive and are expected to be cleared.\\n    AlchemistVault.List private _vaults;\\n\\n    /// @dev The minimum returned amount needed to be on peg according to the oracle.\\n    uint256 public pegMinimum;\\n\\n    constructor(\\n        IMintableERC20 _sourceToken,\\n        int128 _sourceIndex,\\n        IMintableERC20 _token,\\n        IMintableERC20 _xtoken,\\n        address _governance,\\n        address _sentinel\\n    )\\n        public\\n    /*ERC20(\\n      string(abi.encodePacked(\\\"Alchemic \\\", _token.name())),\\n      string(abi.encodePacked(\\\"al\\\", _token.symbol()))\\n    )*/\\n    {\\n        require(\\n            _governance != ZERO_ADDRESS,\\n            \\\"Alchemist: governance address cannot be 0x0.\\\"\\n        );\\n        require(\\n            _sentinel != ZERO_ADDRESS,\\n            \\\"Alchemist: sentinel address cannot be 0x0.\\\"\\n        );\\n\\n        sourceToken = _sourceToken;\\n        sourceIndex = _sourceIndex;\\n        token = _token;\\n        xtoken = _xtoken;\\n        governance = _governance;\\n        sentinel = _sentinel;\\n        flushActivator = 100000 ether; // change for non 18 digit tokens\\n\\n        //_setupDecimals(_token.decimals());\\n        uint256 COLL_LIMIT = MINIMUM_COLLATERALIZATION_LIMIT.mul(2);\\n        _ctx.collateralizationLimit = FixedPointMath.FixedDecimal(COLL_LIMIT);\\n        _ctx.accumulatedYieldWeight = FixedPointMath.FixedDecimal(0);\\n    }\\n\\n    /// @dev Sets the pending governance.\\n    ///\\n    /// This function reverts if the new pending governance is the zero address or the caller is not the current\\n    /// governance. This is to prevent the contract governance being set to the zero address which would deadlock\\n    /// privileged contract functionality.\\n    ///\\n    /// @param _pendingGovernance the new pending governance.\\n    function setPendingGovernance(address _pendingGovernance) external onlyGov {\\n        require(\\n            _pendingGovernance != ZERO_ADDRESS,\\n            \\\"Alchemist: governance address cannot be 0x0.\\\"\\n        );\\n\\n        pendingGovernance = _pendingGovernance;\\n\\n        emit PendingGovernanceUpdated(_pendingGovernance);\\n    }\\n\\n    /// @dev Accepts the role as governance.\\n    ///\\n    /// This function reverts if the caller is not the new pending governance.\\n    function acceptGovernance() external {\\n        address _pendingGovernance = pendingGovernance;\\n        require(\\n            msg.sender == _pendingGovernance,\\n            \\\"sender is not pendingGovernance\\\"\\n        );\\n        governance = _pendingGovernance;\\n\\n        emit GovernanceUpdated(_pendingGovernance);\\n    }\\n\\n    function setSentinel(address _sentinel) external onlyGov {\\n        require(\\n            _sentinel != ZERO_ADDRESS,\\n            \\\"Alchemist: sentinel address cannot be 0x0.\\\"\\n        );\\n\\n        sentinel = _sentinel;\\n\\n        emit SentinelUpdated(_sentinel);\\n    }\\n\\n    /// @dev Sets the transmuter.\\n    ///\\n    /// This function reverts if the new transmuter is the zero address or the caller is not the current governance.\\n    ///\\n    /// @param _transmuter the new transmuter.\\n    function setTransmuter(address _transmuter) external onlyGov {\\n        // Check that the transmuter address is not the zero address. Setting the transmuter to the zero address would break\\n        // transfers to the address because of `safeTransfer` checks.\\n        require(\\n            _transmuter != ZERO_ADDRESS,\\n            \\\"Alchemist: transmuter address cannot be 0x0.\\\"\\n        );\\n\\n        transmuter = _transmuter;\\n\\n        emit TransmuterUpdated(_transmuter);\\n    }\\n\\n    /// @dev Sets the flushActivator.\\n    ///\\n    /// @param _flushActivator the new flushActivator.\\n    function setFlushActivator(uint256 _flushActivator) external onlyGov {\\n        flushActivator = _flushActivator;\\n    }\\n\\n    /// @dev Sets the rewards contract.\\n    ///\\n    /// This function reverts if the new rewards contract is the zero address or the caller is not the current governance.\\n    ///\\n    /// @param _rewards the new rewards contract.\\n    function setRewards(address _rewards) external onlyGov {\\n        // Check that the rewards address is not the zero address. Setting the rewards to the zero address would break\\n        // transfers to the address because of `safeTransfer` checks.\\n        require(\\n            _rewards != ZERO_ADDRESS,\\n            \\\"Alchemist: rewards address cannot be 0x0.\\\"\\n        );\\n\\n        rewards = _rewards;\\n\\n        emit RewardsUpdated(_rewards);\\n    }\\n\\n    /// @dev Sets the harvest fee.\\n    ///\\n    /// This function reverts if the caller is not the current governance.\\n    ///\\n    /// @param _harvestFee the new harvest fee.\\n    function setHarvestFee(uint256 _harvestFee) external onlyGov {\\n        // Check that the harvest fee is within the acceptable range. Setting the harvest fee greater than 100% could\\n        // potentially break internal logic when calculating the harvest fee.\\n        require(\\n            _harvestFee <= PERCENT_RESOLUTION,\\n            \\\"Alchemist: harvest fee above maximum.\\\"\\n        );\\n\\n        harvestFee = _harvestFee;\\n\\n        emit HarvestFeeUpdated(_harvestFee);\\n    }\\n\\n    /// @dev Sets the borrow fee.\\n    ///\\n    /// This function reverts if the caller is not the current governance.\\n    ///\\n    /// @param _borrowFee the new borrow fee.\\n    function setBorrowFee(uint256 _borrowFee) external onlyGov {\\n        // Check that the borrow fee is within the acceptable range. Setting the borrow fee greater than 100% could\\n        // potentially break internal logic when calculating the borrow fee.\\n        require(\\n            _borrowFee <= PERCENT_RESOLUTION,\\n            \\\"Alchemist: borrow fee above maximum.\\\"\\n        );\\n\\n        borrowFee = _borrowFee;\\n\\n        emit BorrowFeeUpdated(_borrowFee);\\n    }\\n\\n    /// @dev Sets the collateralization limit.\\n    ///\\n    /// This function reverts if the caller is not the current governance or if the collateralization limit is outside\\n    /// of the accepted bounds.\\n    ///\\n    /// @param _limit the new collateralization limit.\\n    function setCollateralizationLimit(uint256 _limit) external onlyGov {\\n        require(\\n            _limit >= MINIMUM_COLLATERALIZATION_LIMIT,\\n            \\\"Alchemist: collateralization limit below minimum.\\\"\\n        );\\n        require(\\n            _limit <= MAXIMUM_COLLATERALIZATION_LIMIT,\\n            \\\"Alchemist: collateralization limit above maximum.\\\"\\n        );\\n\\n        _ctx.collateralizationLimit = FixedPointMath.FixedDecimal(_limit);\\n\\n        emit CollateralizationLimitUpdated(_limit);\\n    }\\n\\n    /// @dev Set pegMinimum.\\n    function setPegMinimum(uint256 peg) external onlyGov {\\n        pegMinimum = peg;\\n        emit PegMinimumUpdated(pegMinimum);\\n    }\\n\\n    /// @dev Sets if the contract should enter emergency exit mode.\\n    ///\\n    /// @param _emergencyExit if the contract should enter emergency exit mode.\\n    function setEmergencyExit(bool _emergencyExit) external {\\n        require(msg.sender == governance || msg.sender == sentinel, \\\"\\\");\\n\\n        emergencyExit = _emergencyExit;\\n\\n        emit EmergencyExitUpdated(_emergencyExit);\\n    }\\n\\n    /// @dev Gets the collateralization limit.\\n    ///\\n    /// The collateralization limit is the minimum ratio of collateral to debt that is allowed by the system.\\n    ///\\n    /// @return the collateralization limit.\\n    function collateralizationLimit()\\n        external\\n        view\\n        returns (FixedPointMath.FixedDecimal memory)\\n    {\\n        return _ctx.collateralizationLimit;\\n    }\\n\\n    /// @dev Initializes the contract.\\n    ///\\n    /// This function checks that the transmuter and rewards have been set and sets up the active vault.\\n    ///\\n    /// @param _adapter the vault adapter of the active vault.\\n    function initialize(IVaultAdapter _adapter) external onlyGov {\\n        require(!initialized, \\\"Alchemist: already initialized\\\");\\n\\n        require(\\n            transmuter != ZERO_ADDRESS,\\n            \\\"Alchemist: cannot initialize transmuter address to 0x0\\\"\\n        );\\n        require(\\n            rewards != ZERO_ADDRESS,\\n            \\\"Alchemist: cannot initialize rewards address to 0x0\\\"\\n        );\\n\\n        _updateActiveVault(_adapter);\\n\\n        initialized = true;\\n    }\\n\\n    /// @dev Migrates the system to a new vault.\\n    ///\\n    /// This function reverts if the vault adapter is the zero address, if the token that the vault adapter accepts\\n    /// is not the token that this contract defines as the parent asset, or if the contract has not yet been initialized.\\n    ///\\n    /// @param _adapter the adapter for the vault the system will migrate to.\\n    function migrate(IVaultAdapter _adapter)\\n        external\\n        expectInitialized\\n        onlyGov\\n    {\\n        _updateActiveVault(_adapter);\\n    }\\n\\n    /// @dev Harvests yield from a vault.\\n    ///\\n    /// @param _vaultId the identifier of the vault to harvest from.\\n    ///\\n    /// @return the amount of funds that were harvested from the vault.\\n    function harvest(uint256 _vaultId)\\n        external\\n        expectInitialized\\n        returns (uint256, uint256)\\n    {\\n        AlchemistVault.Data storage _vault = _vaults.get(_vaultId);\\n\\n        (uint256 _harvestedAmount, uint256 _decreasedValue) = _vault.harvest(\\n            address(this)\\n        );\\n\\n        if (_harvestedAmount > 0) {\\n            uint256 _feeAmount = _harvestedAmount.mul(harvestFee).div(\\n                PERCENT_RESOLUTION\\n            );\\n            uint256 _distributeAmount = _harvestedAmount.sub(_feeAmount);\\n\\n            FixedPointMath.FixedDecimal memory _weight = FixedPointMath\\n                .fromU256(_distributeAmount)\\n                .div(totalDeposited);\\n            _ctx.accumulatedYieldWeight = _ctx.accumulatedYieldWeight.add(\\n                _weight\\n            );\\n\\n            if (_feeAmount > 0) {\\n                token.safeTransfer(rewards, _feeAmount);\\n            }\\n\\n            if (_distributeAmount > 0) {\\n                _distributeToTransmuter(_distributeAmount);\\n\\n                // token.safeTransfer(transmuter, _distributeAmount); previous version call\\n            }\\n        }\\n\\n        emit FundsHarvested(_harvestedAmount, _decreasedValue);\\n\\n        return (_harvestedAmount, _decreasedValue);\\n    }\\n\\n    /// @dev Recalls an amount of deposited funds from a vault to this contract.\\n    ///\\n    /// @param _vaultId the identifier of the recall funds from.\\n    ///\\n    /// @return the amount of funds that were recalled from the vault to this contract and the decreased vault value.\\n    function recall(uint256 _vaultId, uint256 _amount)\\n        external\\n        nonReentrant\\n        expectInitialized\\n        returns (uint256, uint256)\\n    {\\n        return _recallFunds(_vaultId, _amount);\\n    }\\n\\n    /// @dev Recalls all the deposited funds from a vault to this contract.\\n    ///\\n    /// @param _vaultId the identifier of the recall funds from.\\n    ///\\n    /// @return the amount of funds that were recalled from the vault to this contract and the decreased vault value.\\n    function recallAll(uint256 _vaultId)\\n        external\\n        nonReentrant\\n        expectInitialized\\n        returns (uint256, uint256)\\n    {\\n        AlchemistVault.Data storage _vault = _vaults.get(_vaultId);\\n        return _recallFunds(_vaultId, _vault.totalDeposited);\\n    }\\n\\n    /// @dev Flushes buffered tokens to the active vault.\\n    ///\\n    /// This function reverts if an emergency exit is active. This is in place to prevent the potential loss of\\n    /// additional funds.\\n    ///\\n    /// @return the amount of tokens flushed to the active vault.\\n    function flush()\\n        external\\n        nonReentrant\\n        notEmergency\\n        expectInitialized\\n        returns (uint256)\\n    {\\n        // Prevent flushing to the active vault when an emergency exit is enabled to prevent potential loss of funds if\\n        // the active vault is poisoned for any reason.\\n        return flushActiveVault();\\n    }\\n\\n    /// @dev Internal function to flush buffered tokens to the active vault.\\n    ///\\n    /// This function reverts if an emergency exit is active. This is in place to prevent the potential loss of\\n    /// additional funds.\\n    ///\\n    /// @return the amount of tokens flushed to the active vault.\\n    function flushActiveVault() internal returns (uint256) {\\n        AlchemistVault.Data storage _activeVault = _vaults.last();\\n        uint256 _depositedAmount = _activeVault.depositAll();\\n\\n        emit FundsFlushed(_depositedAmount);\\n\\n        return _depositedAmount;\\n    }\\n\\n    /// @dev Deposits collateral into a CDP.\\n    ///\\n    /// This function reverts if an emergency exit is active. This is in place to prevent the potential loss of\\n    /// additional funds.\\n    ///\\n    /// @param _amount the amount of collateral to deposit.\\n    function deposit(uint256 _amount)\\n        external\\n        nonReentrant\\n        notEmergency\\n        noContractAllowed\\n        expectInitialized\\n    {\\n        CDP.Data storage _cdp = _cdps[msg.sender];\\n        _cdp.update(_ctx);\\n\\n        sourceToken.safeTransferFrom(msg.sender, address(this), _amount);\\n        sourceToken.approve(address(token), _amount);\\n\\n        uint256[2] memory tokenAmounts;\\n        tokenAmounts[uint256(sourceIndex)] = _amount;\\n        uint256 mintedAmount = ICurveToken(address(token)).add_liquidity(\\n            tokenAmounts,\\n            0\\n        );\\n\\n        if (mintedAmount >= flushActivator) {\\n            flushActiveVault();\\n        }\\n        totalDeposited = totalDeposited.add(mintedAmount);\\n\\n        _cdp.totalDeposited = _cdp.totalDeposited.add(mintedAmount);\\n        _cdp.lastDeposit = block.number;\\n\\n        emit TokensDeposited(msg.sender, mintedAmount);\\n    }\\n\\n    /// @dev Attempts to withdraw part of a CDP's collateral.\\n    ///\\n    /// This function reverts if a deposit into the CDP was made in the same block. This is to prevent flash loan attacks\\n    /// on other internal or external systems.\\n    ///\\n    /// @param _amount the amount of collateral to withdraw.\\n    function withdraw(uint256 _amount)\\n        external\\n        nonReentrant\\n        noContractAllowed\\n        expectInitialized\\n        returns (uint256, uint256)\\n    {\\n        CDP.Data storage _cdp = _cdps[msg.sender];\\n        require(block.number > _cdp.lastDeposit, \\\"\\\");\\n\\n        _cdp.update(_ctx);\\n\\n        (uint256 _withdrawnAmount, uint256 _decreasedValue) = _withdrawFundsTo(\\n            msg.sender,\\n            _amount\\n        );\\n\\n        _cdp.totalDeposited = _cdp.totalDeposited.sub(\\n            _decreasedValue,\\n            \\\"Exceeds withdrawable amount\\\"\\n        );\\n        _cdp.checkHealth(\\n            _ctx,\\n            \\\"Action blocked: unhealthy collateralization ratio\\\"\\n        );\\n        if (_amount >= flushActivator) {\\n            flushActiveVault();\\n        }\\n        emit TokensWithdrawn(\\n            msg.sender,\\n            _amount,\\n            _withdrawnAmount,\\n            _decreasedValue\\n        );\\n\\n        return (_withdrawnAmount, _decreasedValue);\\n    }\\n\\n    /// @dev Repays debt with the native and or synthetic token.\\n    ///\\n    /// An approval is required to transfer native tokens to the transmuter.\\n    function repay(uint256 _parentAmount, uint256 _childAmount)\\n        external\\n        nonReentrant\\n        noContractAllowed\\n        onPriceCheck\\n        expectInitialized\\n    {\\n        CDP.Data storage _cdp = _cdps[msg.sender];\\n        _cdp.update(_ctx);\\n\\n        if (_parentAmount > 0) {\\n            token.safeTransferFrom(msg.sender, address(this), _parentAmount);\\n            _distributeToTransmuter(_parentAmount);\\n        }\\n\\n        if (_childAmount > 0) {\\n            xtoken.burnFrom(msg.sender, _childAmount);\\n            //lower debt cause burn\\n            xtoken.lowerHasMinted(_childAmount);\\n        }\\n\\n        uint256 _totalAmount = _parentAmount.add(_childAmount);\\n        _cdp.totalDebt = _cdp.totalDebt.sub(_totalAmount, \\\"\\\");\\n\\n        emit TokensRepaid(msg.sender, _parentAmount, _childAmount);\\n    }\\n\\n    /// @dev Attempts to liquidate part of a CDP's collateral to pay back its debt.\\n    ///\\n    /// @param _amount the amount of collateral to attempt to liquidate.\\n    function liquidate(uint256 _amount)\\n        external\\n        nonReentrant\\n        noContractAllowed\\n        onPriceCheck\\n        expectInitialized\\n        returns (uint256, uint256)\\n    {\\n        CDP.Data storage _cdp = _cdps[msg.sender];\\n        _cdp.update(_ctx);\\n\\n        // don't attempt to liquidate more than is possible\\n        if (_amount > _cdp.totalDebt) {\\n            _amount = _cdp.totalDebt;\\n        }\\n        (uint256 _withdrawnAmount, uint256 _decreasedValue) = _withdrawFundsTo(\\n            address(this),\\n            _amount\\n        );\\n        //changed to new transmuter compatibillity\\n        _distributeToTransmuter(_withdrawnAmount);\\n\\n        _cdp.totalDeposited = _cdp.totalDeposited.sub(_decreasedValue, \\\"\\\");\\n        _cdp.totalDebt = _cdp.totalDebt.sub(_withdrawnAmount, \\\"\\\");\\n        emit TokensLiquidated(\\n            msg.sender,\\n            _amount,\\n            _withdrawnAmount,\\n            _decreasedValue\\n        );\\n\\n        return (_withdrawnAmount, _decreasedValue);\\n    }\\n\\n    /// @dev Mints synthetic tokens by either claiming credit or increasing the debt.\\n    ///\\n    /// Claiming credit will take priority over increasing the debt.\\n    ///\\n    /// This function reverts if the debt is increased and the CDP health check fails.\\n    ///\\n    /// @param _amount the amount of alchemic tokens to borrow.\\n    function mint(uint256 _amount)\\n        external\\n        nonReentrant\\n        notEmergency\\n        noContractAllowed\\n        onPriceCheck\\n        expectInitialized\\n    {\\n        CDP.Data storage _cdp = _cdps[msg.sender];\\n        _cdp.update(_ctx);\\n\\n        uint256 _totalCredit = _cdp.totalCredit;\\n\\n        if (_totalCredit < _amount) {\\n            uint256 _remainingAmount = _amount - _totalCredit;\\n\\n            if (borrowFee > 0) {\\n                uint256 _borrowFeeAmount = _remainingAmount.mul(borrowFee).div(\\n                    PERCENT_RESOLUTION\\n                );\\n                _remainingAmount = _remainingAmount.add(_borrowFeeAmount);\\n                xtoken.mint(rewards, _borrowFeeAmount);\\n            }\\n            _cdp.totalDebt = _cdp.totalDebt.add(_remainingAmount);\\n            _cdp.totalCredit = 0;\\n\\n            _cdp.checkHealth(_ctx, \\\"Alchemist: Loan-to-value ratio breached\\\");\\n        } else {\\n            _cdp.totalCredit = _totalCredit.sub(_amount);\\n        }\\n\\n        xtoken.mint(msg.sender, _amount);\\n        if (_amount >= flushActivator) {\\n            flushActiveVault();\\n        }\\n    }\\n\\n    /// @dev Gets the number of vaults in the vault list.\\n    ///\\n    /// @return the vault count.\\n    function vaultCount() external view returns (uint256) {\\n        return _vaults.length();\\n    }\\n\\n    /// @dev Get the adapter of a vault.\\n    ///\\n    /// @param _vaultId the identifier of the vault.\\n    ///\\n    /// @return the vault adapter.\\n    function getVaultAdapter(uint256 _vaultId)\\n        external\\n        view\\n        returns (IVaultAdapter)\\n    {\\n        AlchemistVault.Data storage _vault = _vaults.get(_vaultId);\\n        return _vault.adapter;\\n    }\\n\\n    /// @dev Get the total amount of the parent asset that has been deposited into a vault.\\n    ///\\n    /// @param _vaultId the identifier of the vault.\\n    ///\\n    /// @return the total amount of deposited tokens.\\n    function getVaultTotalDeposited(uint256 _vaultId)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        AlchemistVault.Data storage _vault = _vaults.get(_vaultId);\\n        return _vault.totalDeposited;\\n    }\\n\\n    /// @dev Get the total amount of collateral deposited into a CDP.\\n    ///\\n    /// @param _account the user account of the CDP to query.\\n    ///\\n    /// @return the deposited amount of tokens.\\n    function getCdpTotalDeposited(address _account)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        CDP.Data storage _cdp = _cdps[_account];\\n        return _cdp.totalDeposited;\\n    }\\n\\n    /// @dev Get the total amount of alchemic tokens borrowed from a CDP.\\n    ///\\n    /// @param _account the user account of the CDP to query.\\n    ///\\n    /// @return the borrowed amount of tokens.\\n    function getCdpTotalDebt(address _account) external view returns (uint256) {\\n        CDP.Data storage _cdp = _cdps[_account];\\n        return _cdp.getUpdatedTotalDebt(_ctx);\\n    }\\n\\n    /// @dev Get the total amount of credit that a CDP has.\\n    ///\\n    /// @param _account the user account of the CDP to query.\\n    ///\\n    /// @return the amount of credit.\\n    function getCdpTotalCredit(address _account)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        CDP.Data storage _cdp = _cdps[_account];\\n        return _cdp.getUpdatedTotalCredit(_ctx);\\n    }\\n\\n    /// @dev Gets the last recorded block of when a user made a deposit into their CDP.\\n    ///\\n    /// @param _account the user account of the CDP to query.\\n    ///\\n    /// @return the block number of the last deposit.\\n    function getCdpLastDeposit(address _account)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        CDP.Data storage _cdp = _cdps[_account];\\n        return _cdp.lastDeposit;\\n    }\\n\\n    /// @dev sends tokens to the transmuter\\n    ///\\n    /// benefit of great nation of transmuter\\n    function _distributeToTransmuter(uint256 amount) internal {\\n        token.approve(transmuter, amount);\\n        ITransmuter(transmuter).distribute(address(this), amount);\\n        // lower debt cause of 'burn'\\n        xtoken.lowerHasMinted(amount);\\n    }\\n\\n    /// @dev Checks that parent token is on peg.\\n    ///\\n    /// This is used over a modifier limit of pegged interactions.\\n    modifier onPriceCheck() {\\n        if (pegMinimum > 0) {\\n            require(\\n                ICurveToken(address(token)).get_virtual_price() > pegMinimum,\\n                \\\"off peg limitation\\\"\\n            );\\n        }\\n        _;\\n    }\\n    /// @dev Checks that caller is not a contract.\\n    ///\\n    /// This is used to prevent contracts from interacting.\\n    modifier noContractAllowed() {\\n        require(\\n            !address(msg.sender).isContract() && msg.sender == tx.origin,\\n            \\\"Sorry we do not accept contract!\\\"\\n        );\\n        _;\\n    }\\n    /// @dev Checks that the contract is in an initialized state.\\n    ///\\n    /// This is used over a modifier to reduce the size of the contract\\n    modifier expectInitialized() {\\n        require(initialized, \\\"Alchemist: not initialized.\\\");\\n        _;\\n    }\\n\\n    /// @dev Checks that the current message sender or caller is the governance address.\\n    ///\\n    ///\\n    modifier onlyGov() {\\n        require(msg.sender == governance, \\\"Alchemist: only governance.\\\");\\n        _;\\n    }\\n\\n    /// @dev Checks that the emergencyExit is not enabled.\\n    ///\\n    ///\\n    modifier notEmergency() {\\n        require(!emergencyExit, \\\"emergency pause enabled\\\");\\n        _;\\n    }\\n\\n    /// @dev Updates the active vault.\\n    ///\\n    /// This function reverts if the vault adapter is the zero address, if the token that the vault adapter accepts\\n    /// is not the token that this contract defines as the parent asset, or if the contract has not yet been initialized.\\n    ///\\n    /// @param _adapter the adapter for the new active vault.\\n    function _updateActiveVault(IVaultAdapter _adapter) internal {\\n        require(\\n            _adapter != IVaultAdapter(ZERO_ADDRESS),\\n            \\\"Alchemist: active vault address cannot be 0x0.\\\"\\n        );\\n        require(_adapter.token() == token, \\\"Alchemist: token mismatch.\\\");\\n\\n        _vaults.push(\\n            AlchemistVault.Data({adapter: _adapter, totalDeposited: 0})\\n        );\\n\\n        emit ActiveVaultUpdated(_adapter);\\n    }\\n\\n    /// @dev Recalls an amount of funds from a vault to this contract.\\n    ///\\n    /// @param _vaultId the identifier of the recall funds from.\\n    /// @param _amount  the amount of funds to recall from the vault.\\n    ///\\n    /// @return the amount of funds that were recalled from the vault to this contract and the decreased vault value.\\n    function _recallFunds(uint256 _vaultId, uint256 _amount)\\n        internal\\n        returns (uint256, uint256)\\n    {\\n        require(\\n            emergencyExit ||\\n                msg.sender == governance ||\\n                _vaultId != _vaults.lastIndex(),\\n            \\\"Alchemist: not an emergency, not governance, and user does not have permission to recall funds from active vault\\\"\\n        );\\n\\n        AlchemistVault.Data storage _vault = _vaults.get(_vaultId);\\n        (uint256 _withdrawnAmount, uint256 _decreasedValue) = _vault.withdraw(\\n            address(this),\\n            _amount\\n        );\\n\\n        emit FundsRecalled(_vaultId, _withdrawnAmount, _decreasedValue);\\n\\n        return (_withdrawnAmount, _decreasedValue);\\n    }\\n\\n    /// @dev Attempts to withdraw funds from the active vault to the recipient.\\n    ///\\n    /// Funds will be first withdrawn from this contracts balance and then from the active vault. This function\\n    /// is different from `recallFunds` in that it reduces the total amount of deposited tokens by the decreased\\n    /// value of the vault.\\n    ///\\n    /// @param _recipient the account to withdraw the funds to.\\n    /// @param _amount    the amount of funds to withdraw.\\n    function _withdrawFundsTo(address _recipient, uint256 _amount)\\n        internal\\n        returns (uint256, uint256)\\n    {\\n        // Pull the funds from the buffer.\\n        uint256 _bufferedAmount = Math.min(\\n            _amount,\\n            token.balanceOf(address(this))\\n        );\\n\\n        if (_recipient != address(this)) {\\n            ICurveToken(address(token)).remove_liquidity_one_coin(\\n                _bufferedAmount,\\n                sourceIndex,\\n                0,\\n                _recipient\\n            );\\n        }\\n\\n        uint256 _totalWithdrawn = _bufferedAmount;\\n        uint256 _totalDecreasedValue = _bufferedAmount;\\n\\n        uint256 _remainingAmount = _amount.sub(_bufferedAmount);\\n\\n        // Pull the remaining funds from the active vault.\\n        if (_remainingAmount > 0) {\\n            (uint256 _withdrawAmount, uint256 _decreasedValue) = _vaults\\n                .last()\\n                .withdraw(address(this), _remainingAmount);\\n\\n            ICurveToken(address(token)).remove_liquidity_one_coin(\\n                _withdrawAmount,\\n                sourceIndex,\\n                0,\\n                _recipient\\n            );\\n\\n            _totalWithdrawn = _totalWithdrawn.add(_withdrawAmount);\\n            _totalDecreasedValue = _totalDecreasedValue.add(_decreasedValue);\\n        }\\n\\n        totalDeposited = totalDeposited.sub(_totalDecreasedValue);\\n\\n        return (_totalWithdrawn, _totalDecreasedValue);\\n    }\\n}\\n\",\"keccak256\":\"0x622b616c8e2a890106f6b4a3b206b419af87bbe7df864c6928a9bc6ba155953b\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/ICurveToken.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.6.12;\\n\\ninterface ICurveToken {\\n    function add_liquidity(\\n        uint256[2] calldata token_amount,\\n        uint256 min_mint_amount\\n    ) external returns (uint256);\\n\\n    function remove_liquidity_one_coin(\\n        uint256 token_amount,\\n        int128 i,\\n        uint256 min_amount,\\n        address receiver\\n    ) external returns (uint256);\\n\\n    function get_virtual_price() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x615981541fb2ddeaa1b4c163f876c071c119c2c6eb7bb74b3f8dc20f18a58db6\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IDetailedERC20.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IDetailedERC20 is IERC20 {\\n  function name() external returns (string memory);\\n  function symbol() external returns (string memory);\\n  function decimals() external returns (uint8);\\n}\",\"keccak256\":\"0xd7da49ed3fd58d47d3d9d4c37d96841d117916cb3975648ec82d09a30dc5e63d\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IMintableERC20.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.6.12;\\n\\n\\nimport {IDetailedERC20} from \\\"./IDetailedERC20.sol\\\";\\n\\ninterface IMintableERC20 is IDetailedERC20{\\n  function mint(address _recipient, uint256 _amount) external;\\n  function burnFrom(address account, uint256 amount) external;\\n  function lowerHasMinted(uint256 amount)external;\\n}\\n\",\"keccak256\":\"0xf76928d144234f12c614f4793a99cc002628fca802582f83edf2d322b7ed9751\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/ITransmuter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.6.12;\\n\\ninterface ITransmuter  {\\n  function distribute (address origin, uint256 amount) external;\\n}\",\"keccak256\":\"0x6cbb6dda4377d625635453ceb7a8c8fc9c8d5c55d2e6ef0b11b5c9ccb270b59c\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IVaultAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"./IDetailedERC20.sol\\\";\\n\\n/// Interface for all Vault Adapter implementations.\\ninterface IVaultAdapter {\\n\\n  /// @dev Gets the token that the adapter accepts.\\n  function token() external view returns (IDetailedERC20);\\n\\n  /// @dev The total value of the assets deposited into the vault.\\n  function totalValue() external view returns (uint256);\\n\\n  /// @dev Deposits funds into the vault.\\n  ///\\n  /// @param _amount  the amount of funds to deposit.\\n  function deposit(uint256 _amount) external;\\n\\n  /// @dev Attempts to withdraw funds from the wrapped vault.\\n  ///\\n  /// The amount withdrawn to the recipient may be less than the amount requested.\\n  ///\\n  /// @param _recipient the recipient of the funds.\\n  /// @param _amount    the amount of funds to withdraw.\\n  function withdraw(address _recipient, uint256 _amount) external;\\n}\",\"keccak256\":\"0x2068367acc37e93a71f8c91343abdf2714895df202fff414d11c3f258af55f52\",\"license\":\"GPL-3.0\"},\"contracts/libraries/FixedPointMath.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.6.12;\\n\\nlibrary FixedPointMath {\\n  uint256 public constant DECIMALS = 18;\\n  uint256 public constant SCALAR = 10**DECIMALS;\\n\\n  struct FixedDecimal {\\n    uint256 x;\\n  }\\n\\n  function fromU256(uint256 value) internal pure returns (FixedDecimal memory) {\\n    uint256 x;\\n    require(value == 0 || (x = value * SCALAR) / SCALAR == value);\\n    return FixedDecimal(x);\\n  }\\n\\n  function maximumValue() internal pure returns (FixedDecimal memory) {\\n    return FixedDecimal(uint256(-1));\\n  }\\n\\n  function add(FixedDecimal memory self, FixedDecimal memory value) internal pure returns (FixedDecimal memory) {\\n    uint256 x;\\n    require((x = self.x + value.x) >= self.x);\\n    return FixedDecimal(x);\\n  }\\n\\n  function add(FixedDecimal memory self, uint256 value) internal pure returns (FixedDecimal memory) {\\n    return add(self, fromU256(value));\\n  }\\n\\n  function sub(FixedDecimal memory self, FixedDecimal memory value) internal pure returns (FixedDecimal memory) {\\n    uint256 x;\\n    require((x = self.x - value.x) <= self.x);\\n    return FixedDecimal(x);\\n  }\\n\\n  function sub(FixedDecimal memory self, uint256 value) internal pure returns (FixedDecimal memory) {\\n    return sub(self, fromU256(value));\\n  }\\n\\n  function mul(FixedDecimal memory self, uint256 value) internal pure returns (FixedDecimal memory) {\\n    uint256 x;\\n    require(value == 0 || (x = self.x * value) / value == self.x);\\n    return FixedDecimal(x);\\n  }\\n\\n  function div(FixedDecimal memory self, uint256 value) internal pure returns (FixedDecimal memory) {\\n    require(value != 0);\\n    return FixedDecimal(self.x / value);\\n  }\\n\\n  function cmp(FixedDecimal memory self, FixedDecimal memory value) internal pure returns (int256) {\\n    if (self.x < value.x) {\\n      return -1;\\n    }\\n\\n    if (self.x > value.x) {\\n      return 1;\\n    }\\n\\n    return 0;\\n  }\\n\\n  function decode(FixedDecimal memory self) internal pure returns (uint256) {\\n    return self.x / SCALAR;\\n  }\\n}\",\"keccak256\":\"0x23fb0a959da28d0330f9b6f4c45a982f46d1d8f501d99ebaa7e1f35b47d9cb70\",\"license\":\"Unlicense\"},\"contracts/libraries/alchemist/AlchemistVault.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.6.12;\\n\\nimport {Math} from \\\"@openzeppelin/contracts/math/Math.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport {SafeMath} from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport {IDetailedERC20} from \\\"../../interfaces/IDetailedERC20.sol\\\";\\nimport {IVaultAdapter} from \\\"../../interfaces/IVaultAdapter.sol\\\";\\n\\n// import \\\"hardhat/console.sol\\\";\\n\\n/// @title Pool\\n///\\n/// @dev A library which provides the AlchemistVault data struct and associated functions.\\nlibrary AlchemistVault {\\n    using AlchemistVault for Data;\\n    using AlchemistVault for List;\\n    using SafeERC20 for IDetailedERC20;\\n    using SafeMath for uint256;\\n\\n    struct Data {\\n        IVaultAdapter adapter;\\n        uint256 totalDeposited;\\n    }\\n\\n    struct List {\\n        Data[] elements;\\n    }\\n\\n    /// @dev Gets the total amount of assets deposited in the vault.\\n    ///\\n    /// @return the total assets.\\n    function totalValue(Data storage _self) internal view returns (uint256) {\\n        return _self.adapter.totalValue();\\n    }\\n\\n    /// @dev Gets the token that the vault accepts.\\n    ///\\n    /// @return the accepted token.\\n    function token(Data storage _self) internal view returns (IDetailedERC20) {\\n        return IDetailedERC20(_self.adapter.token());\\n    }\\n\\n    /// @dev Deposits funds from the caller into the vault.\\n    ///\\n    /// @param _amount the amount of funds to deposit.\\n    function deposit(Data storage _self, uint256 _amount)\\n        internal\\n        returns (uint256)\\n    {\\n        // Push the token that the vault accepts onto the stack to save gas.\\n        IDetailedERC20 _token = _self.token();\\n\\n        _token.safeTransfer(address(_self.adapter), _amount);\\n        _self.adapter.deposit(_amount);\\n        _self.totalDeposited = _self.totalDeposited.add(_amount);\\n\\n        return _amount;\\n    }\\n\\n    /// @dev Deposits the entire token balance of the caller into the vault.\\n    function depositAll(Data storage _self) internal returns (uint256) {\\n        IDetailedERC20 _token = _self.token();\\n        return _self.deposit(_token.balanceOf(address(this)));\\n    }\\n\\n    /// @dev Withdraw deposited funds from the vault.\\n    ///\\n    /// @param _recipient the account to withdraw the tokens to.\\n    /// @param _amount    the amount of tokens to withdraw.\\n    function withdraw(\\n        Data storage _self,\\n        address _recipient,\\n        uint256 _amount\\n    ) internal returns (uint256, uint256) {\\n        (uint256 _withdrawnAmount, uint256 _decreasedValue) = _self\\n            .directWithdraw(_recipient, _amount);\\n        _self.totalDeposited = _self.totalDeposited.sub(_decreasedValue);\\n        return (_withdrawnAmount, _decreasedValue);\\n    }\\n\\n    /// @dev Directly withdraw deposited funds from the vault.\\n    ///\\n    /// @param _recipient the account to withdraw the tokens to.\\n    /// @param _amount    the amount of tokens to withdraw.\\n    function directWithdraw(\\n        Data storage _self,\\n        address _recipient,\\n        uint256 _amount\\n    ) internal returns (uint256, uint256) {\\n        IDetailedERC20 _token = _self.token();\\n\\n        uint256 _startingBalance = _token.balanceOf(_recipient);\\n        uint256 _startingTotalValue = _self.totalValue();\\n\\n        _self.adapter.withdraw(_recipient, _amount);\\n\\n        uint256 _withdrawnAmount = _token.balanceOf(_recipient).sub(\\n            _startingBalance\\n        );\\n        uint256 _decreasedValue = _startingTotalValue.sub(_self.totalValue());\\n\\n        return (_withdrawnAmount, _decreasedValue);\\n    }\\n\\n    /// @dev Withdraw all the deposited funds from the vault.\\n    ///\\n    /// @param _recipient the account to withdraw the tokens to.\\n    function withdrawAll(Data storage _self, address _recipient)\\n        internal\\n        returns (uint256, uint256)\\n    {\\n        return _self.withdraw(_recipient, _self.totalDeposited);\\n    }\\n\\n    /// @dev Harvests yield from the vault.\\n    ///\\n    /// @param _recipient the account to withdraw the harvested yield to.\\n    function harvest(Data storage _self, address _recipient)\\n        internal\\n        returns (uint256, uint256)\\n    {\\n        if (_self.totalValue() <= _self.totalDeposited) {\\n            return (0, 0);\\n        }\\n        uint256 _withdrawAmount = _self.totalValue().sub(_self.totalDeposited);\\n        return _self.directWithdraw(_recipient, _withdrawAmount);\\n    }\\n\\n    /// @dev Adds a element to the list.\\n    ///\\n    /// @param _element the element to add.\\n    function push(List storage _self, Data memory _element) internal {\\n        _self.elements.push(_element);\\n    }\\n\\n    /// @dev Gets a element from the list.\\n    ///\\n    /// @param _index the index in the list.\\n    ///\\n    /// @return the element at the specified index.\\n    function get(List storage _self, uint256 _index)\\n        internal\\n        view\\n        returns (Data storage)\\n    {\\n        return _self.elements[_index];\\n    }\\n\\n    /// @dev Gets the last element in the list.\\n    ///\\n    /// This function will revert if there are no elements in the list.\\n    ///\\n    /// @return the last element in the list.\\n    function last(List storage _self) internal view returns (Data storage) {\\n        return _self.elements[_self.lastIndex()];\\n    }\\n\\n    /// @dev Gets the index of the last element in the list.\\n    ///\\n    /// This function will revert if there are no elements in the list.\\n    ///\\n    /// @return the index of the last element.\\n    function lastIndex(List storage _self) internal view returns (uint256) {\\n        uint256 _length = _self.length();\\n        return _length.sub(1, \\\"AlchemistVault.List: empty\\\");\\n    }\\n\\n    /// @dev Gets the number of elements in the list.\\n    ///\\n    /// @return the number of elements.\\n    function length(List storage _self) internal view returns (uint256) {\\n        return _self.elements.length;\\n    }\\n}\\n\",\"keccak256\":\"0xc0855940ba179a2bd66d0e2027a3c97dcb6fb92acea86c07ff3dc59379996b16\",\"license\":\"GPL-3.0\"},\"contracts/libraries/alchemist/CDP.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.6.12;\\n\\nimport {Math} from \\\"@openzeppelin/contracts/math/Math.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport {SafeMath} from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\nimport {FixedPointMath} from \\\"../FixedPointMath.sol\\\";\\nimport {IDetailedERC20} from \\\"../../interfaces/IDetailedERC20.sol\\\";\\n\\n// import \\\"hardhat/console.sol\\\";\\n\\n/// @title CDP\\n///\\n/// @dev A library which provides the CDP data struct and associated functions.\\nlibrary CDP {\\n    using CDP for Data;\\n    using FixedPointMath for FixedPointMath.FixedDecimal;\\n    using SafeERC20 for IDetailedERC20;\\n    using SafeMath for uint256;\\n\\n    struct Context {\\n        FixedPointMath.FixedDecimal collateralizationLimit;\\n        FixedPointMath.FixedDecimal accumulatedYieldWeight;\\n    }\\n\\n    struct Data {\\n        uint256 totalDeposited;\\n        uint256 totalDebt;\\n        uint256 totalCredit;\\n        uint256 lastDeposit;\\n        FixedPointMath.FixedDecimal lastAccumulatedYieldWeight;\\n    }\\n\\n    function update(Data storage _self, Context storage _ctx) internal {\\n        uint256 _earnedYield = _self.getEarnedYield(_ctx);\\n        if (_earnedYield > _self.totalDebt) {\\n            _self.totalCredit = _self.totalCredit.add(\\n                _earnedYield.sub(_self.totalDebt)\\n            );\\n            _self.totalDebt = 0;\\n        } else {\\n            _self.totalDebt = _self.totalDebt.sub(_earnedYield);\\n        }\\n        _self.lastAccumulatedYieldWeight = _ctx.accumulatedYieldWeight;\\n    }\\n\\n    /// @dev Assures that the CDP is healthy.\\n    ///\\n    /// This function will revert if the CDP is unhealthy.\\n    function checkHealth(\\n        Data storage _self,\\n        Context storage _ctx,\\n        string memory _msg\\n    ) internal view {\\n        require(_self.isHealthy(_ctx), _msg);\\n    }\\n\\n    /// @dev Gets if the CDP is considered healthy.\\n    ///\\n    /// A CDP is healthy if its collateralization ratio is greater than the global collateralization limit.\\n    ///\\n    /// @return if the CDP is healthy.\\n    function isHealthy(Data storage _self, Context storage _ctx)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return\\n            _ctx.collateralizationLimit.cmp(\\n                _self.getCollateralizationRatio(_ctx)\\n            ) <= 0;\\n    }\\n\\n    function getUpdatedTotalDebt(Data storage _self, Context storage _ctx)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        uint256 _unclaimedYield = _self.getEarnedYield(_ctx);\\n        uint256 _currentTotalDebt = _self.totalDebt;\\n\\n        if (_unclaimedYield < _currentTotalDebt) {\\n            return _currentTotalDebt - _unclaimedYield;\\n        }\\n\\n        return 0;\\n    }\\n\\n    function getUpdatedTotalCredit(Data storage _self, Context storage _ctx)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        uint256 _unclaimedYield = _self.getEarnedYield(_ctx);\\n        if (_unclaimedYield == 0) {\\n            return _self.totalCredit;\\n        }\\n\\n        uint256 _currentTotalDebt = _self.totalDebt;\\n        if (_unclaimedYield <= _currentTotalDebt) {\\n            return 0;\\n        }\\n\\n        return _self.totalCredit + (_unclaimedYield - _currentTotalDebt);\\n    }\\n\\n    /// @dev Gets the amount of yield that a CDP has earned since the last time it was updated.\\n    ///\\n    /// @param _self the CDP to query.\\n    /// @param _ctx  the CDP context.\\n    ///\\n    /// @return the amount of earned yield.\\n    function getEarnedYield(Data storage _self, Context storage _ctx)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        FixedPointMath.FixedDecimal memory _currentAccumulatedYieldWeight = _ctx\\n            .accumulatedYieldWeight;\\n        FixedPointMath.FixedDecimal memory _lastAccumulatedYieldWeight = _self\\n            .lastAccumulatedYieldWeight;\\n\\n        if (\\n            _currentAccumulatedYieldWeight.cmp(_lastAccumulatedYieldWeight) == 0\\n        ) {\\n            return 0;\\n        }\\n\\n        return\\n            _currentAccumulatedYieldWeight\\n                .sub(_lastAccumulatedYieldWeight)\\n                .mul(_self.totalDeposited)\\n                .decode();\\n    }\\n\\n    /// @dev Gets a CDPs collateralization ratio.\\n    ///\\n    /// The collateralization ratio is defined as the ratio of collateral to debt. If the CDP has zero debt then this\\n    /// will return the maximum value of a fixed point integer.\\n    ///\\n    /// This function will use the updated total debt so an update before calling this function is not required.\\n    ///\\n    /// @param _self the CDP to query.\\n    ///\\n    /// @return a fixed point integer representing the collateralization ratio.\\n    function getCollateralizationRatio(Data storage _self, Context storage _ctx)\\n        internal\\n        view\\n        returns (FixedPointMath.FixedDecimal memory)\\n    {\\n        uint256 _totalDebt = _self.getUpdatedTotalDebt(_ctx);\\n        if (_totalDebt == 0) {\\n            return FixedPointMath.maximumValue();\\n        }\\n        return FixedPointMath.fromU256(_self.totalDeposited).div(_totalDebt);\\n    }\\n}\\n\",\"keccak256\":\"0xaaa3be5b58ff0730ca03c44a509772ed3ee4bab54805de758415caf6fa09f73d\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162004bc538038062004bc58339810160408190526200003491620001b7565b60016000556001600160a01b0382166200006b5760405162461bcd60e51b815260040162000062906200024f565b60405180910390fd5b6001600160a01b038116620000945760405162461bcd60e51b81526004016200006290620002dc565b600180546001600160a01b03199081166001600160a01b0389811691909117909255600280546001600160801b0319166001600160801b03600f8a900b161781556003805483168885161790556004805483168785161790556005805483168685161790556007805490921692841692909217905569152d02c7e14af6800000600d556000906200013b90670de0b6b3a7640000906200016e602090811b6200269317901c565b604080516020808201835290839052600f9290925580519182019052600090819052601055506200033f95505050505050565b6000826200017f57506000620001b1565b828202828482816200018d57fe5b0414620001ae5760405162461bcd60e51b815260040162000062906200029b565b90505b92915050565b60008060008060008060c08789031215620001d0578182fd5b8651620001dd8162000326565b80965050602087015180600f0b8114620001f5578283fd5b6040880151909550620002088162000326565b60608801519094506200021b8162000326565b60808801519093506200022e8162000326565b60a0880151909250620002418162000326565b809150509295509295509295565b6020808252602c908201527f416c6368656d6973743a20676f7665726e616e6365206164647265737320636160408201526b373737ba10313290183c181760a11b606082015260800190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6040820152607760f81b606082015260800190565b6020808252602a908201527f416c6368656d6973743a2073656e74696e656c20616464726573732063616e6e60408201526937ba10313290183c181760b11b606082015260800190565b6001600160a01b03811681146200033c57600080fd5b50565b614876806200034f6000396000f3fe608060405234801561001057600080fd5b50600436106103365760003560e01c8063792b55b6116101b2578063c869adb4116100f9578063f0d787a3116100a2578063fc00e8a01161007c578063fc00e8a01461060d578063fc0c546a14610620578063fefdc5d114610628578063ff50abdc1461063b57610336565b8063f0d787a3146105f5578063f39c38a0146105fd578063f58c251c1461060557610336565b8063ddc63262116100d3578063ddc63262146105c7578063e626648a146105da578063ec38a862146105e257610336565b8063c869adb41461058e578063ce5494bb146105a1578063d8aed145146105b457610336565b8063aa6e04341161015b578063b596291711610135578063b596291714610560578063b6b55f2514610568578063c4d66de81461057b57610336565b8063aa6e043414610527578063aaf166601461053a578063adb4a9ad1461054d57610336565b8063a0712d681161018c578063a0712d68146104f9578063a1e401a91461050c578063a7c6a1001461051f57610336565b8063792b55b6146104cb5780639a9af221146104de5780639ec5a894146104f157610336565b80633847f03811610281578063538ba4f91161022a5780635aa6e675116102045780635aa6e675146104ab5780635f8aaa69146104b35780636b9f96ea146104bb5780637239d2b9146104c357610336565b8063538ba4f91461048857806353ffa18b146104905780635641ec03146104a357610336565b806345f867b31161025b57806345f867b3146104585780634aaf7c65146104605780634c3a8e021461047557610336565b80633847f0381461042a578063415f12401461043257806345ee07551461044557610336565b806322c37b75116102e35780632e1a7d4d116102bd5780632e1a7d4d146103ee57806330d4d1901461040f57806334024e021461041757610336565b806322c37b75146103c0578063238efcbc146103d35780632670fdd8146103db57610336565b8063158ef93e11610314578063158ef93e146103815780631718a68f146103965780631c2066be146103ab57610336565b80630510111e1461033b57806309dac061146103595780630abb60351461036e575b600080fd5b610343610643565b604051610350919061472b565b60405180910390f35b61036c610367366004613c91565b61064f565b005b61036c61037c366004613c91565b610771565b61038961087f565b6040516103509190613e1e565b61039e610888565b6040516103509190613d6e565b6103b36108a4565b6040516103509190613e29565b61036c6103ce366004613d01565b6108ad565b61036c610903565b61039e6103e9366004613d01565b6109c5565b6104016103fc366004613d01565b6109f1565b604051610350929190614768565b610343610c07565b61036c610425366004613d01565b610c13565b610343610c99565b610401610440366004613d01565b610c9f565b61036c610453366004613cad565b610f0d565b610343610fe0565b610468610fe6565b6040516103509190614721565b610401610483366004613d01565b611002565b61039e6110b0565b61036c61049e366004613d01565b6110b5565b6103896111ca565b61039e6111d8565b61039e6111f4565b610343611210565b61039e6112e4565b61036c6104d9366004613d01565b611300565b6103436104ec366004613c91565b6113c2565b61039e6113ed565b61036c610507366004613d01565b611409565b61034361051a366004613c91565b6117e9565b610343611811565b610343610535366004613c91565b611822565b610343610548366004613d01565b611859565b61036c61055b366004613c91565b611872565b610343611980565b61036c610576366004613d01565b611986565b61036c610589366004613c91565b611ccd565b61036c61059c366004613d01565b611e30565b61036c6105af366004613c91565b611ef2565b61036c6105c2366004613d31565b611f8b565b6104016105d5366004613d01565b61230a565b610343612464565b61036c6105f0366004613c91565b61246a565b610343612578565b61039e61257e565b61039e61259a565b61034361061b366004613c91565b6125b6565b61039e6125e6565b610401610636366004613d31565b612602565b61034361268d565b673782dace9d90000081565b60055473ffffffffffffffffffffffffffffffffffffffff1633146106a9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106a090614224565b60405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff81166106f6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106a090614508565b600780547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83161790556040517fdc117600f93282860144d2cd2745f8e2e15c3ca2a32b4290c30f7cd1ae7ffcb990610766908390613d6e565b60405180910390a150565b60055473ffffffffffffffffffffffffffffffffffffffff1633146107c2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106a090614224565b73ffffffffffffffffffffffffffffffffffffffff811661080f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106a090613ee5565b600680547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83161790556040517fc9e2377236eab4280090ce8f2317332649736d92f00dcf20a8dd6684ec5e783990610766908390613d6e565b600e5460ff1681565b60045473ffffffffffffffffffffffffffffffffffffffff1681565b600254600f0b81565b60055473ffffffffffffffffffffffffffffffffffffffff1633146108fe576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106a090614224565b600d55565b60065473ffffffffffffffffffffffffffffffffffffffff16338114610955576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106a090614315565b600580547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83161790556040517f9d3e522e1e47a2f6009739342b9cc7b252a1888154e843ab55ee1c81745795ab90610766908390613d6e565b6000806109d36012846126f0565b5473ffffffffffffffffffffffffffffffffffffffff169392505050565b60008060026000541415610a31576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106a090614565565b6002600055610a3f33612717565b158015610a4b57503332145b610a81576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106a090614033565b600e5460ff16610abd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106a090614474565b33600090815260116020526040902060038101544311610b09576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106a09061434c565b610b1481600f61271d565b600080610b21338761278f565b60408051808201909152601b81527f4578636565647320776974686472617761626c6520616d6f756e74000000000060208201528554929450909250610b6991908390612a4b565b835560408051606081019091526031808252610b9291600f916147e96020830139859190612a91565b600d548610610ba557610ba3612ada565b505b3373ffffffffffffffffffffffffffffffffffffffff167fb3ad69dc1d2c6b1f5f5b0927ffd8ee8f1437a156253c8f6dccc75e6f8e4fd38b878484604051610bef93929190614776565b60405180910390a26001600055909590945092505050565b670de0b6b3a764000081565b60055473ffffffffffffffffffffffffffffffffffffffff163314610c64576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106a090614224565b60138190556040517f5ed2ed42a3f6f395decb1c6e41b55d52532f9a0bd40293262be91d7b881264039061076690839061472b565b60135481565b60008060026000541415610cdf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106a090614565565b6002600055610ced33612717565b158015610cf957503332145b610d2f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106a090614033565b60135415610e1157601354600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663bb7b8b806040518163ffffffff1660e01b815260040160206040518083038186803b158015610da257600080fd5b505afa158015610db6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dda9190613d19565b11610e11576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106a090614630565b600e5460ff16610e4d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106a090614474565b336000908152601160205260409020610e6781600f61271d565b8060010154841115610e7b57806001015493505b600080610e88308761278f565b91509150610e9582612b33565b6040805160208101909152600081528354610eb1918390612a4b565b83556040805160208101909152600081526001840154610ed2918490612a4b565b600184015560405133907f3ea051727656be6fd11c2260f244f29ff3c70d1fb077bfa73e89d554e9bb95c790610bef90899086908690614776565b60055473ffffffffffffffffffffffffffffffffffffffff16331480610f4a575060075473ffffffffffffffffffffffffffffffffffffffff1633145b610f80576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106a09061434c565b600e80547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff16610100831515021790556040517ff0064f2efd0da4bc63eecf2e75590fe8a308eaa526a51c334e50eec09a71104990610766908390613e1e565b61271081565b610fee613c60565b506040805160208101909152600f54815290565b60008060026000541415611042576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106a090614565565b6002600055600e5460ff16611083576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106a090614474565b60006110906012856126f0565b90506110a0848260010154612cf6565b6001600055909590945092505050565b600081565b60055473ffffffffffffffffffffffffffffffffffffffff163314611106576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106a090614224565b670de0b6b3a7640000811015611148576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106a09061416a565b673782dace9d90000081111561118a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106a0906141c7565b60408051602081018252829052600f829055517ff78180bc708b1292177c888900951cd66a39faf48dc7b6d111e93285dbbe55a09061076690839061472b565b600e54610100900460ff1681565b60055473ffffffffffffffffffffffffffffffffffffffff1681565b60015473ffffffffffffffffffffffffffffffffffffffff1681565b60006002600054141561124f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106a090614565565b6002600055600e54610100900460ff1615611296576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106a09061435d565b600e5460ff166112d2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106a090614474565b6112da612ada565b9050600160005590565b60085473ffffffffffffffffffffffffffffffffffffffff1681565b60055473ffffffffffffffffffffffffffffffffffffffff163314611351576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106a090614224565b61271081111561138d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106a0906142b8565b600a8190556040517fc36862a253ff42cc71f4f200d3c62e8e5eaaece01041fc6900aeace64ade72a89061076690839061472b565b73ffffffffffffffffffffffffffffffffffffffff1660009081526011602052604090206003015490565b60095473ffffffffffffffffffffffffffffffffffffffff1681565b60026000541415611446576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106a090614565565b6002600055600e54610100900460ff161561148d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106a09061435d565b61149633612717565b1580156114a257503332145b6114d8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106a090614033565b601354156115ba57601354600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663bb7b8b806040518163ffffffff1660e01b815260040160206040518083038186803b15801561154b57600080fd5b505afa15801561155f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115839190613d19565b116115ba576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106a090614630565b600e5460ff166115f6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106a090614474565b33600090815260116020526040902061161081600f61271d565b60028101548281101561173357600b5481840390156116eb57600061164c612710611646600b548561269390919063ffffffff16565b90612dd9565b90506116588282612e25565b600480546009546040517f40c10f1900000000000000000000000000000000000000000000000000000000815293955073ffffffffffffffffffffffffffffffffffffffff918216936340c10f19936116b79390921691869101613d8f565b600060405180830381600087803b1580156116d157600080fd5b505af11580156116e5573d6000803e3d6000fd5b50505050505b60018301546116fa9082612e25565b6001840155600060028401556040805160608101909152602780825261172d91600f9161481a6020830139859190612a91565b50611743565b61173d8184612e64565b60028301555b600480546040517f40c10f1900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff909116916340c10f199161179a913391889101613d8f565b600060405180830381600087803b1580156117b457600080fd5b505af11580156117c8573d6000803e3d6000fd5b50505050600d5483106117df576117dd612ada565b505b5050600160005550565b73ffffffffffffffffffffffffffffffffffffffff1660009081526011602052604090205490565b600061181d6012612ea6565b905090565b73ffffffffffffffffffffffffffffffffffffffff8116600090815260116020526040812061185281600f612eaa565b9392505050565b6000806118676012846126f0565b600101549392505050565b60055473ffffffffffffffffffffffffffffffffffffffff1633146118c3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106a090614224565b73ffffffffffffffffffffffffffffffffffffffff8116611910576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106a090613e88565b600880547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83161790556040517fe42bb1780117f5788c6e0042e955291223819875891ddf465b8e4fbb85a933e990610766908390613d6e565b600a5481565b600260005414156119c3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106a090614565565b6002600055600e54610100900460ff1615611a0a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106a09061435d565b611a1333612717565b158015611a1f57503332145b611a55576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106a090614033565b600e5460ff16611a91576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106a090614474565b336000908152601160205260409020611aab81600f61271d565b600154611ad09073ffffffffffffffffffffffffffffffffffffffff16333085612eda565b6001546003546040517f095ea7b300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9283169263095ea7b392611b2c929116908690600401613d8f565b602060405180830381600087803b158015611b4657600080fd5b505af1158015611b5a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b7e9190613cc9565b50611b87613c73565b6002805484918391600f90810b900b908110611b9f57fe5b60200201526003546040517f0b4c7e4d00000000000000000000000000000000000000000000000000000000815260009173ffffffffffffffffffffffffffffffffffffffff1690630b4c7e4d90611bfd9085908590600401613de6565b602060405180830381600087803b158015611c1757600080fd5b505af1158015611c2b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c4f9190613d19565b9050600d548110611c6457611c62612ada565b505b600c54611c719082612e25565b600c558254611c809082612e25565b835543600384015560405133907f59062170a285eb80e8c6b8ced60428442a51910635005233fc4ce084a475845e90611cba90849061472b565b60405180910390a2505060016000555050565b60055473ffffffffffffffffffffffffffffffffffffffff163314611d1e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106a090614224565b600e5460ff1615611d5b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106a090614068565b60085473ffffffffffffffffffffffffffffffffffffffff16611daa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106a090613f42565b60095473ffffffffffffffffffffffffffffffffffffffff16611df9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106a090613fd6565b611e0281612f7d565b50600e80547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055565b60055473ffffffffffffffffffffffffffffffffffffffff163314611e81576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106a090614224565b612710811115611ebd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106a090614667565b600b8190556040517fe06319d5f3489148c5b3d388187bd61bb8e051b6f054d72e4eec0e07118a19039061076690839061472b565b600e5460ff16611f2e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106a090614474565b60055473ffffffffffffffffffffffffffffffffffffffff163314611f7f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106a090614224565b611f8881612f7d565b50565b60026000541415611fc8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106a090614565565b6002600055611fd633612717565b158015611fe257503332145b612018576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106a090614033565b601354156120fa57601354600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663bb7b8b806040518163ffffffff1660e01b815260040160206040518083038186803b15801561208b57600080fd5b505afa15801561209f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120c39190613d19565b116120fa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106a090614630565b600e5460ff16612136576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106a090614474565b33600090815260116020526040902061215081600f61271d565b82156121845760035461217b9073ffffffffffffffffffffffffffffffffffffffff16333086612eda565b61218483612b33565b811561229b57600480546040517f79cc679000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff909116916379cc6790916121e1913391879101613d8f565b600060405180830381600087803b1580156121fb57600080fd5b505af115801561220f573d6000803e3d6000fd5b5050600480546040517f288aafcb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff909116935063288aafcb92506122689186910161472b565b600060405180830381600087803b15801561228257600080fd5b505af1158015612296573d6000803e3d6000fd5b505050505b60006122a78484612e25565b90506122d181604051806020016040528060008152508460010154612a4b9092919063ffffffff16565b600183015560405133907fbade234341a40ca3c71df59b3ca02b8bb65b491a098af970953228b4f4a5d38f90611cba9087908790614768565b600e54600090819060ff1661234b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106a090614474565b60006123586012856126f0565b90506000806123678330613136565b9092509050811561242057600061238f612710611646600a548661269390919063ffffffff16565b9050600061239d8483612e64565b90506123a7613c60565b6123bc600c546123b684613189565b906131cb565b604080516020810190915260105481529091506123d990826131ff565b51601055821561240d5760095460035461240d9173ffffffffffffffffffffffffffffffffffffffff91821691168561322f565b811561241c5761241c82612b33565b5050505b7f11d2034f4471d11a13f0f1798ceaf0c9db2812d450a0681958ce7d4f2fb97f098282604051612451929190614768565b60405180910390a1909350915050915091565b600b5481565b60055473ffffffffffffffffffffffffffffffffffffffff1633146124bb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106a090614224565b73ffffffffffffffffffffffffffffffffffffffff8116612508576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106a0906146c4565b600980547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83161790556040517f05f3326e0527f309d4015dee3bc3f36e650b53fc823bab69c99847814acfafdf90610766908390613d6e565b600d5481565b60065473ffffffffffffffffffffffffffffffffffffffff1681565b60075473ffffffffffffffffffffffffffffffffffffffff1681565b73ffffffffffffffffffffffffffffffffffffffff8116600090815260116020526040812061185281600f613253565b60035473ffffffffffffffffffffffffffffffffffffffff1681565b60008060026000541415612642576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106a090614565565b6002600055600e5460ff16612683576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106a090614474565b6110a08484612cf6565b600c5481565b6000826126a2575060006126ea565b828202828482816126af57fe5b04146126e7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106a09061425b565b90505b92915050565b600082600001828154811061270157fe5b9060005260206000209060020201905092915050565b3b151590565b6000612729838361329a565b9050826001015481111561276d5761275c612751846001015483612e6490919063ffffffff16565b600285015490612e25565b600284015560006001840155612782565b600183015461277c9082612e64565b60018401555b5060010154600490910155565b6003546040517f70a082310000000000000000000000000000000000000000000000000000000081526000918291829161284591869173ffffffffffffffffffffffffffffffffffffffff16906370a08231906127f0903090600401613d6e565b60206040518083038186803b15801561280857600080fd5b505afa15801561281c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128409190613d19565b613313565b905073ffffffffffffffffffffffffffffffffffffffff8516301461291a576003546002546040517f081579a500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9092169163081579a5916128c6918591600f0b906000908b90600401614734565b602060405180830381600087803b1580156128e057600080fd5b505af11580156128f4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129189190613d19565b505b808060006129288783612e64565b90508015612a2c5760008061294930846129426012613329565b9190613354565b91509150600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663081579a583600260009054906101000a9004600f0b60008e6040518563ffffffff1660e01b81526004016129be9493929190614734565b602060405180830381600087803b1580156129d857600080fd5b505af11580156129ec573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a109190613d19565b50612a1b8583612e25565b9450612a278482612e25565b935050505b600c54612a399083612e64565b600c55509093509150505b9250929050565b60008184841115612a89576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106a09190613e37565b505050900390565b612a9b838361338a565b8190612ad4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106a09190613e37565b50505050565b600080612ae76012613329565b90506000612af4826133b8565b90507f860f4701faa0ecdeecd9e9eaae11a8612bbd01c663081f7c0c4e4873df653d6981604051612b25919061472b565b60405180910390a191505090565b6003546008546040517f095ea7b300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9283169263095ea7b392612b8f929116908590600401613d8f565b602060405180830381600087803b158015612ba957600080fd5b505af1158015612bbd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612be19190613cc9565b506008546040517ffb93210800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9091169063fb93210890612c3a9030908590600401613d8f565b600060405180830381600087803b158015612c5457600080fd5b505af1158015612c68573d6000803e3d6000fd5b5050600480546040517f288aafcb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff909116935063288aafcb9250612cc19185910161472b565b600060405180830381600087803b158015612cdb57600080fd5b505af1158015612cef573d6000803e3d6000fd5b5050505050565b600e546000908190610100900460ff1680612d28575060055473ffffffffffffffffffffffffffffffffffffffff1633145b80612d3c5750612d386012613459565b8414155b612d72576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106a0906143cb565b6000612d7f6012866126f0565b9050600080612d8f833088613354565b91509150867fccbd929f935422b28ee209a0db0556280b0a3d9bc4da58f1d3f0ab4f8a4996478383604051612dc5929190614768565b60405180910390a290969095509350505050565b6000808211612e14576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106a090614133565b818381612e1d57fe5b049392505050565b6000828201838110156126e7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106a090613f9f565b600082821115612ea0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106a09061409f565b50900390565b5490565b600080612eb7848461329a565b600185015490915080821015612ecf570390506126ea565b506000949350505050565b612ad4846323b872dd60e01b858585604051602401612efb93929190613db5565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909316929092179091526134b2565b73ffffffffffffffffffffffffffffffffffffffff8116612fca576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106a0906145d3565b600354604080517ffc0c546a000000000000000000000000000000000000000000000000000000008152905173ffffffffffffffffffffffffffffffffffffffff9283169284169163fc0c546a916004808301926020929190829003018186803b15801561303757600080fd5b505afa15801561304b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061306f9190613ce5565b73ffffffffffffffffffffffffffffffffffffffff16146130bc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106a09061459c565b6040805180820190915273ffffffffffffffffffffffffffffffffffffffff82168152600060208201526130f290601290613568565b60405173ffffffffffffffffffffffffffffffffffffffff8216907f0821015de34e20b0878a40f6f165801417f53b2017016d7321cacee989c8cfa790600090a250565b6000808360010154613147856135d0565b1161315757506000905080612a44565b6000613170856001015461316a876135d0565b90612e64565b905061317d858583613672565b92509250509250929050565b613191613c60565b60008215806131ae575050670de0b6b3a764000082810290810483145b6131b757600080fd5b604080516020810190915290815292915050565b6131d3613c60565b816131dd57600080fd5b6040518060200160405280838560000151816131f557fe5b0490529392505050565b613207613c60565b8251825181019081101561321a57600080fd5b60408051602081019091529081529392505050565b61324e8363a9059cbb60e01b8484604051602401612efb929190613d8f565b505050565b600080613260848461329a565b90508061327357505060028201546126ea565b600184015480821161328a576000925050506126ea565b6002850154910301905092915050565b60006132a4613c60565b506040805160208101909152600183015481526132bf613c60565b506040805160208101909152600485015481526132dc828261385b565b6132eb576000925050506126ea565b845461330a90613305906132ff85856138aa565b906138c5565b6138f3565b95945050505050565b600081831061332257816126e7565b5090919050565b60008161333581613459565b8154811061333f57fe5b90600052602060002090600202019050919050565b6000808080613364878787613672565b600189015491935091506133789082612e64565b60018801559092509050935093915050565b6000806133af61339a8585613902565b6040805160208101909152855481529061385b565b13159392505050565b6000806133c483613946565b90506118528173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016134029190613d6e565b60206040518083038186803b15801561341a57600080fd5b505afa15801561342e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134529190613d19565b84906139e8565b60008061346583612ea6565b905061185260016040518060400160405280601a81526020017f416c6368656d6973745661756c742e4c6973743a20656d70747900000000000081525083612a4b9092919063ffffffff16565b6060613514826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16613ac29092919063ffffffff16565b80519091501561324e57808060200190518101906135329190613cc9565b61324e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106a0906144ab565b8154600180820184556000938452602093849020835160029093020180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff9093169290921782559190920151910155565b8054604080517fd4c3eea0000000000000000000000000000000000000000000000000000000008152905160009273ffffffffffffffffffffffffffffffffffffffff169163d4c3eea0916004808301926020929190829003018186803b15801561363a57600080fd5b505afa15801561364e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126ea9190613d19565b600080600061368086613946565b905060008173ffffffffffffffffffffffffffffffffffffffff166370a08231876040518263ffffffff1660e01b81526004016136bd9190613d6e565b60206040518083038186803b1580156136d557600080fd5b505afa1580156136e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061370d9190613d19565b9050600061371a886135d0565b88546040517ff3fef3a300000000000000000000000000000000000000000000000000000000815291925073ffffffffffffffffffffffffffffffffffffffff169063f3fef3a390613772908a908a90600401613d8f565b600060405180830381600087803b15801561378c57600080fd5b505af11580156137a0573d6000803e3d6000fd5b505050506000613833838573ffffffffffffffffffffffffffffffffffffffff166370a082318b6040518263ffffffff1660e01b81526004016137e39190613d6e565b60206040518083038186803b1580156137fb57600080fd5b505afa15801561380f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061316a9190613d19565b9050600061384a6138438b6135d0565b8490612e64565b919a91995090975050505050505050565b80518251600091111561388f57507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6126ea565b8151835111156138a1575060016126ea565b50600092915050565b6138b2613c60565b8251825181039081111561321a57600080fd5b6138cd613c60565b60008215806138ea5750508251828102908382816138e757fe5b04145b61321a57600080fd5b51670de0b6b3a7640000900490565b61390a613c60565b60006139168484612eaa565b90508061392d57613925613ad1565b9150506126ea565b61393e816123b68660000154613189565b949350505050565b8054604080517ffc0c546a000000000000000000000000000000000000000000000000000000008152905160009273ffffffffffffffffffffffffffffffffffffffff169163fc0c546a916004808301926020929190829003018186803b1580156139b057600080fd5b505afa1580156139c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126ea9190613ce5565b6000806139f484613946565b8454909150613a1d9073ffffffffffffffffffffffffffffffffffffffff80841691168561322f565b83546040517fb6b55f2500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9091169063b6b55f2590613a7290869060040161472b565b600060405180830381600087803b158015613a8c57600080fd5b505af1158015613aa0573d6000803e3d6000fd5b5050506001850154613ab3915084612e25565b60018501555081905092915050565b606061393e8484600085613b0b565b613ad9613c60565b5060408051602081019091527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff815290565b606082471015613b47576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106a0906140d6565b613b5085612717565b613b86576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106a090614394565b600060608673ffffffffffffffffffffffffffffffffffffffff168587604051613bb09190613d52565b60006040518083038185875af1925050503d8060008114613bed576040519150601f19603f3d011682016040523d82523d6000602084013e613bf2565b606091505b5091509150613c02828286613c0d565b979650505050505050565b60608315613c1c575081611852565b825115613c2c5782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106a09190613e37565b6040518060200160405280600081525090565b60405180604001604052806002906020820280368337509192915050565b600060208284031215613ca2578081fd5b81356126e7816147b8565b600060208284031215613cbe578081fd5b81356126e7816147da565b600060208284031215613cda578081fd5b81516126e7816147da565b600060208284031215613cf6578081fd5b81516126e7816147b8565b600060208284031215613d12578081fd5b5035919050565b600060208284031215613d2a578081fd5b5051919050565b60008060408385031215613d43578081fd5b50508035926020909101359150565b60008251613d6481846020870161478c565b9190910192915050565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b73ffffffffffffffffffffffffffffffffffffffff929092168252602082015260400190565b73ffffffffffffffffffffffffffffffffffffffff9384168152919092166020820152604081019190915260600190565b60608101818460005b6002811015613e0e578151835260209283019290910190600101613def565b5050508260408301529392505050565b901515815260200190565b600f9190910b815260200190565b6000602082528251806020840152613e5681604085016020870161478c565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b6020808252602c908201527f416c6368656d6973743a207472616e736d75746572206164647265737320636160408201527f6e6e6f74206265203078302e0000000000000000000000000000000000000000606082015260800190565b6020808252602c908201527f416c6368656d6973743a20676f7665726e616e6365206164647265737320636160408201527f6e6e6f74206265203078302e0000000000000000000000000000000000000000606082015260800190565b60208082526036908201527f416c6368656d6973743a2063616e6e6f7420696e697469616c697a652074726160408201527f6e736d75746572206164647265737320746f2030783000000000000000000000606082015260800190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b60208082526033908201527f416c6368656d6973743a2063616e6e6f7420696e697469616c697a652072657760408201527f61726473206164647265737320746f2030783000000000000000000000000000606082015260800190565b6020808252818101527f536f72727920776520646f206e6f742061636365707420636f6e747261637421604082015260600190565b6020808252601e908201527f416c6368656d6973743a20616c726561647920696e697469616c697a65640000604082015260600190565b6020808252601e908201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604082015260600190565b60208082526026908201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60408201527f722063616c6c0000000000000000000000000000000000000000000000000000606082015260800190565b6020808252601a908201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604082015260600190565b60208082526031908201527f416c6368656d6973743a20636f6c6c61746572616c697a6174696f6e206c696d60408201527f69742062656c6f77206d696e696d756d2e000000000000000000000000000000606082015260800190565b60208082526031908201527f416c6368656d6973743a20636f6c6c61746572616c697a6174696f6e206c696d60408201527f69742061626f7665206d6178696d756d2e000000000000000000000000000000606082015260800190565b6020808252601b908201527f416c6368656d6973743a206f6e6c7920676f7665726e616e63652e0000000000604082015260600190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f60408201527f7700000000000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526025908201527f416c6368656d6973743a2068617276657374206665652061626f7665206d617860408201527f696d756d2e000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252601f908201527f73656e646572206973206e6f742070656e64696e67476f7665726e616e636500604082015260600190565b602080825260009082015260400190565b60208082526017908201527f656d657267656e637920706175736520656e61626c6564000000000000000000604082015260600190565b6020808252601d908201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604082015260600190565b60208082526070908201527f416c6368656d6973743a206e6f7420616e20656d657267656e63792c206e6f7460408201527f20676f7665726e616e63652c20616e64207573657220646f6573206e6f74206860608201527f617665207065726d697373696f6e20746f20726563616c6c2066756e6473206660808201527f726f6d20616374697665207661756c740000000000000000000000000000000060a082015260c00190565b6020808252601b908201527f416c6368656d6973743a206e6f7420696e697469616c697a65642e0000000000604082015260600190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60408201527f6f74207375636365656400000000000000000000000000000000000000000000606082015260800190565b6020808252602a908201527f416c6368656d6973743a2073656e74696e656c20616464726573732063616e6e60408201527f6f74206265203078302e00000000000000000000000000000000000000000000606082015260800190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b6020808252601a908201527f416c6368656d6973743a20746f6b656e206d69736d617463682e000000000000604082015260600190565b6020808252602e908201527f416c6368656d6973743a20616374697665207661756c7420616464726573732060408201527f63616e6e6f74206265203078302e000000000000000000000000000000000000606082015260800190565b60208082526012908201527f6f666620706567206c696d69746174696f6e0000000000000000000000000000604082015260600190565b60208082526024908201527f416c6368656d6973743a20626f72726f77206665652061626f7665206d61786960408201527f6d756d2e00000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526029908201527f416c6368656d6973743a207265776172647320616464726573732063616e6e6f60408201527f74206265203078302e0000000000000000000000000000000000000000000000606082015260800190565b9051815260200190565b90815260200190565b938452600f9290920b6020840152604083015273ffffffffffffffffffffffffffffffffffffffff16606082015260800190565b918252602082015260400190565b9283526020830191909152604082015260600190565b60005b838110156147a757818101518382015260200161478f565b83811115612ad45750506000910152565b73ffffffffffffffffffffffffffffffffffffffff81168114611f8857600080fd5b8015158114611f8857600080fdfe416374696f6e20626c6f636b65643a20756e6865616c74687920636f6c6c61746572616c697a6174696f6e20726174696f416c6368656d6973743a204c6f616e2d746f2d76616c756520726174696f206272656163686564a26469706673582212200b34eff7cc46e13d33530e9fa88b93f62d7c8e7d046d19598fb936f10380cd0d64736f6c634300060c0033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "acceptGovernance()": {
        "details": "Accepts the role as governance. This function reverts if the caller is not the new pending governance."
      },
      "collateralizationLimit()": {
        "details": "Gets the collateralization limit. The collateralization limit is the minimum ratio of collateral to debt that is allowed by the system.",
        "returns": {
          "_0": "the collateralization limit."
        }
      },
      "deposit(uint256)": {
        "details": "Deposits collateral into a CDP. This function reverts if an emergency exit is active. This is in place to prevent the potential loss of additional funds.",
        "params": {
          "_amount": "the amount of collateral to deposit."
        }
      },
      "flush()": {
        "details": "Flushes buffered tokens to the active vault. This function reverts if an emergency exit is active. This is in place to prevent the potential loss of additional funds.",
        "returns": {
          "_0": "the amount of tokens flushed to the active vault."
        }
      },
      "getCdpLastDeposit(address)": {
        "details": "Gets the last recorded block of when a user made a deposit into their CDP.",
        "params": {
          "_account": "the user account of the CDP to query."
        },
        "returns": {
          "_0": "the block number of the last deposit."
        }
      },
      "getCdpTotalCredit(address)": {
        "details": "Get the total amount of credit that a CDP has.",
        "params": {
          "_account": "the user account of the CDP to query."
        },
        "returns": {
          "_0": "the amount of credit."
        }
      },
      "getCdpTotalDebt(address)": {
        "details": "Get the total amount of alchemic tokens borrowed from a CDP.",
        "params": {
          "_account": "the user account of the CDP to query."
        },
        "returns": {
          "_0": "the borrowed amount of tokens."
        }
      },
      "getCdpTotalDeposited(address)": {
        "details": "Get the total amount of collateral deposited into a CDP.",
        "params": {
          "_account": "the user account of the CDP to query."
        },
        "returns": {
          "_0": "the deposited amount of tokens."
        }
      },
      "getVaultAdapter(uint256)": {
        "details": "Get the adapter of a vault.",
        "params": {
          "_vaultId": "the identifier of the vault."
        },
        "returns": {
          "_0": "the vault adapter."
        }
      },
      "getVaultTotalDeposited(uint256)": {
        "details": "Get the total amount of the parent asset that has been deposited into a vault.",
        "params": {
          "_vaultId": "the identifier of the vault."
        },
        "returns": {
          "_0": "the total amount of deposited tokens."
        }
      },
      "harvest(uint256)": {
        "details": "Harvests yield from a vault.",
        "params": {
          "_vaultId": "the identifier of the vault to harvest from."
        },
        "returns": {
          "_0": "the amount of funds that were harvested from the vault."
        }
      },
      "initialize(address)": {
        "details": "Initializes the contract. This function checks that the transmuter and rewards have been set and sets up the active vault.",
        "params": {
          "_adapter": "the vault adapter of the active vault."
        }
      },
      "liquidate(uint256)": {
        "details": "Attempts to liquidate part of a CDP's collateral to pay back its debt.",
        "params": {
          "_amount": "the amount of collateral to attempt to liquidate."
        }
      },
      "migrate(address)": {
        "details": "Migrates the system to a new vault. This function reverts if the vault adapter is the zero address, if the token that the vault adapter accepts is not the token that this contract defines as the parent asset, or if the contract has not yet been initialized.",
        "params": {
          "_adapter": "the adapter for the vault the system will migrate to."
        }
      },
      "mint(uint256)": {
        "details": "Mints synthetic tokens by either claiming credit or increasing the debt. Claiming credit will take priority over increasing the debt. This function reverts if the debt is increased and the CDP health check fails.",
        "params": {
          "_amount": "the amount of alchemic tokens to borrow."
        }
      },
      "recall(uint256,uint256)": {
        "details": "Recalls an amount of deposited funds from a vault to this contract.",
        "params": {
          "_vaultId": "the identifier of the recall funds from."
        },
        "returns": {
          "_0": "the amount of funds that were recalled from the vault to this contract and the decreased vault value."
        }
      },
      "recallAll(uint256)": {
        "details": "Recalls all the deposited funds from a vault to this contract.",
        "params": {
          "_vaultId": "the identifier of the recall funds from."
        },
        "returns": {
          "_0": "the amount of funds that were recalled from the vault to this contract and the decreased vault value."
        }
      },
      "repay(uint256,uint256)": {
        "details": "Repays debt with the native and or synthetic token. An approval is required to transfer native tokens to the transmuter."
      },
      "setBorrowFee(uint256)": {
        "details": "Sets the borrow fee. This function reverts if the caller is not the current governance.",
        "params": {
          "_borrowFee": "the new borrow fee."
        }
      },
      "setCollateralizationLimit(uint256)": {
        "details": "Sets the collateralization limit. This function reverts if the caller is not the current governance or if the collateralization limit is outside of the accepted bounds.",
        "params": {
          "_limit": "the new collateralization limit."
        }
      },
      "setEmergencyExit(bool)": {
        "details": "Sets if the contract should enter emergency exit mode.",
        "params": {
          "_emergencyExit": "if the contract should enter emergency exit mode."
        }
      },
      "setFlushActivator(uint256)": {
        "details": "Sets the flushActivator.",
        "params": {
          "_flushActivator": "the new flushActivator."
        }
      },
      "setHarvestFee(uint256)": {
        "details": "Sets the harvest fee. This function reverts if the caller is not the current governance.",
        "params": {
          "_harvestFee": "the new harvest fee."
        }
      },
      "setPegMinimum(uint256)": {
        "details": "Set pegMinimum."
      },
      "setPendingGovernance(address)": {
        "details": "Sets the pending governance. This function reverts if the new pending governance is the zero address or the caller is not the current governance. This is to prevent the contract governance being set to the zero address which would deadlock privileged contract functionality.",
        "params": {
          "_pendingGovernance": "the new pending governance."
        }
      },
      "setRewards(address)": {
        "details": "Sets the rewards contract. This function reverts if the new rewards contract is the zero address or the caller is not the current governance.",
        "params": {
          "_rewards": "the new rewards contract."
        }
      },
      "setTransmuter(address)": {
        "details": "Sets the transmuter. This function reverts if the new transmuter is the zero address or the caller is not the current governance.",
        "params": {
          "_transmuter": "the new transmuter."
        }
      },
      "vaultCount()": {
        "details": "Gets the number of vaults in the vault list.",
        "returns": {
          "_0": "the vault count."
        }
      },
      "withdraw(uint256)": {
        "details": "Attempts to withdraw part of a CDP's collateral. This function reverts if a deposit into the CDP was made in the same block. This is to prevent flash loan attacks on other internal or external systems.",
        "params": {
          "_amount": "the amount of collateral to withdraw."
        }
      }
    },
    "stateVariables": {
      "MAXIMUM_COLLATERALIZATION_LIMIT": {
        "details": "The maximum value that the collateralization limit can be set to by the governance. This is a safety rail to prevent the collateralization from being set to a value which breaks the system. This value is equal to 400%. IMPORTANT: This constant is a raw FixedPointMath.FixedDecimal value and assumes a resolution of 64 bits. If the            resolution for the FixedPointMath library changes this constant must change as well."
      },
      "MINIMUM_COLLATERALIZATION_LIMIT": {
        "details": "The minimum value that the collateralization limit can be set to by the governance. This is a safety rail to prevent the collateralization from being set to a value which breaks the system. This value is equal to 100%. IMPORTANT: This constant is a raw FixedPointMath.FixedDecimal value and assumes a resolution of 64 bits. If the            resolution for the FixedPointMath library changes this constant must change as well."
      },
      "PERCENT_RESOLUTION": {
        "details": "Resolution for all fixed point numeric parameters which represent percents. The resolution allows for a granularity of 0.01% increments."
      },
      "_cdps": {
        "details": "A mapping of all of the user CDPs. If a user wishes to have multiple CDPs they will have to either create a new address."
      },
      "_ctx": {
        "details": "The context shared between the CDPs."
      },
      "_vaults": {
        "details": "A list of all of the vaults. The last element of the list is the vault that is currently being used for deposits and withdraws. Vaults before the last element are considered inactive and are expected to be cleared."
      },
      "borrowFee": {
        "details": "The percent of minted debt that will go to the rewards contract."
      },
      "emergencyExit": {
        "details": "A flag indicating if deposits and flushes should be halted and if all parties should be able to recall from the active vault."
      },
      "flushActivator": {
        "details": "when movemetns are bigger than this number flush is activated."
      },
      "governance": {
        "details": "The address of the account which currently has administrative capabilities over this contract."
      },
      "harvestFee": {
        "details": "The percent of each profitable harvest that will go to the rewards contract."
      },
      "initialized": {
        "details": "A flag indicating if the contract has been initialized yet."
      },
      "pegMinimum": {
        "details": "The minimum returned amount needed to be on peg according to the oracle."
      },
      "pendingGovernance": {
        "details": "The address of the pending governance."
      },
      "rewards": {
        "details": "The address of the contract which will receive fees."
      },
      "sentinel": {
        "details": "The address of the account which can initiate an emergency withdraw of funds in a vault."
      },
      "sourceToken": {
        "details": "The token that this contract is using as the source of parent asset."
      },
      "token": {
        "details": "The token that this contract is using as the parent asset."
      },
      "totalDeposited": {
        "details": "The total amount the native token deposited into the system that is owned by external users."
      },
      "transmuter": {
        "details": "The address of the contract which will transmute synthetic tokens back into native tokens."
      },
      "xtoken": {
        "details": "The token that this contract is using as the child asset."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2436,
        "contract": "contracts/ConvertAlchemist.sol:ConvertAlchemist",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 4715,
        "contract": "contracts/ConvertAlchemist.sol:ConvertAlchemist",
        "label": "sourceToken",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IMintableERC20)8239"
      },
      {
        "astId": 4717,
        "contract": "contracts/ConvertAlchemist.sol:ConvertAlchemist",
        "label": "sourceIndex",
        "offset": 0,
        "slot": "2",
        "type": "t_int128"
      },
      {
        "astId": 4720,
        "contract": "contracts/ConvertAlchemist.sol:ConvertAlchemist",
        "label": "token",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IMintableERC20)8239"
      },
      {
        "astId": 4723,
        "contract": "contracts/ConvertAlchemist.sol:ConvertAlchemist",
        "label": "xtoken",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(IMintableERC20)8239"
      },
      {
        "astId": 4726,
        "contract": "contracts/ConvertAlchemist.sol:ConvertAlchemist",
        "label": "governance",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 4729,
        "contract": "contracts/ConvertAlchemist.sol:ConvertAlchemist",
        "label": "pendingGovernance",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 4732,
        "contract": "contracts/ConvertAlchemist.sol:ConvertAlchemist",
        "label": "sentinel",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 4735,
        "contract": "contracts/ConvertAlchemist.sol:ConvertAlchemist",
        "label": "transmuter",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 4738,
        "contract": "contracts/ConvertAlchemist.sol:ConvertAlchemist",
        "label": "rewards",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      },
      {
        "astId": 4741,
        "contract": "contracts/ConvertAlchemist.sol:ConvertAlchemist",
        "label": "harvestFee",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 4744,
        "contract": "contracts/ConvertAlchemist.sol:ConvertAlchemist",
        "label": "borrowFee",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 4747,
        "contract": "contracts/ConvertAlchemist.sol:ConvertAlchemist",
        "label": "totalDeposited",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 4750,
        "contract": "contracts/ConvertAlchemist.sol:ConvertAlchemist",
        "label": "flushActivator",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 4753,
        "contract": "contracts/ConvertAlchemist.sol:ConvertAlchemist",
        "label": "initialized",
        "offset": 0,
        "slot": "14",
        "type": "t_bool"
      },
      {
        "astId": 4756,
        "contract": "contracts/ConvertAlchemist.sol:ConvertAlchemist",
        "label": "emergencyExit",
        "offset": 1,
        "slot": "14",
        "type": "t_bool"
      },
      {
        "astId": 4759,
        "contract": "contracts/ConvertAlchemist.sol:ConvertAlchemist",
        "label": "_ctx",
        "offset": 0,
        "slot": "15",
        "type": "t_struct(Context)9363_storage"
      },
      {
        "astId": 4764,
        "contract": "contracts/ConvertAlchemist.sol:ConvertAlchemist",
        "label": "_cdps",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_address,t_struct(Data)9374_storage)"
      },
      {
        "astId": 4767,
        "contract": "contracts/ConvertAlchemist.sol:ConvertAlchemist",
        "label": "_vaults",
        "offset": 0,
        "slot": "18",
        "type": "t_struct(List)8979_storage"
      },
      {
        "astId": 4770,
        "contract": "contracts/ConvertAlchemist.sol:ConvertAlchemist",
        "label": "pegMinimum",
        "offset": 0,
        "slot": "19",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Data)8975_storage)dyn_storage": {
        "base": "t_struct(Data)8975_storage",
        "encoding": "dynamic_array",
        "label": "struct AlchemistVault.Data[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IMintableERC20)8239": {
        "encoding": "inplace",
        "label": "contract IMintableERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IVaultAdapter)8349": {
        "encoding": "inplace",
        "label": "contract IVaultAdapter",
        "numberOfBytes": "20"
      },
      "t_int128": {
        "encoding": "inplace",
        "label": "int128",
        "numberOfBytes": "16"
      },
      "t_mapping(t_address,t_struct(Data)9374_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct CDP.Data)",
        "numberOfBytes": "32",
        "value": "t_struct(Data)9374_storage"
      },
      "t_struct(Context)9363_storage": {
        "encoding": "inplace",
        "label": "struct CDP.Context",
        "members": [
          {
            "astId": 9360,
            "contract": "contracts/ConvertAlchemist.sol:ConvertAlchemist",
            "label": "collateralizationLimit",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(FixedDecimal)8699_storage"
          },
          {
            "astId": 9362,
            "contract": "contracts/ConvertAlchemist.sol:ConvertAlchemist",
            "label": "accumulatedYieldWeight",
            "offset": 0,
            "slot": "1",
            "type": "t_struct(FixedDecimal)8699_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Data)8975_storage": {
        "encoding": "inplace",
        "label": "struct AlchemistVault.Data",
        "members": [
          {
            "astId": 8972,
            "contract": "contracts/ConvertAlchemist.sol:ConvertAlchemist",
            "label": "adapter",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(IVaultAdapter)8349"
          },
          {
            "astId": 8974,
            "contract": "contracts/ConvertAlchemist.sol:ConvertAlchemist",
            "label": "totalDeposited",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Data)9374_storage": {
        "encoding": "inplace",
        "label": "struct CDP.Data",
        "members": [
          {
            "astId": 9365,
            "contract": "contracts/ConvertAlchemist.sol:ConvertAlchemist",
            "label": "totalDeposited",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 9367,
            "contract": "contracts/ConvertAlchemist.sol:ConvertAlchemist",
            "label": "totalDebt",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 9369,
            "contract": "contracts/ConvertAlchemist.sol:ConvertAlchemist",
            "label": "totalCredit",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 9371,
            "contract": "contracts/ConvertAlchemist.sol:ConvertAlchemist",
            "label": "lastDeposit",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 9373,
            "contract": "contracts/ConvertAlchemist.sol:ConvertAlchemist",
            "label": "lastAccumulatedYieldWeight",
            "offset": 0,
            "slot": "4",
            "type": "t_struct(FixedDecimal)8699_storage"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(FixedDecimal)8699_storage": {
        "encoding": "inplace",
        "label": "struct FixedPointMath.FixedDecimal",
        "members": [
          {
            "astId": 8698,
            "contract": "contracts/ConvertAlchemist.sol:ConvertAlchemist",
            "label": "x",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(List)8979_storage": {
        "encoding": "inplace",
        "label": "struct AlchemistVault.List",
        "members": [
          {
            "astId": 8978,
            "contract": "contracts/ConvertAlchemist.sol:ConvertAlchemist",
            "label": "elements",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_struct(Data)8975_storage)dyn_storage"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}